// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: core/Tron.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from core/Tron.proto</summary>
  public static partial class TronReflection {

    #region Descriptor
    /// <summary>File descriptor for core/Tron.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TronReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jb3JlL1Ryb24ucHJvdG8SCHByb3RvY29sGhlnb29nbGUvcHJvdG9idWYv",
            "YW55LnByb3RvGhNjb3JlL0Rpc2NvdmVyLnByb3RvIioKCUFjY291bnRJZBIM",
            "CgRuYW1lGAEgASgMEg8KB2FkZHJlc3MYAiABKAwiMAoEVm90ZRIUCgx2b3Rl",
            "X2FkZHJlc3MYASABKAwSEgoKdm90ZV9jb3VudBgCIAEoAyLRAgoIUHJvcG9z",
            "YWwSEwoLcHJvcG9zYWxfaWQYASABKAMSGAoQcHJvcG9zZXJfYWRkcmVzcxgC",
            "IAEoDBI2CgpwYXJhbWV0ZXJzGAMgAygLMiIucHJvdG9jb2wuUHJvcG9zYWwu",
            "UGFyYW1ldGVyc0VudHJ5EhcKD2V4cGlyYXRpb25fdGltZRgEIAEoAxITCgtj",
            "cmVhdGVfdGltZRgFIAEoAxIRCglhcHByb3ZhbHMYBiADKAwSJwoFc3RhdGUY",
            "ByABKA4yGC5wcm90b2NvbC5Qcm9wb3NhbC5TdGF0ZRoxCg9QYXJhbWV0ZXJz",
            "RW50cnkSCwoDa2V5GAEgASgDEg0KBXZhbHVlGAIgASgDOgI4ASJBCgVTdGF0",
            "ZRILCgdQRU5ESU5HEAASDwoLRElTQVBQUk9WRUQQARIMCghBUFBST1ZFRBAC",
            "EgwKCENBTkNFTEVEEAMiuQEKCEV4Y2hhbmdlEhMKC2V4Y2hhbmdlX2lkGAEg",
            "ASgDEhcKD2NyZWF0b3JfYWRkcmVzcxgCIAEoDBITCgtjcmVhdGVfdGltZRgD",
            "IAEoAxIWCg5maXJzdF90b2tlbl9pZBgGIAEoDBIbChNmaXJzdF90b2tlbl9i",
            "YWxhbmNlGAcgASgDEhcKD3NlY29uZF90b2tlbl9pZBgIIAEoDBIcChRzZWNv",
            "bmRfdG9rZW5fYmFsYW5jZRgJIAEoAyKBAQoPQ2hhaW5QYXJhbWV0ZXJzEkAK",
            "DmNoYWluUGFyYW1ldGVyGAEgAygLMigucHJvdG9jb2wuQ2hhaW5QYXJhbWV0",
            "ZXJzLkNoYWluUGFyYW1ldGVyGiwKDkNoYWluUGFyYW1ldGVyEgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoAyLwDwoHQWNjb3VudBIUCgxhY2NvdW50X25h",
            "bWUYASABKAwSIwoEdHlwZRgCIAEoDjIVLnByb3RvY29sLkFjY291bnRUeXBl",
            "Eg8KB2FkZHJlc3MYAyABKAwSDwoHYmFsYW5jZRgEIAEoAxIdCgV2b3RlcxgF",
            "IAMoCzIOLnByb3RvY29sLlZvdGUSKwoFYXNzZXQYBiADKAsyHC5wcm90b2Nv",
            "bC5BY2NvdW50LkFzc2V0RW50cnkSLwoHYXNzZXRWMhg4IAMoCzIeLnByb3Rv",
            "Y29sLkFjY291bnQuQXNzZXRWMkVudHJ5EigKBmZyb3plbhgHIAMoCzIYLnBy",
            "b3RvY29sLkFjY291bnQuRnJvemVuEhEKCW5ldF91c2FnZRgIIAEoAxI3Ci9h",
            "Y3F1aXJlZF9kZWxlZ2F0ZWRfZnJvemVuX2JhbGFuY2VfZm9yX2JhbmR3aWR0",
            "aBgpIAEoAxIuCiZkZWxlZ2F0ZWRfZnJvemVuX2JhbGFuY2VfZm9yX2JhbmR3",
            "aWR0aBgqIAEoAxITCgtjcmVhdGVfdGltZRgJIAEoAxIcChRsYXRlc3Rfb3By",
            "YXRpb25fdGltZRgKIAEoAxIRCglhbGxvd2FuY2UYCyABKAMSHAoUbGF0ZXN0",
            "X3dpdGhkcmF3X3RpbWUYDCABKAMSDAoEY29kZRgNIAEoDBISCgppc193aXRu",
            "ZXNzGA4gASgIEhQKDGlzX2NvbW1pdHRlZRgPIAEoCBIvCg1mcm96ZW5fc3Vw",
            "cGx5GBAgAygLMhgucHJvdG9jb2wuQWNjb3VudC5Gcm96ZW4SGQoRYXNzZXRf",
            "aXNzdWVkX25hbWUYESABKAwSFwoPYXNzZXRfaXNzdWVkX0lEGDkgASgMElQK",
            "G2xhdGVzdF9hc3NldF9vcGVyYXRpb25fdGltZRgSIAMoCzIvLnByb3RvY29s",
            "LkFjY291bnQuTGF0ZXN0QXNzZXRPcGVyYXRpb25UaW1lRW50cnkSWAodbGF0",
            "ZXN0X2Fzc2V0X29wZXJhdGlvbl90aW1lVjIYOiADKAsyMS5wcm90b2NvbC5B",
            "Y2NvdW50LkxhdGVzdEFzc2V0T3BlcmF0aW9uVGltZVYyRW50cnkSFgoOZnJl",
            "ZV9uZXRfdXNhZ2UYEyABKAMSRgoUZnJlZV9hc3NldF9uZXRfdXNhZ2UYFCAD",
            "KAsyKC5wcm90b2NvbC5BY2NvdW50LkZyZWVBc3NldE5ldFVzYWdlRW50cnkS",
            "SgoWZnJlZV9hc3NldF9uZXRfdXNhZ2VWMhg7IAMoCzIqLnByb3RvY29sLkFj",
            "Y291bnQuRnJlZUFzc2V0TmV0VXNhZ2VWMkVudHJ5EhsKE2xhdGVzdF9jb25z",
            "dW1lX3RpbWUYFSABKAMSIAoYbGF0ZXN0X2NvbnN1bWVfZnJlZV90aW1lGBYg",
            "ASgDEhIKCmFjY291bnRfaWQYFyABKAwSOwoQYWNjb3VudF9yZXNvdXJjZRga",
            "IAEoCzIhLnByb3RvY29sLkFjY291bnQuQWNjb3VudFJlc291cmNlEhAKCGNv",
            "ZGVIYXNoGB4gASgMEi4KEG93bmVyX3Blcm1pc3Npb24YHyABKAsyFC5wcm90",
            "b2NvbC5QZXJtaXNzaW9uEjAKEndpdG5lc3NfcGVybWlzc2lvbhggIAEoCzIU",
            "LnByb3RvY29sLlBlcm1pc3Npb24SLwoRYWN0aXZlX3Blcm1pc3Npb24YISAD",
            "KAsyFC5wcm90b2NvbC5QZXJtaXNzaW9uGjUKBkZyb3plbhIWCg5mcm96ZW5f",
            "YmFsYW5jZRgBIAEoAxITCgtleHBpcmVfdGltZRgCIAEoAxosCgpBc3NldEVu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEaLgoMQXNzZXRW",
            "MkVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEaPwodTGF0",
            "ZXN0QXNzZXRPcGVyYXRpb25UaW1lRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgDOgI4ARpBCh9MYXRlc3RBc3NldE9wZXJhdGlvblRpbWVWMkVu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEaOAoWRnJlZUFz",
            "c2V0TmV0VXNhZ2VFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6",
            "AjgBGjoKGEZyZWVBc3NldE5ldFVzYWdlVjJFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAM6AjgBGsMCCg9BY2NvdW50UmVzb3VyY2USFAoMZW5l",
            "cmd5X3VzYWdlGAEgASgDEjsKGWZyb3plbl9iYWxhbmNlX2Zvcl9lbmVyZ3kY",
            "AiABKAsyGC5wcm90b2NvbC5BY2NvdW50LkZyb3plbhImCh5sYXRlc3RfY29u",
            "c3VtZV90aW1lX2Zvcl9lbmVyZ3kYAyABKAMSNAosYWNxdWlyZWRfZGVsZWdh",
            "dGVkX2Zyb3plbl9iYWxhbmNlX2Zvcl9lbmVyZ3kYBCABKAMSKwojZGVsZWdh",
            "dGVkX2Zyb3plbl9iYWxhbmNlX2Zvcl9lbmVyZ3kYBSABKAMSFQoNc3RvcmFn",
            "ZV9saW1pdBgGIAEoAxIVCg1zdG9yYWdlX3VzYWdlGAcgASgDEiQKHGxhdGVz",
            "dF9leGNoYW5nZV9zdG9yYWdlX3RpbWUYCCABKAMiJgoDS2V5Eg8KB2FkZHJl",
            "c3MYASABKAwSDgoGd2VpZ2h0GAIgASgDIrkBChFEZWxlZ2F0ZWRSZXNvdXJj",
            "ZRIMCgRmcm9tGAEgASgMEgoKAnRvGAIgASgMEiQKHGZyb3plbl9iYWxhbmNl",
            "X2Zvcl9iYW5kd2lkdGgYAyABKAMSIQoZZnJvemVuX2JhbGFuY2VfZm9yX2Vu",
            "ZXJneRgEIAEoAxIhChlleHBpcmVfdGltZV9mb3JfYmFuZHdpZHRoGAUgASgD",
            "Eh4KFmV4cGlyZV90aW1lX2Zvcl9lbmVyZ3kYBiABKAMiSgoJYXV0aG9yaXR5",
            "EiQKB2FjY291bnQYASABKAsyEy5wcm90b2NvbC5BY2NvdW50SWQSFwoPcGVy",
            "bWlzc2lvbl9uYW1lGAIgASgMIvEBCgpQZXJtaXNzaW9uEjEKBHR5cGUYASAB",
            "KA4yIy5wcm90b2NvbC5QZXJtaXNzaW9uLlBlcm1pc3Npb25UeXBlEgoKAmlk",
            "GAIgASgFEhcKD3Blcm1pc3Npb25fbmFtZRgDIAEoCRIRCgl0aHJlc2hvbGQY",
            "BCABKAMSEQoJcGFyZW50X2lkGAUgASgFEhIKCm9wZXJhdGlvbnMYBiABKAwS",
            "GwoEa2V5cxgHIAMoCzINLnByb3RvY29sLktleSI0Cg5QZXJtaXNzaW9uVHlw",
            "ZRIJCgVPd25lchAAEgsKB1dpdG5lc3MQARIKCgZBY3RpdmUQAiK1AQoHV2l0",
            "bmVzcxIPCgdhZGRyZXNzGAEgASgMEhEKCXZvdGVDb3VudBgCIAEoAxIOCgZw",
            "dWJLZXkYAyABKAwSCwoDdXJsGAQgASgJEhUKDXRvdGFsUHJvZHVjZWQYBSAB",
            "KAMSEwoLdG90YWxNaXNzZWQYBiABKAMSFgoObGF0ZXN0QmxvY2tOdW0YByAB",
            "KAMSFQoNbGF0ZXN0U2xvdE51bRgIIAEoAxIOCgZpc0pvYnMYCSABKAgiXgoF",
            "Vm90ZXMSDwoHYWRkcmVzcxgBIAEoDBIhCglvbGRfdm90ZXMYAiADKAsyDi5w",
            "cm90b2NvbC5Wb3RlEiEKCW5ld192b3RlcxgDIAMoCzIOLnByb3RvY29sLlZv",
            "dGUiLQoIVFhPdXRwdXQSDQoFdmFsdWUYASABKAMSEgoKcHViS2V5SGFzaBgC",
            "IAEoDCJ4CgdUWElucHV0EicKCHJhd19kYXRhGAEgASgLMhUucHJvdG9jb2wu",
            "VFhJbnB1dC5yYXcSEQoJc2lnbmF0dXJlGAQgASgMGjEKA3JhdxIMCgR0eElE",
            "GAEgASgMEgwKBHZvdXQYAiABKAMSDgoGcHViS2V5GAMgASgMIjAKCVRYT3V0",
            "cHV0cxIjCgdvdXRwdXRzGAEgAygLMhIucHJvdG9jb2wuVFhPdXRwdXQi1QEK",
            "D1Jlc291cmNlUmVjZWlwdBIUCgxlbmVyZ3lfdXNhZ2UYASABKAMSEgoKZW5l",
            "cmd5X2ZlZRgCIAEoAxIbChNvcmlnaW5fZW5lcmd5X3VzYWdlGAMgASgDEhoK",
            "EmVuZXJneV91c2FnZV90b3RhbBgEIAEoAxIRCgluZXRfdXNhZ2UYBSABKAMS",
            "DwoHbmV0X2ZlZRgGIAEoAxI7CgZyZXN1bHQYByABKA4yKy5wcm90b2NvbC5U",
            "cmFuc2FjdGlvbi5SZXN1bHQuY29udHJhY3RSZXN1bHQiqxAKC1RyYW5zYWN0",
            "aW9uEisKCHJhd19kYXRhGAEgASgLMhkucHJvdG9jb2wuVHJhbnNhY3Rpb24u",
            "cmF3EhEKCXNpZ25hdHVyZRgCIAMoDBIpCgNyZXQYBSADKAsyHC5wcm90b2Nv",
            "bC5UcmFuc2FjdGlvbi5SZXN1bHQagggKCENvbnRyYWN0EjkKBHR5cGUYASAB",
            "KA4yKy5wcm90b2NvbC5UcmFuc2FjdGlvbi5Db250cmFjdC5Db250cmFjdFR5",
            "cGUSJwoJcGFyYW1ldGVyGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIQ",
            "Cghwcm92aWRlchgDIAEoDBIUCgxDb250cmFjdE5hbWUYBCABKAwSFQoNUGVy",
            "bWlzc2lvbl9pZBgFIAEoBSLSBgoMQ29udHJhY3RUeXBlEhkKFUFjY291bnRD",
            "cmVhdGVDb250cmFjdBAAEhQKEFRyYW5zZmVyQ29udHJhY3QQARIZChVUcmFu",
            "c2ZlckFzc2V0Q29udHJhY3QQAhIVChFWb3RlQXNzZXRDb250cmFjdBADEhcK",
            "E1ZvdGVXaXRuZXNzQ29udHJhY3QQBBIZChVXaXRuZXNzQ3JlYXRlQ29udHJh",
            "Y3QQBRIWChJBc3NldElzc3VlQ29udHJhY3QQBhIZChVXaXRuZXNzVXBkYXRl",
            "Q29udHJhY3QQCBIhCh1QYXJ0aWNpcGF0ZUFzc2V0SXNzdWVDb250cmFjdBAJ",
            "EhkKFUFjY291bnRVcGRhdGVDb250cmFjdBAKEhkKFUZyZWV6ZUJhbGFuY2VD",
            "b250cmFjdBALEhsKF1VuZnJlZXplQmFsYW5jZUNvbnRyYWN0EAwSGwoXV2l0",
            "aGRyYXdCYWxhbmNlQ29udHJhY3QQDRIZChVVbmZyZWV6ZUFzc2V0Q29udHJh",
            "Y3QQDhIXChNVcGRhdGVBc3NldENvbnRyYWN0EA8SGgoWUHJvcG9zYWxDcmVh",
            "dGVDb250cmFjdBAQEhsKF1Byb3Bvc2FsQXBwcm92ZUNvbnRyYWN0EBESGgoW",
            "UHJvcG9zYWxEZWxldGVDb250cmFjdBASEhgKFFNldEFjY291bnRJZENvbnRy",
            "YWN0EBMSEgoOQ3VzdG9tQ29udHJhY3QQFBIXChNDcmVhdGVTbWFydENvbnRy",
            "YWN0EB4SGAoUVHJpZ2dlclNtYXJ0Q29udHJhY3QQHxIPCgtHZXRDb250cmFj",
            "dBAgEhkKFVVwZGF0ZVNldHRpbmdDb250cmFjdBAhEhoKFkV4Y2hhbmdlQ3Jl",
            "YXRlQ29udHJhY3QQKRIaChZFeGNoYW5nZUluamVjdENvbnRyYWN0ECoSHAoY",
            "RXhjaGFuZ2VXaXRoZHJhd0NvbnRyYWN0ECsSHwobRXhjaGFuZ2VUcmFuc2Fj",
            "dGlvbkNvbnRyYWN0ECwSHQoZVXBkYXRlRW5lcmd5TGltaXRDb250cmFjdBAt",
            "EiMKH0FjY291bnRQZXJtaXNzaW9uVXBkYXRlQ29udHJhY3QQLhIUChBDbGVh",
            "ckFCSUNvbnRyYWN0EDAarAUKBlJlc3VsdBILCgNmZWUYASABKAMSLgoDcmV0",
            "GAIgASgOMiEucHJvdG9jb2wuVHJhbnNhY3Rpb24uUmVzdWx0LmNvZGUSQAoL",
            "Y29udHJhY3RSZXQYAyABKA4yKy5wcm90b2NvbC5UcmFuc2FjdGlvbi5SZXN1",
            "bHQuY29udHJhY3RSZXN1bHQSFAoMYXNzZXRJc3N1ZUlEGA4gASgJEhcKD3dp",
            "dGhkcmF3X2Ftb3VudBgPIAEoAxIXCg91bmZyZWV6ZV9hbW91bnQYECABKAMS",
            "IAoYZXhjaGFuZ2VfcmVjZWl2ZWRfYW1vdW50GBIgASgDEiYKHmV4Y2hhbmdl",
            "X2luamVjdF9hbm90aGVyX2Ftb3VudBgTIAEoAxIoCiBleGNoYW5nZV93aXRo",
            "ZHJhd19hbm90aGVyX2Ftb3VudBgUIAEoAxITCgtleGNoYW5nZV9pZBgVIAEo",
            "AyIeCgRjb2RlEgoKBlNVQ0VTUxAAEgoKBkZBSUxFRBABIrECCg5jb250cmFj",
            "dFJlc3VsdBILCgdERUZBVUxUEAASCwoHU1VDQ0VTUxABEgoKBlJFVkVSVBAC",
            "EhgKFEJBRF9KVU1QX0RFU1RJTkFUSU9OEAMSEQoNT1VUX09GX01FTU9SWRAE",
            "EhgKFFBSRUNPTVBJTEVEX0NPTlRSQUNUEAUSEwoPU1RBQ0tfVE9PX1NNQUxM",
            "EAYSEwoPU1RBQ0tfVE9PX0xBUkdFEAcSFQoRSUxMRUdBTF9PUEVSQVRJT04Q",
            "CBISCg5TVEFDS19PVkVSRkxPVxAJEhEKDU9VVF9PRl9FTkVSR1kQChIPCgtP",
            "VVRfT0ZfVElNRRALEhcKE0pWTV9TVEFDS19PVkVSX0ZMT1cQDBILCgdVTktO",
            "T1dOEA0SEwoPVFJBTlNGRVJfRkFJTEVEEA4a/AEKA3JhdxIXCg9yZWZfYmxv",
            "Y2tfYnl0ZXMYASABKAwSFQoNcmVmX2Jsb2NrX251bRgDIAEoAxIWCg5yZWZf",
            "YmxvY2tfaGFzaBgEIAEoDBISCgpleHBpcmF0aW9uGAggASgDEiIKBWF1dGhz",
            "GAkgAygLMhMucHJvdG9jb2wuYXV0aG9yaXR5EgwKBGRhdGEYCiABKAwSMAoI",
            "Y29udHJhY3QYCyADKAsyHi5wcm90b2NvbC5UcmFuc2FjdGlvbi5Db250cmFj",
            "dBIPCgdzY3JpcHRzGAwgASgMEhEKCXRpbWVzdGFtcBgOIAEoAxIRCglmZWVf",
            "bGltaXQYEiABKAMiigUKD1RyYW5zYWN0aW9uSW5mbxIKCgJpZBgBIAEoDBIL",
            "CgNmZWUYAiABKAMSEwoLYmxvY2tOdW1iZXIYAyABKAMSFgoOYmxvY2tUaW1l",
            "U3RhbXAYBCABKAMSFgoOY29udHJhY3RSZXN1bHQYBSADKAwSGAoQY29udHJh",
            "Y3RfYWRkcmVzcxgGIAEoDBIqCgdyZWNlaXB0GAcgASgLMhkucHJvdG9jb2wu",
            "UmVzb3VyY2VSZWNlaXB0EioKA2xvZxgIIAMoCzIdLnByb3RvY29sLlRyYW5z",
            "YWN0aW9uSW5mby5Mb2cSLgoGcmVzdWx0GAkgASgOMh4ucHJvdG9jb2wuVHJh",
            "bnNhY3Rpb25JbmZvLmNvZGUSEgoKcmVzTWVzc2FnZRgKIAEoDBIUCgxhc3Nl",
            "dElzc3VlSUQYDiABKAkSFwoPd2l0aGRyYXdfYW1vdW50GA8gASgDEhcKD3Vu",
            "ZnJlZXplX2Ftb3VudBgQIAEoAxI8ChVpbnRlcm5hbF90cmFuc2FjdGlvbnMY",
            "ESADKAsyHS5wcm90b2NvbC5JbnRlcm5hbFRyYW5zYWN0aW9uEiAKGGV4Y2hh",
            "bmdlX3JlY2VpdmVkX2Ftb3VudBgSIAEoAxImCh5leGNoYW5nZV9pbmplY3Rf",
            "YW5vdGhlcl9hbW91bnQYEyABKAMSKAogZXhjaGFuZ2Vfd2l0aGRyYXdfYW5v",
            "dGhlcl9hbW91bnQYFCABKAMSEwoLZXhjaGFuZ2VfaWQYFSABKAMaNAoDTG9n",
            "Eg8KB2FkZHJlc3MYASABKAwSDgoGdG9waWNzGAIgAygMEgwKBGRhdGEYAyAB",
            "KAwiHgoEY29kZRIKCgZTVUNFU1MQABIKCgZGQUlMRUQQASI7CgxUcmFuc2Fj",
            "dGlvbnMSKwoMdHJhbnNhY3Rpb25zGAEgAygLMhUucHJvdG9jb2wuVHJhbnNh",
            "Y3Rpb24iUQoPVHJhbnNhY3Rpb25TaWduEioKC3RyYW5zYWN0aW9uGAEgASgL",
            "MhUucHJvdG9jb2wuVHJhbnNhY3Rpb24SEgoKcHJpdmF0ZUtleRgCIAEoDCKA",
            "AgoLQmxvY2tIZWFkZXISKwoIcmF3X2RhdGEYASABKAsyGS5wcm90b2NvbC5C",
            "bG9ja0hlYWRlci5yYXcSGQoRd2l0bmVzc19zaWduYXR1cmUYAiABKAwaqAEK",
            "A3JhdxIRCgl0aW1lc3RhbXAYASABKAMSEgoKdHhUcmllUm9vdBgCIAEoDBIS",
            "CgpwYXJlbnRIYXNoGAMgASgMEg4KBm51bWJlchgHIAEoAxISCgp3aXRuZXNz",
            "X2lkGAggASgDEhcKD3dpdG5lc3NfYWRkcmVzcxgJIAEoDBIPCgd2ZXJzaW9u",
            "GAogASgFEhgKEGFjY291bnRTdGF0ZVJvb3QYCyABKAwiYQoFQmxvY2sSKwoM",
            "dHJhbnNhY3Rpb25zGAEgAygLMhUucHJvdG9jb2wuVHJhbnNhY3Rpb24SKwoM",
            "YmxvY2tfaGVhZGVyGAIgASgLMhUucHJvdG9jb2wuQmxvY2tIZWFkZXIifAoO",
            "Q2hhaW5JbnZlbnRvcnkSLQoDaWRzGAEgAygLMiAucHJvdG9jb2wuQ2hhaW5J",
            "bnZlbnRvcnkuQmxvY2tJZBISCgpyZW1haW5fbnVtGAIgASgDGicKB0Jsb2Nr",
            "SWQSDAoEaGFzaBgBIAEoDBIOCgZudW1iZXIYAiABKAMivwEKDkJsb2NrSW52",
            "ZW50b3J5Ei0KA2lkcxgBIAMoCzIgLnByb3RvY29sLkJsb2NrSW52ZW50b3J5",
            "LkJsb2NrSWQSKwoEdHlwZRgCIAEoDjIdLnByb3RvY29sLkJsb2NrSW52ZW50",
            "b3J5LlR5cGUaJwoHQmxvY2tJZBIMCgRoYXNoGAEgASgMEg4KBm51bWJlchgC",
            "IAEoAyIoCgRUeXBlEggKBFNZTkMQABILCgdBRFZUSVNFEAESCQoFRkVUQ0gQ",
            "AiJuCglJbnZlbnRvcnkSLwoEdHlwZRgBIAEoDjIhLnByb3RvY29sLkludmVu",
            "dG9yeS5JbnZlbnRvcnlUeXBlEgsKA2lkcxgCIAMoDCIjCg1JbnZlbnRvcnlU",
            "eXBlEgcKA1RSWBAAEgkKBUJMT0NLEAEi5QEKBUl0ZW1zEiYKBHR5cGUYASAB",
            "KA4yGC5wcm90b2NvbC5JdGVtcy5JdGVtVHlwZRIfCgZibG9ja3MYAiADKAsy",
            "Dy5wcm90b2NvbC5CbG9jaxIsCg1ibG9ja19oZWFkZXJzGAMgAygLMhUucHJv",
            "dG9jb2wuQmxvY2tIZWFkZXISKwoMdHJhbnNhY3Rpb25zGAQgAygLMhUucHJv",
            "dG9jb2wuVHJhbnNhY3Rpb24iOAoISXRlbVR5cGUSBwoDRVJSEAASBwoDVFJY",
            "EAESCQoFQkxPQ0sQAhIPCgtCTE9DS0hFQURFUhADIjQKEUR5bmFtaWNQcm9w",
            "ZXJ0aWVzEh8KF2xhc3Rfc29saWRpdHlfYmxvY2tfbnVtGAEgASgDIjkKEURp",
            "c2Nvbm5lY3RNZXNzYWdlEiQKBnJlYXNvbhgBIAEoDjIULnByb3RvY29sLlJl",
            "YXNvbkNvZGUioAIKDEhlbGxvTWVzc2FnZRIgCgRmcm9tGAEgASgLMhIucHJv",
            "dG9jb2wuRW5kcG9pbnQSDwoHdmVyc2lvbhgCIAEoBRIRCgl0aW1lc3RhbXAY",
            "AyABKAMSNgoOZ2VuZXNpc0Jsb2NrSWQYBCABKAsyHi5wcm90b2NvbC5IZWxs",
            "b01lc3NhZ2UuQmxvY2tJZBI0Cgxzb2xpZEJsb2NrSWQYBSABKAsyHi5wcm90",
            "b2NvbC5IZWxsb01lc3NhZ2UuQmxvY2tJZBIzCgtoZWFkQmxvY2tJZBgGIAEo",
            "CzIeLnByb3RvY29sLkhlbGxvTWVzc2FnZS5CbG9ja0lkGicKB0Jsb2NrSWQS",
            "DAoEaGFzaBgBIAEoDBIOCgZudW1iZXIYAiABKAMi8QYKDVNtYXJ0Q29udHJh",
            "Y3QSFgoOb3JpZ2luX2FkZHJlc3MYASABKAwSGAoQY29udHJhY3RfYWRkcmVz",
            "cxgCIAEoDBIoCgNhYmkYAyABKAsyGy5wcm90b2NvbC5TbWFydENvbnRyYWN0",
            "LkFCSRIQCghieXRlY29kZRgEIAEoDBISCgpjYWxsX3ZhbHVlGAUgASgDEiUK",
            "HWNvbnN1bWVfdXNlcl9yZXNvdXJjZV9wZXJjZW50GAYgASgDEgwKBG5hbWUY",
            "ByABKAkSGwoTb3JpZ2luX2VuZXJneV9saW1pdBgIIAEoAxIRCgljb2RlX2hh",
            "c2gYCSABKAwa+AQKA0FCSRIxCgZlbnRyeXMYASADKAsyIS5wcm90b2NvbC5T",
            "bWFydENvbnRyYWN0LkFCSS5FbnRyeRq9BAoFRW50cnkSEQoJYW5vbnltb3Vz",
            "GAEgASgIEhAKCGNvbnN0YW50GAIgASgIEgwKBG5hbWUYAyABKAkSNwoGaW5w",
            "dXRzGAQgAygLMicucHJvdG9jb2wuU21hcnRDb250cmFjdC5BQkkuRW50cnku",
            "UGFyYW0SOAoHb3V0cHV0cxgFIAMoCzInLnByb3RvY29sLlNtYXJ0Q29udHJh",
            "Y3QuQUJJLkVudHJ5LlBhcmFtEjkKBHR5cGUYBiABKA4yKy5wcm90b2NvbC5T",
            "bWFydENvbnRyYWN0LkFCSS5FbnRyeS5FbnRyeVR5cGUSDwoHcGF5YWJsZRgH",
            "IAEoCBJOCg9zdGF0ZU11dGFiaWxpdHkYCCABKA4yNS5wcm90b2NvbC5TbWFy",
            "dENvbnRyYWN0LkFCSS5FbnRyeS5TdGF0ZU11dGFiaWxpdHlUeXBlGjQKBVBh",
            "cmFtEg8KB2luZGV4ZWQYASABKAgSDAoEbmFtZRgCIAEoCRIMCgR0eXBlGAMg",
            "ASgJIlkKCUVudHJ5VHlwZRIUChBVbmtub3duRW50cnlUeXBlEAASDwoLQ29u",
            "c3RydWN0b3IQARIMCghGdW5jdGlvbhACEgkKBUV2ZW50EAMSDAoIRmFsbGJh",
            "Y2sQBCJhChNTdGF0ZU11dGFiaWxpdHlUeXBlEhkKFVVua25vd25NdXRhYmls",
            "aXR5VHlwZRAAEggKBFB1cmUQARIICgRWaWV3EAISDgoKTm9ucGF5YWJsZRAD",
            "EgsKB1BheWFibGUQBCLwAQoTSW50ZXJuYWxUcmFuc2FjdGlvbhIMCgRoYXNo",
            "GAEgASgMEhYKDmNhbGxlcl9hZGRyZXNzGAIgASgMEhoKEnRyYW5zZmVyVG9f",
            "YWRkcmVzcxgDIAEoDBJCCg1jYWxsVmFsdWVJbmZvGAQgAygLMisucHJvdG9j",
            "b2wuSW50ZXJuYWxUcmFuc2FjdGlvbi5DYWxsVmFsdWVJbmZvEgwKBG5vdGUY",
            "BSABKAwSEAoIcmVqZWN0ZWQYBiABKAgaMwoNQ2FsbFZhbHVlSW5mbxIRCglj",
            "YWxsVmFsdWUYASABKAMSDwoHdG9rZW5JZBgCIAEoCSJaCh1EZWxlZ2F0ZWRS",
            "ZXNvdXJjZUFjY291bnRJbmRleBIPCgdhY2NvdW50GAEgASgMEhQKDGZyb21B",
            "Y2NvdW50cxgCIAMoDBISCgp0b0FjY291bnRzGAMgAygMIqARCghOb2RlSW5m",
            "bxIUCgxiZWdpblN5bmNOdW0YASABKAMSDQoFYmxvY2sYAiABKAkSFQoNc29s",
            "aWRpdHlCbG9jaxgDIAEoCRIbChNjdXJyZW50Q29ubmVjdENvdW50GAQgASgF",
            "EhoKEmFjdGl2ZUNvbm5lY3RDb3VudBgFIAEoBRIbChNwYXNzaXZlQ29ubmVj",
            "dENvdW50GAYgASgFEhEKCXRvdGFsRmxvdxgHIAEoAxIxCgxwZWVySW5mb0xp",
            "c3QYCCADKAsyGy5wcm90b2NvbC5Ob2RlSW5mby5QZWVySW5mbxI5Cg5jb25m",
            "aWdOb2RlSW5mbxgJIAEoCzIhLnByb3RvY29sLk5vZGVJbmZvLkNvbmZpZ05v",
            "ZGVJbmZvEjMKC21hY2hpbmVJbmZvGAogASgLMh4ucHJvdG9jb2wuTm9kZUlu",
            "Zm8uTWFjaGluZUluZm8SSAoTY2hlYXRXaXRuZXNzSW5mb01hcBgLIAMoCzIr",
            "LnByb3RvY29sLk5vZGVJbmZvLkNoZWF0V2l0bmVzc0luZm9NYXBFbnRyeRo6",
            "ChhDaGVhdFdpdG5lc3NJbmZvTWFwRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgJOgI4ARrNBAoIUGVlckluZm8SFQoNbGFzdFN5bmNCbG9jaxgB",
            "IAEoCRIRCglyZW1haW5OdW0YAiABKAMSGwoTbGFzdEJsb2NrVXBkYXRlVGlt",
            "ZRgDIAEoAxIQCghzeW5jRmxhZxgEIAEoCBIfChdoZWFkQmxvY2tUaW1lV2VC",
            "b3RoSGF2ZRgFIAEoAxIYChBuZWVkU3luY0Zyb21QZWVyGAYgASgIEhYKDm5l",
            "ZWRTeW5jRnJvbVVzGAcgASgIEgwKBGhvc3QYCCABKAkSDAoEcG9ydBgJIAEo",
            "BRIOCgZub2RlSWQYCiABKAkSEwoLY29ubmVjdFRpbWUYCyABKAMSEgoKYXZn",
            "TGF0ZW5jeRgMIAEoARIXCg9zeW5jVG9GZXRjaFNpemUYDSABKAUSHgoWc3lu",
            "Y1RvRmV0Y2hTaXplUGVla051bRgOIAEoAxIeChZzeW5jQmxvY2tSZXF1ZXN0",
            "ZWRTaXplGA8gASgFEhUKDXVuRmV0Y2hTeW5OdW0YECABKAMSFwoPYmxvY2tJ",
            "blBvcmNTaXplGBEgASgFEhsKE2hlYWRCbG9ja1dlQm90aEhhdmUYEiABKAkS",
            "EAoIaXNBY3RpdmUYEyABKAgSDQoFc2NvcmUYFCABKAUSEQoJbm9kZUNvdW50",
            "GBUgASgFEg4KBmluRmxvdxgWIAEoAxIXCg9kaXNjb25uZWN0VGltZXMYFyAB",
            "KAUSHQoVbG9jYWxEaXNjb25uZWN0UmVhc29uGBggASgJEh4KFnJlbW90ZURp",
            "c2Nvbm5lY3RSZWFzb24YGSABKAka5QMKDkNvbmZpZ05vZGVJbmZvEhMKC2Nv",
            "ZGVWZXJzaW9uGAEgASgJEhIKCnAycFZlcnNpb24YAiABKAkSEgoKbGlzdGVu",
            "UG9ydBgDIAEoBRIWCg5kaXNjb3ZlckVuYWJsZRgEIAEoCBIWCg5hY3RpdmVO",
            "b2RlU2l6ZRgFIAEoBRIXCg9wYXNzaXZlTm9kZVNpemUYBiABKAUSFAoMc2Vu",
            "ZE5vZGVTaXplGAcgASgFEhcKD21heENvbm5lY3RDb3VudBgIIAEoBRIdChVz",
            "YW1lSXBNYXhDb25uZWN0Q291bnQYCSABKAUSGAoQYmFja3VwTGlzdGVuUG9y",
            "dBgKIAEoBRIYChBiYWNrdXBNZW1iZXJTaXplGAsgASgFEhYKDmJhY2t1cFBy",
            "aW9yaXR5GAwgASgFEhEKCWRiVmVyc2lvbhgNIAEoBRIcChRtaW5QYXJ0aWNp",
            "cGF0aW9uUmF0ZRgOIAEoBRIXCg9zdXBwb3J0Q29uc3RhbnQYDyABKAgSFAoM",
            "bWluVGltZVJhdGlvGBAgASgBEhQKDG1heFRpbWVSYXRpbxgRIAEoARIgChhh",
            "bGxvd0NyZWF0aW9uT2ZDb250cmFjdHMYEiABKAMSGwoTYWxsb3dBZGFwdGl2",
            "ZUVuZXJneRgTIAEoAxqNBQoLTWFjaGluZUluZm8SEwoLdGhyZWFkQ291bnQY",
            "ASABKAUSGwoTZGVhZExvY2tUaHJlYWRDb3VudBgCIAEoBRIQCghjcHVDb3Vu",
            "dBgDIAEoBRITCgt0b3RhbE1lbW9yeRgEIAEoAxISCgpmcmVlTWVtb3J5GAUg",
            "ASgDEg8KB2NwdVJhdGUYBiABKAESEwoLamF2YVZlcnNpb24YByABKAkSDgoG",
            "b3NOYW1lGAggASgJEhcKD2p2bVRvdGFsTWVtb2VyeRgJIAEoAxIVCg1qdm1G",
            "cmVlTWVtb3J5GAogASgDEhYKDnByb2Nlc3NDcHVSYXRlGAsgASgBEkkKEm1l",
            "bW9yeURlc2NJbmZvTGlzdBgMIAMoCzItLnByb3RvY29sLk5vZGVJbmZvLk1h",
            "Y2hpbmVJbmZvLk1lbW9yeURlc2NJbmZvElEKFmRlYWRMb2NrVGhyZWFkSW5m",
            "b0xpc3QYDSADKAsyMS5wcm90b2NvbC5Ob2RlSW5mby5NYWNoaW5lSW5mby5E",
            "ZWFkTG9ja1RocmVhZEluZm8aYwoOTWVtb3J5RGVzY0luZm8SDAoEbmFtZRgB",
            "IAEoCRIQCghpbml0U2l6ZRgCIAEoAxIPCgd1c2VTaXplGAMgASgDEg8KB21h",
            "eFNpemUYBCABKAMSDwoHdXNlUmF0ZRgFIAEoARqPAQoSRGVhZExvY2tUaHJl",
            "YWRJbmZvEgwKBG5hbWUYASABKAkSEAoIbG9ja05hbWUYAiABKAkSEQoJbG9j",
            "a093bmVyGAMgASgJEg0KBXN0YXRlGAQgASgJEhEKCWJsb2NrVGltZRgFIAEo",
            "AxIQCgh3YWl0VGltZRgGIAEoAxISCgpzdGFja1RyYWNlGAcgASgJKjcKC0Fj",
            "Y291bnRUeXBlEgoKBk5vcm1hbBAAEg4KCkFzc2V0SXNzdWUQARIMCghDb250",
            "cmFjdBACKscDCgpSZWFzb25Db2RlEg0KCVJFUVVFU1RFRBAAEhAKDEJBRF9Q",
            "Uk9UT0NPTBACEhIKDlRPT19NQU5ZX1BFRVJTEAQSEgoORFVQTElDQVRFX1BF",
            "RVIQBRIZChVJTkNPTVBBVElCTEVfUFJPVE9DT0wQBhIRCg1OVUxMX0lERU5U",
            "SVRZEAcSEAoMUEVFUl9RVUlUSU5HEAgSFwoTVU5FWFBFQ1RFRF9JREVOVElU",
            "WRAJEhIKDkxPQ0FMX0lERU5USVRZEAoSEAoMUElOR19USU1FT1VUEAsSDwoL",
            "VVNFUl9SRUFTT04QEBIJCgVSRVNFVBAREg0KCVNZTkNfRkFJTBASEg4KCkZF",
            "VENIX0ZBSUwQExIKCgZCQURfVFgQFBINCglCQURfQkxPQ0sQFRIKCgZGT1JL",
            "RUQQFhIOCgpVTkxJTktBQkxFEBcSGAoUSU5DT01QQVRJQkxFX1ZFUlNJT04Q",
            "GBIWChJJTkNPTVBBVElCTEVfQ0hBSU4QGRIMCghUSU1FX09VVBAgEhAKDENP",
            "Tk5FQ1RfRkFJTBAhEh8KG1RPT19NQU5ZX1BFRVJTX1dJVEhfU0FNRV9JUBAi",
            "EgwKB1VOS05PV04Q/wFCRgoPb3JnLnRyb24ucHJvdG9zQghQcm90b2NvbFop",
            "Z2l0aHViLmNvbS90cm9ucHJvdG9jb2wvZ3JwYy1nYXRld2F5L2NvcmViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Protocol.DiscoverReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protocol.AccountType), typeof(global::Protocol.ReasonCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AccountId), global::Protocol.AccountId.Parser, new[]{ "Name", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Vote), global::Protocol.Vote.Parser, new[]{ "VoteAddress", "VoteCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Proposal), global::Protocol.Proposal.Parser, new[]{ "ProposalId", "ProposerAddress", "Parameters", "ExpirationTime", "CreateTime", "Approvals", "State" }, null, new[]{ typeof(global::Protocol.Proposal.Types.State) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Exchange), global::Protocol.Exchange.Parser, new[]{ "ExchangeId", "CreatorAddress", "CreateTime", "FirstTokenId", "FirstTokenBalance", "SecondTokenId", "SecondTokenBalance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChainParameters), global::Protocol.ChainParameters.Parser, new[]{ "ChainParameter" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChainParameters.Types.ChainParameter), global::Protocol.ChainParameters.Types.ChainParameter.Parser, new[]{ "Key", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Account), global::Protocol.Account.Parser, new[]{ "AccountName", "Type", "Address", "Balance", "Votes", "Asset", "AssetV2", "Frozen", "NetUsage", "AcquiredDelegatedFrozenBalanceForBandwidth", "DelegatedFrozenBalanceForBandwidth", "CreateTime", "LatestOprationTime", "Allowance", "LatestWithdrawTime", "Code", "IsWitness", "IsCommittee", "FrozenSupply", "AssetIssuedName", "AssetIssuedID", "LatestAssetOperationTime", "LatestAssetOperationTimeV2", "FreeNetUsage", "FreeAssetNetUsage", "FreeAssetNetUsageV2", "LatestConsumeTime", "LatestConsumeFreeTime", "AccountId", "AccountResource", "CodeHash", "OwnerPermission", "WitnessPermission", "ActivePermission" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Account.Types.Frozen), global::Protocol.Account.Types.Frozen.Parser, new[]{ "FrozenBalance", "ExpireTime" }, null, null, null),
            null, null, null, null, null, null, new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Account.Types.AccountResource), global::Protocol.Account.Types.AccountResource.Parser, new[]{ "EnergyUsage", "FrozenBalanceForEnergy", "LatestConsumeTimeForEnergy", "AcquiredDelegatedFrozenBalanceForEnergy", "DelegatedFrozenBalanceForEnergy", "StorageLimit", "StorageUsage", "LatestExchangeStorageTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Key), global::Protocol.Key.Parser, new[]{ "Address", "Weight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DelegatedResource), global::Protocol.DelegatedResource.Parser, new[]{ "From", "To", "FrozenBalanceForBandwidth", "FrozenBalanceForEnergy", "ExpireTimeForBandwidth", "ExpireTimeForEnergy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.authority), global::Protocol.authority.Parser, new[]{ "Account", "PermissionName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Permission), global::Protocol.Permission.Parser, new[]{ "Type", "Id", "PermissionName", "Threshold", "ParentId", "Operations", "Keys" }, null, new[]{ typeof(global::Protocol.Permission.Types.PermissionType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Witness), global::Protocol.Witness.Parser, new[]{ "Address", "VoteCount", "PubKey", "Url", "TotalProduced", "TotalMissed", "LatestBlockNum", "LatestSlotNum", "IsJobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Votes), global::Protocol.Votes.Parser, new[]{ "Address", "OldVotes", "NewVotes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TXOutput), global::Protocol.TXOutput.Parser, new[]{ "Value", "PubKeyHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TXInput), global::Protocol.TXInput.Parser, new[]{ "RawData", "Signature" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TXInput.Types.raw), global::Protocol.TXInput.Types.raw.Parser, new[]{ "TxID", "Vout", "PubKey" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TXOutputs), global::Protocol.TXOutputs.Parser, new[]{ "Outputs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ResourceReceipt), global::Protocol.ResourceReceipt.Parser, new[]{ "EnergyUsage", "EnergyFee", "OriginEnergyUsage", "EnergyUsageTotal", "NetUsage", "NetFee", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transaction), global::Protocol.Transaction.Parser, new[]{ "RawData", "Signature", "Ret" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transaction.Types.Contract), global::Protocol.Transaction.Types.Contract.Parser, new[]{ "Type", "Parameter", "Provider", "ContractName", "PermissionId" }, null, new[]{ typeof(global::Protocol.Transaction.Types.Contract.Types.ContractType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transaction.Types.Result), global::Protocol.Transaction.Types.Result.Parser, new[]{ "Fee", "Ret", "ContractRet", "AssetIssueID", "WithdrawAmount", "UnfreezeAmount", "ExchangeReceivedAmount", "ExchangeInjectAnotherAmount", "ExchangeWithdrawAnotherAmount", "ExchangeId" }, null, new[]{ typeof(global::Protocol.Transaction.Types.Result.Types.code), typeof(global::Protocol.Transaction.Types.Result.Types.contractResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transaction.Types.raw), global::Protocol.Transaction.Types.raw.Parser, new[]{ "RefBlockBytes", "RefBlockNum", "RefBlockHash", "Expiration", "Auths", "Data", "Contract", "Scripts", "Timestamp", "FeeLimit" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TransactionInfo), global::Protocol.TransactionInfo.Parser, new[]{ "Id", "Fee", "BlockNumber", "BlockTimeStamp", "ContractResult", "ContractAddress", "Receipt", "Log", "Result", "ResMessage", "AssetIssueID", "WithdrawAmount", "UnfreezeAmount", "InternalTransactions", "ExchangeReceivedAmount", "ExchangeInjectAnotherAmount", "ExchangeWithdrawAnotherAmount", "ExchangeId" }, null, new[]{ typeof(global::Protocol.TransactionInfo.Types.code) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TransactionInfo.Types.Log), global::Protocol.TransactionInfo.Types.Log.Parser, new[]{ "Address", "Topics", "Data" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transactions), global::Protocol.Transactions.Parser, new[]{ "Transactions_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TransactionSign), global::Protocol.TransactionSign.Parser, new[]{ "Transaction", "PrivateKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockHeader), global::Protocol.BlockHeader.Parser, new[]{ "RawData", "WitnessSignature" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockHeader.Types.raw), global::Protocol.BlockHeader.Types.raw.Parser, new[]{ "Timestamp", "TxTrieRoot", "ParentHash", "Number", "WitnessId", "WitnessAddress", "Version", "AccountStateRoot" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Block), global::Protocol.Block.Parser, new[]{ "Transactions", "BlockHeader" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChainInventory), global::Protocol.ChainInventory.Parser, new[]{ "Ids", "RemainNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChainInventory.Types.BlockId), global::Protocol.ChainInventory.Types.BlockId.Parser, new[]{ "Hash", "Number" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockInventory), global::Protocol.BlockInventory.Parser, new[]{ "Ids", "Type" }, null, new[]{ typeof(global::Protocol.BlockInventory.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockInventory.Types.BlockId), global::Protocol.BlockInventory.Types.BlockId.Parser, new[]{ "Hash", "Number" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Inventory), global::Protocol.Inventory.Parser, new[]{ "Type", "Ids" }, null, new[]{ typeof(global::Protocol.Inventory.Types.InventoryType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Items), global::Protocol.Items.Parser, new[]{ "Type", "Blocks", "BlockHeaders", "Transactions" }, null, new[]{ typeof(global::Protocol.Items.Types.ItemType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DynamicProperties), global::Protocol.DynamicProperties.Parser, new[]{ "LastSolidityBlockNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DisconnectMessage), global::Protocol.DisconnectMessage.Parser, new[]{ "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HelloMessage), global::Protocol.HelloMessage.Parser, new[]{ "From", "Version", "Timestamp", "GenesisBlockId", "SolidBlockId", "HeadBlockId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HelloMessage.Types.BlockId), global::Protocol.HelloMessage.Types.BlockId.Parser, new[]{ "Hash", "Number" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SmartContract), global::Protocol.SmartContract.Parser, new[]{ "OriginAddress", "ContractAddress", "Abi", "Bytecode", "CallValue", "ConsumeUserResourcePercent", "Name", "OriginEnergyLimit", "CodeHash" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SmartContract.Types.ABI), global::Protocol.SmartContract.Types.ABI.Parser, new[]{ "Entrys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SmartContract.Types.ABI.Types.Entry), global::Protocol.SmartContract.Types.ABI.Types.Entry.Parser, new[]{ "Anonymous", "Constant", "Name", "Inputs", "Outputs", "Type", "Payable", "StateMutability" }, null, new[]{ typeof(global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.EntryType), typeof(global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.StateMutabilityType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param), global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param.Parser, new[]{ "Indexed", "Name", "Type" }, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.InternalTransaction), global::Protocol.InternalTransaction.Parser, new[]{ "Hash", "CallerAddress", "TransferToAddress", "CallValueInfo", "Note", "Rejected" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.InternalTransaction.Types.CallValueInfo), global::Protocol.InternalTransaction.Types.CallValueInfo.Parser, new[]{ "CallValue", "TokenId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DelegatedResourceAccountIndex), global::Protocol.DelegatedResourceAccountIndex.Parser, new[]{ "Account", "FromAccounts", "ToAccounts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NodeInfo), global::Protocol.NodeInfo.Parser, new[]{ "BeginSyncNum", "Block", "SolidityBlock", "CurrentConnectCount", "ActiveConnectCount", "PassiveConnectCount", "TotalFlow", "PeerInfoList", "ConfigNodeInfo", "MachineInfo", "CheatWitnessInfoMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NodeInfo.Types.PeerInfo), global::Protocol.NodeInfo.Types.PeerInfo.Parser, new[]{ "LastSyncBlock", "RemainNum", "LastBlockUpdateTime", "SyncFlag", "HeadBlockTimeWeBothHave", "NeedSyncFromPeer", "NeedSyncFromUs", "Host", "Port", "NodeId", "ConnectTime", "AvgLatency", "SyncToFetchSize", "SyncToFetchSizePeekNum", "SyncBlockRequestedSize", "UnFetchSynNum", "BlockInPorcSize", "HeadBlockWeBothHave", "IsActive", "Score", "NodeCount", "InFlow", "DisconnectTimes", "LocalDisconnectReason", "RemoteDisconnectReason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NodeInfo.Types.ConfigNodeInfo), global::Protocol.NodeInfo.Types.ConfigNodeInfo.Parser, new[]{ "CodeVersion", "P2PVersion", "ListenPort", "DiscoverEnable", "ActiveNodeSize", "PassiveNodeSize", "SendNodeSize", "MaxConnectCount", "SameIpMaxConnectCount", "BackupListenPort", "BackupMemberSize", "BackupPriority", "DbVersion", "MinParticipationRate", "SupportConstant", "MinTimeRatio", "MaxTimeRatio", "AllowCreationOfContracts", "AllowAdaptiveEnergy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NodeInfo.Types.MachineInfo), global::Protocol.NodeInfo.Types.MachineInfo.Parser, new[]{ "ThreadCount", "DeadLockThreadCount", "CpuCount", "TotalMemory", "FreeMemory", "CpuRate", "JavaVersion", "OsName", "JvmTotalMemoery", "JvmFreeMemory", "ProcessCpuRate", "MemoryDescInfoList", "DeadLockThreadInfoList" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NodeInfo.Types.MachineInfo.Types.MemoryDescInfo), global::Protocol.NodeInfo.Types.MachineInfo.Types.MemoryDescInfo.Parser, new[]{ "Name", "InitSize", "UseSize", "MaxSize", "UseRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NodeInfo.Types.MachineInfo.Types.DeadLockThreadInfo), global::Protocol.NodeInfo.Types.MachineInfo.Types.DeadLockThreadInfo.Parser, new[]{ "Name", "LockName", "LockOwner", "State", "BlockTime", "WaitTime", "StackTrace" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Enums
  public enum AccountType {
    [pbr::OriginalName("Normal")] Normal = 0,
    [pbr::OriginalName("AssetIssue")] AssetIssue = 1,
    [pbr::OriginalName("Contract")] Contract = 2,
  }

  public enum ReasonCode {
    [pbr::OriginalName("REQUESTED")] Requested = 0,
    [pbr::OriginalName("BAD_PROTOCOL")] BadProtocol = 2,
    [pbr::OriginalName("TOO_MANY_PEERS")] TooManyPeers = 4,
    [pbr::OriginalName("DUPLICATE_PEER")] DuplicatePeer = 5,
    [pbr::OriginalName("INCOMPATIBLE_PROTOCOL")] IncompatibleProtocol = 6,
    [pbr::OriginalName("NULL_IDENTITY")] NullIdentity = 7,
    [pbr::OriginalName("PEER_QUITING")] PeerQuiting = 8,
    [pbr::OriginalName("UNEXPECTED_IDENTITY")] UnexpectedIdentity = 9,
    [pbr::OriginalName("LOCAL_IDENTITY")] LocalIdentity = 10,
    [pbr::OriginalName("PING_TIMEOUT")] PingTimeout = 11,
    [pbr::OriginalName("USER_REASON")] UserReason = 16,
    [pbr::OriginalName("RESET")] Reset = 17,
    [pbr::OriginalName("SYNC_FAIL")] SyncFail = 18,
    [pbr::OriginalName("FETCH_FAIL")] FetchFail = 19,
    [pbr::OriginalName("BAD_TX")] BadTx = 20,
    [pbr::OriginalName("BAD_BLOCK")] BadBlock = 21,
    [pbr::OriginalName("FORKED")] Forked = 22,
    [pbr::OriginalName("UNLINKABLE")] Unlinkable = 23,
    [pbr::OriginalName("INCOMPATIBLE_VERSION")] IncompatibleVersion = 24,
    [pbr::OriginalName("INCOMPATIBLE_CHAIN")] IncompatibleChain = 25,
    [pbr::OriginalName("TIME_OUT")] TimeOut = 32,
    [pbr::OriginalName("CONNECT_FAIL")] ConnectFail = 33,
    [pbr::OriginalName("TOO_MANY_PEERS_WITH_SAME_IP")] TooManyPeersWithSameIp = 34,
    [pbr::OriginalName("RECENTLY_DISCONNECTED")] RecentlyDisconnected = 35,
    [pbr::OriginalName("UNKNOWN")] Unknown = 255,
  }

  #endregion

  #region Messages
  /// <summary>
  /// AccountId, (name, address) use name, (null, address) use address, (name, null) use name,
  /// </summary>
  public sealed partial class AccountId : pb::IMessage<AccountId> {
    private static readonly pb::MessageParser<AccountId> _parser = new pb::MessageParser<AccountId>(() => new AccountId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountId(AccountId other) : this() {
      name_ = other.name_;
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountId Clone() {
      return new AccountId(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountId other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 18: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// vote message
  /// </summary>
  public sealed partial class Vote : pb::IMessage<Vote> {
    private static readonly pb::MessageParser<Vote> _parser = new pb::MessageParser<Vote>(() => new Vote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote(Vote other) : this() {
      voteAddress_ = other.voteAddress_;
      voteCount_ = other.voteCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote Clone() {
      return new Vote(this);
    }

    /// <summary>Field number for the "vote_address" field.</summary>
    public const int VoteAddressFieldNumber = 1;
    private pb::ByteString voteAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// the super rep address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VoteAddress {
      get { return voteAddress_; }
      set {
        voteAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vote_count" field.</summary>
    public const int VoteCountFieldNumber = 2;
    private long voteCount_;
    /// <summary>
    /// the vote num to this super rep.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VoteCount {
      get { return voteCount_; }
      set {
        voteCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VoteAddress != other.VoteAddress) return false;
      if (VoteCount != other.VoteCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VoteAddress.Length != 0) hash ^= VoteAddress.GetHashCode();
      if (VoteCount != 0L) hash ^= VoteCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(VoteAddress);
      }
      if (VoteCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VoteCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VoteAddress);
      }
      if (VoteCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VoteCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vote other) {
      if (other == null) {
        return;
      }
      if (other.VoteAddress.Length != 0) {
        VoteAddress = other.VoteAddress;
      }
      if (other.VoteCount != 0L) {
        VoteCount = other.VoteCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VoteAddress = input.ReadBytes();
            break;
          }
          case 16: {
            VoteCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Proposal
  /// </summary>
  public sealed partial class Proposal : pb::IMessage<Proposal> {
    private static readonly pb::MessageParser<Proposal> _parser = new pb::MessageParser<Proposal>(() => new Proposal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Proposal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proposal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proposal(Proposal other) : this() {
      proposalId_ = other.proposalId_;
      proposerAddress_ = other.proposerAddress_;
      parameters_ = other.parameters_.Clone();
      expirationTime_ = other.expirationTime_;
      createTime_ = other.createTime_;
      approvals_ = other.approvals_.Clone();
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Proposal Clone() {
      return new Proposal(this);
    }

    /// <summary>Field number for the "proposal_id" field.</summary>
    public const int ProposalIdFieldNumber = 1;
    private long proposalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProposalId {
      get { return proposalId_; }
      set {
        proposalId_ = value;
      }
    }

    /// <summary>Field number for the "proposer_address" field.</summary>
    public const int ProposerAddressFieldNumber = 2;
    private pb::ByteString proposerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProposerAddress {
      get { return proposerAddress_; }
      set {
        proposerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 3;
    private static readonly pbc::MapField<long, long>.Codec _map_parameters_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForInt64(16), 26);
    private readonly pbc::MapField<long, long> parameters_ = new pbc::MapField<long, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, long> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 4;
    private long expirationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private long createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "approvals" field.</summary>
    public const int ApprovalsFieldNumber = 6;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_approvals_codec
        = pb::FieldCodec.ForBytes(50);
    private readonly pbc::RepeatedField<pb::ByteString> approvals_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Approvals {
      get { return approvals_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 7;
    private global::Protocol.Proposal.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Proposal.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Proposal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Proposal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProposalId != other.ProposalId) return false;
      if (ProposerAddress != other.ProposerAddress) return false;
      if (!Parameters.Equals(other.Parameters)) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      if (CreateTime != other.CreateTime) return false;
      if(!approvals_.Equals(other.approvals_)) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProposalId != 0L) hash ^= ProposalId.GetHashCode();
      if (ProposerAddress.Length != 0) hash ^= ProposerAddress.GetHashCode();
      hash ^= Parameters.GetHashCode();
      if (ExpirationTime != 0L) hash ^= ExpirationTime.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      hash ^= approvals_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProposalId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ProposalId);
      }
      if (ProposerAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ProposerAddress);
      }
      parameters_.WriteTo(output, _map_parameters_codec);
      if (ExpirationTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpirationTime);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreateTime);
      }
      approvals_.WriteTo(output, _repeated_approvals_codec);
      if (State != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProposalId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProposalId);
      }
      if (ProposerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProposerAddress);
      }
      size += parameters_.CalculateSize(_map_parameters_codec);
      if (ExpirationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTime);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      size += approvals_.CalculateSize(_repeated_approvals_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Proposal other) {
      if (other == null) {
        return;
      }
      if (other.ProposalId != 0L) {
        ProposalId = other.ProposalId;
      }
      if (other.ProposerAddress.Length != 0) {
        ProposerAddress = other.ProposerAddress;
      }
      parameters_.Add(other.parameters_);
      if (other.ExpirationTime != 0L) {
        ExpirationTime = other.ExpirationTime;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      approvals_.Add(other.approvals_);
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProposalId = input.ReadInt64();
            break;
          }
          case 18: {
            ProposerAddress = input.ReadBytes();
            break;
          }
          case 26: {
            parameters_.AddEntriesFrom(input, _map_parameters_codec);
            break;
          }
          case 32: {
            ExpirationTime = input.ReadInt64();
            break;
          }
          case 40: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 50: {
            approvals_.AddEntriesFrom(input, _repeated_approvals_codec);
            break;
          }
          case 56: {
            State = (global::Protocol.Proposal.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Proposal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("PENDING")] Pending = 0,
        [pbr::OriginalName("DISAPPROVED")] Disapproved = 1,
        [pbr::OriginalName("APPROVED")] Approved = 2,
        [pbr::OriginalName("CANCELED")] Canceled = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Exchange
  /// </summary>
  public sealed partial class Exchange : pb::IMessage<Exchange> {
    private static readonly pb::MessageParser<Exchange> _parser = new pb::MessageParser<Exchange>(() => new Exchange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exchange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange(Exchange other) : this() {
      exchangeId_ = other.exchangeId_;
      creatorAddress_ = other.creatorAddress_;
      createTime_ = other.createTime_;
      firstTokenId_ = other.firstTokenId_;
      firstTokenBalance_ = other.firstTokenBalance_;
      secondTokenId_ = other.secondTokenId_;
      secondTokenBalance_ = other.secondTokenBalance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exchange Clone() {
      return new Exchange(this);
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 1;
    private long exchangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = value;
      }
    }

    /// <summary>Field number for the "creator_address" field.</summary>
    public const int CreatorAddressFieldNumber = 2;
    private pb::ByteString creatorAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CreatorAddress {
      get { return creatorAddress_; }
      set {
        creatorAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private long createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "first_token_id" field.</summary>
    public const int FirstTokenIdFieldNumber = 6;
    private pb::ByteString firstTokenId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FirstTokenId {
      get { return firstTokenId_; }
      set {
        firstTokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_token_balance" field.</summary>
    public const int FirstTokenBalanceFieldNumber = 7;
    private long firstTokenBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstTokenBalance {
      get { return firstTokenBalance_; }
      set {
        firstTokenBalance_ = value;
      }
    }

    /// <summary>Field number for the "second_token_id" field.</summary>
    public const int SecondTokenIdFieldNumber = 8;
    private pb::ByteString secondTokenId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondTokenId {
      get { return secondTokenId_; }
      set {
        secondTokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_token_balance" field.</summary>
    public const int SecondTokenBalanceFieldNumber = 9;
    private long secondTokenBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondTokenBalance {
      get { return secondTokenBalance_; }
      set {
        secondTokenBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exchange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exchange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExchangeId != other.ExchangeId) return false;
      if (CreatorAddress != other.CreatorAddress) return false;
      if (CreateTime != other.CreateTime) return false;
      if (FirstTokenId != other.FirstTokenId) return false;
      if (FirstTokenBalance != other.FirstTokenBalance) return false;
      if (SecondTokenId != other.SecondTokenId) return false;
      if (SecondTokenBalance != other.SecondTokenBalance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExchangeId != 0L) hash ^= ExchangeId.GetHashCode();
      if (CreatorAddress.Length != 0) hash ^= CreatorAddress.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (FirstTokenId.Length != 0) hash ^= FirstTokenId.GetHashCode();
      if (FirstTokenBalance != 0L) hash ^= FirstTokenBalance.GetHashCode();
      if (SecondTokenId.Length != 0) hash ^= SecondTokenId.GetHashCode();
      if (SecondTokenBalance != 0L) hash ^= SecondTokenBalance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExchangeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ExchangeId);
      }
      if (CreatorAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CreatorAddress);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreateTime);
      }
      if (FirstTokenId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(FirstTokenId);
      }
      if (FirstTokenBalance != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FirstTokenBalance);
      }
      if (SecondTokenId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(SecondTokenId);
      }
      if (SecondTokenBalance != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(SecondTokenBalance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExchangeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExchangeId);
      }
      if (CreatorAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CreatorAddress);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (FirstTokenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FirstTokenId);
      }
      if (FirstTokenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstTokenBalance);
      }
      if (SecondTokenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondTokenId);
      }
      if (SecondTokenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondTokenBalance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exchange other) {
      if (other == null) {
        return;
      }
      if (other.ExchangeId != 0L) {
        ExchangeId = other.ExchangeId;
      }
      if (other.CreatorAddress.Length != 0) {
        CreatorAddress = other.CreatorAddress;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.FirstTokenId.Length != 0) {
        FirstTokenId = other.FirstTokenId;
      }
      if (other.FirstTokenBalance != 0L) {
        FirstTokenBalance = other.FirstTokenBalance;
      }
      if (other.SecondTokenId.Length != 0) {
        SecondTokenId = other.SecondTokenId;
      }
      if (other.SecondTokenBalance != 0L) {
        SecondTokenBalance = other.SecondTokenBalance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ExchangeId = input.ReadInt64();
            break;
          }
          case 18: {
            CreatorAddress = input.ReadBytes();
            break;
          }
          case 24: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 50: {
            FirstTokenId = input.ReadBytes();
            break;
          }
          case 56: {
            FirstTokenBalance = input.ReadInt64();
            break;
          }
          case 66: {
            SecondTokenId = input.ReadBytes();
            break;
          }
          case 72: {
            SecondTokenBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChainParameters : pb::IMessage<ChainParameters> {
    private static readonly pb::MessageParser<ChainParameters> _parser = new pb::MessageParser<ChainParameters>(() => new ChainParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChainParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainParameters(ChainParameters other) : this() {
      chainParameter_ = other.chainParameter_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainParameters Clone() {
      return new ChainParameters(this);
    }

    /// <summary>Field number for the "chainParameter" field.</summary>
    public const int ChainParameterFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ChainParameters.Types.ChainParameter> _repeated_chainParameter_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ChainParameters.Types.ChainParameter.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ChainParameters.Types.ChainParameter> chainParameter_ = new pbc::RepeatedField<global::Protocol.ChainParameters.Types.ChainParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ChainParameters.Types.ChainParameter> ChainParameter {
      get { return chainParameter_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChainParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChainParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chainParameter_.Equals(other.chainParameter_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chainParameter_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chainParameter_.WriteTo(output, _repeated_chainParameter_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chainParameter_.CalculateSize(_repeated_chainParameter_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChainParameters other) {
      if (other == null) {
        return;
      }
      chainParameter_.Add(other.chainParameter_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chainParameter_.AddEntriesFrom(input, _repeated_chainParameter_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChainParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ChainParameter : pb::IMessage<ChainParameter> {
        private static readonly pb::MessageParser<ChainParameter> _parser = new pb::MessageParser<ChainParameter>(() => new ChainParameter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChainParameter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.ChainParameters.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChainParameter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChainParameter(ChainParameter other) : this() {
          key_ = other.key_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChainParameter Clone() {
          return new ChainParameter(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private long value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChainParameter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChainParameter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (Value != 0L) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (Value != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (Value != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChainParameter other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.Value != 0L) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 16: {
                Value = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Account 
  /// </summary>
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      accountName_ = other.accountName_;
      type_ = other.type_;
      address_ = other.address_;
      balance_ = other.balance_;
      votes_ = other.votes_.Clone();
      asset_ = other.asset_.Clone();
      assetV2_ = other.assetV2_.Clone();
      frozen_ = other.frozen_.Clone();
      netUsage_ = other.netUsage_;
      acquiredDelegatedFrozenBalanceForBandwidth_ = other.acquiredDelegatedFrozenBalanceForBandwidth_;
      delegatedFrozenBalanceForBandwidth_ = other.delegatedFrozenBalanceForBandwidth_;
      createTime_ = other.createTime_;
      latestOprationTime_ = other.latestOprationTime_;
      allowance_ = other.allowance_;
      latestWithdrawTime_ = other.latestWithdrawTime_;
      code_ = other.code_;
      isWitness_ = other.isWitness_;
      isCommittee_ = other.isCommittee_;
      frozenSupply_ = other.frozenSupply_.Clone();
      assetIssuedName_ = other.assetIssuedName_;
      assetIssuedID_ = other.assetIssuedID_;
      latestAssetOperationTime_ = other.latestAssetOperationTime_.Clone();
      latestAssetOperationTimeV2_ = other.latestAssetOperationTimeV2_.Clone();
      freeNetUsage_ = other.freeNetUsage_;
      freeAssetNetUsage_ = other.freeAssetNetUsage_.Clone();
      freeAssetNetUsageV2_ = other.freeAssetNetUsageV2_.Clone();
      latestConsumeTime_ = other.latestConsumeTime_;
      latestConsumeFreeTime_ = other.latestConsumeFreeTime_;
      accountId_ = other.accountId_;
      accountResource_ = other.accountResource_ != null ? other.accountResource_.Clone() : null;
      codeHash_ = other.codeHash_;
      ownerPermission_ = other.ownerPermission_ != null ? other.ownerPermission_.Clone() : null;
      witnessPermission_ = other.witnessPermission_ != null ? other.witnessPermission_.Clone() : null;
      activePermission_ = other.activePermission_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "account_name" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private pb::ByteString accountName_ = pb::ByteString.Empty;
    /// <summary>
    /// account nick name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Protocol.AccountType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AccountType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private pb::ByteString address_ = pb::ByteString.Empty;
    /// <summary>
    /// the create address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 4;
    private long balance_;
    /// <summary>
    /// the trx balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.Vote> _repeated_votes_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.Vote.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Vote> votes_ = new pbc::RepeatedField<global::Protocol.Vote>();
    /// <summary>
    /// the votes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Vote> Votes {
      get { return votes_; }
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 6;
    private static readonly pbc::MapField<string, long>.Codec _map_asset_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 50);
    private readonly pbc::MapField<string, long> asset_ = new pbc::MapField<string, long>();
    /// <summary>
    /// the other asset owned by this account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Asset {
      get { return asset_; }
    }

    /// <summary>Field number for the "assetV2" field.</summary>
    public const int AssetV2FieldNumber = 56;
    private static readonly pbc::MapField<string, long>.Codec _map_assetV2_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 450);
    private readonly pbc::MapField<string, long> assetV2_ = new pbc::MapField<string, long>();
    /// <summary>
    /// the other asset owned by this account，key is assetId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AssetV2 {
      get { return assetV2_; }
    }

    /// <summary>Field number for the "frozen" field.</summary>
    public const int FrozenFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protocol.Account.Types.Frozen> _repeated_frozen_codec
        = pb::FieldCodec.ForMessage(58, global::Protocol.Account.Types.Frozen.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Account.Types.Frozen> frozen_ = new pbc::RepeatedField<global::Protocol.Account.Types.Frozen>();
    /// <summary>
    /// the frozen balance for bandwidth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Account.Types.Frozen> Frozen {
      get { return frozen_; }
    }

    /// <summary>Field number for the "net_usage" field.</summary>
    public const int NetUsageFieldNumber = 8;
    private long netUsage_;
    /// <summary>
    /// bandwidth, get from frozen
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NetUsage {
      get { return netUsage_; }
      set {
        netUsage_ = value;
      }
    }

    /// <summary>Field number for the "acquired_delegated_frozen_balance_for_bandwidth" field.</summary>
    public const int AcquiredDelegatedFrozenBalanceForBandwidthFieldNumber = 41;
    private long acquiredDelegatedFrozenBalanceForBandwidth_;
    /// <summary>
    ///Frozen balance provided by other accounts to this account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AcquiredDelegatedFrozenBalanceForBandwidth {
      get { return acquiredDelegatedFrozenBalanceForBandwidth_; }
      set {
        acquiredDelegatedFrozenBalanceForBandwidth_ = value;
      }
    }

    /// <summary>Field number for the "delegated_frozen_balance_for_bandwidth" field.</summary>
    public const int DelegatedFrozenBalanceForBandwidthFieldNumber = 42;
    private long delegatedFrozenBalanceForBandwidth_;
    /// <summary>
    ///Freeze and provide balances to other accounts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DelegatedFrozenBalanceForBandwidth {
      get { return delegatedFrozenBalanceForBandwidth_; }
      set {
        delegatedFrozenBalanceForBandwidth_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private long createTime_;
    /// <summary>
    /// this account create time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "latest_opration_time" field.</summary>
    public const int LatestOprationTimeFieldNumber = 10;
    private long latestOprationTime_;
    /// <summary>
    /// this last operation time, including transfer, voting and so on. //FIXME fix grammar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestOprationTime {
      get { return latestOprationTime_; }
      set {
        latestOprationTime_ = value;
      }
    }

    /// <summary>Field number for the "allowance" field.</summary>
    public const int AllowanceFieldNumber = 11;
    private long allowance_;
    /// <summary>
    /// witness block producing allowance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Allowance {
      get { return allowance_; }
      set {
        allowance_ = value;
      }
    }

    /// <summary>Field number for the "latest_withdraw_time" field.</summary>
    public const int LatestWithdrawTimeFieldNumber = 12;
    private long latestWithdrawTime_;
    /// <summary>
    /// last withdraw time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestWithdrawTime {
      get { return latestWithdrawTime_; }
      set {
        latestWithdrawTime_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 13;
    private pb::ByteString code_ = pb::ByteString.Empty;
    /// <summary>
    /// not used so far
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_witness" field.</summary>
    public const int IsWitnessFieldNumber = 14;
    private bool isWitness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWitness {
      get { return isWitness_; }
      set {
        isWitness_ = value;
      }
    }

    /// <summary>Field number for the "is_committee" field.</summary>
    public const int IsCommitteeFieldNumber = 15;
    private bool isCommittee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCommittee {
      get { return isCommittee_; }
      set {
        isCommittee_ = value;
      }
    }

    /// <summary>Field number for the "frozen_supply" field.</summary>
    public const int FrozenSupplyFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Protocol.Account.Types.Frozen> _repeated_frozenSupply_codec
        = pb::FieldCodec.ForMessage(130, global::Protocol.Account.Types.Frozen.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Account.Types.Frozen> frozenSupply_ = new pbc::RepeatedField<global::Protocol.Account.Types.Frozen>();
    /// <summary>
    /// frozen asset(for asset issuer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Account.Types.Frozen> FrozenSupply {
      get { return frozenSupply_; }
    }

    /// <summary>Field number for the "asset_issued_name" field.</summary>
    public const int AssetIssuedNameFieldNumber = 17;
    private pb::ByteString assetIssuedName_ = pb::ByteString.Empty;
    /// <summary>
    /// asset_issued_name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AssetIssuedName {
      get { return assetIssuedName_; }
      set {
        assetIssuedName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_issued_ID" field.</summary>
    public const int AssetIssuedIDFieldNumber = 57;
    private pb::ByteString assetIssuedID_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AssetIssuedID {
      get { return assetIssuedID_; }
      set {
        assetIssuedID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latest_asset_operation_time" field.</summary>
    public const int LatestAssetOperationTimeFieldNumber = 18;
    private static readonly pbc::MapField<string, long>.Codec _map_latestAssetOperationTime_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 146);
    private readonly pbc::MapField<string, long> latestAssetOperationTime_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> LatestAssetOperationTime {
      get { return latestAssetOperationTime_; }
    }

    /// <summary>Field number for the "latest_asset_operation_timeV2" field.</summary>
    public const int LatestAssetOperationTimeV2FieldNumber = 58;
    private static readonly pbc::MapField<string, long>.Codec _map_latestAssetOperationTimeV2_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 466);
    private readonly pbc::MapField<string, long> latestAssetOperationTimeV2_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> LatestAssetOperationTimeV2 {
      get { return latestAssetOperationTimeV2_; }
    }

    /// <summary>Field number for the "free_net_usage" field.</summary>
    public const int FreeNetUsageFieldNumber = 19;
    private long freeNetUsage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FreeNetUsage {
      get { return freeNetUsage_; }
      set {
        freeNetUsage_ = value;
      }
    }

    /// <summary>Field number for the "free_asset_net_usage" field.</summary>
    public const int FreeAssetNetUsageFieldNumber = 20;
    private static readonly pbc::MapField<string, long>.Codec _map_freeAssetNetUsage_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 162);
    private readonly pbc::MapField<string, long> freeAssetNetUsage_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> FreeAssetNetUsage {
      get { return freeAssetNetUsage_; }
    }

    /// <summary>Field number for the "free_asset_net_usageV2" field.</summary>
    public const int FreeAssetNetUsageV2FieldNumber = 59;
    private static readonly pbc::MapField<string, long>.Codec _map_freeAssetNetUsageV2_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 474);
    private readonly pbc::MapField<string, long> freeAssetNetUsageV2_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> FreeAssetNetUsageV2 {
      get { return freeAssetNetUsageV2_; }
    }

    /// <summary>Field number for the "latest_consume_time" field.</summary>
    public const int LatestConsumeTimeFieldNumber = 21;
    private long latestConsumeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestConsumeTime {
      get { return latestConsumeTime_; }
      set {
        latestConsumeTime_ = value;
      }
    }

    /// <summary>Field number for the "latest_consume_free_time" field.</summary>
    public const int LatestConsumeFreeTimeFieldNumber = 22;
    private long latestConsumeFreeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestConsumeFreeTime {
      get { return latestConsumeFreeTime_; }
      set {
        latestConsumeFreeTime_ = value;
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 23;
    private pb::ByteString accountId_ = pb::ByteString.Empty;
    /// <summary>
    /// the identity of this account, case insensitive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_resource" field.</summary>
    public const int AccountResourceFieldNumber = 26;
    private global::Protocol.Account.Types.AccountResource accountResource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Account.Types.AccountResource AccountResource {
      get { return accountResource_; }
      set {
        accountResource_ = value;
      }
    }

    /// <summary>Field number for the "codeHash" field.</summary>
    public const int CodeHashFieldNumber = 30;
    private pb::ByteString codeHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CodeHash {
      get { return codeHash_; }
      set {
        codeHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_permission" field.</summary>
    public const int OwnerPermissionFieldNumber = 31;
    private global::Protocol.Permission ownerPermission_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Permission OwnerPermission {
      get { return ownerPermission_; }
      set {
        ownerPermission_ = value;
      }
    }

    /// <summary>Field number for the "witness_permission" field.</summary>
    public const int WitnessPermissionFieldNumber = 32;
    private global::Protocol.Permission witnessPermission_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Permission WitnessPermission {
      get { return witnessPermission_; }
      set {
        witnessPermission_ = value;
      }
    }

    /// <summary>Field number for the "active_permission" field.</summary>
    public const int ActivePermissionFieldNumber = 33;
    private static readonly pb::FieldCodec<global::Protocol.Permission> _repeated_activePermission_codec
        = pb::FieldCodec.ForMessage(266, global::Protocol.Permission.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Permission> activePermission_ = new pbc::RepeatedField<global::Protocol.Permission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Permission> ActivePermission {
      get { return activePermission_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      if (Type != other.Type) return false;
      if (Address != other.Address) return false;
      if (Balance != other.Balance) return false;
      if(!votes_.Equals(other.votes_)) return false;
      if (!Asset.Equals(other.Asset)) return false;
      if (!AssetV2.Equals(other.AssetV2)) return false;
      if(!frozen_.Equals(other.frozen_)) return false;
      if (NetUsage != other.NetUsage) return false;
      if (AcquiredDelegatedFrozenBalanceForBandwidth != other.AcquiredDelegatedFrozenBalanceForBandwidth) return false;
      if (DelegatedFrozenBalanceForBandwidth != other.DelegatedFrozenBalanceForBandwidth) return false;
      if (CreateTime != other.CreateTime) return false;
      if (LatestOprationTime != other.LatestOprationTime) return false;
      if (Allowance != other.Allowance) return false;
      if (LatestWithdrawTime != other.LatestWithdrawTime) return false;
      if (Code != other.Code) return false;
      if (IsWitness != other.IsWitness) return false;
      if (IsCommittee != other.IsCommittee) return false;
      if(!frozenSupply_.Equals(other.frozenSupply_)) return false;
      if (AssetIssuedName != other.AssetIssuedName) return false;
      if (AssetIssuedID != other.AssetIssuedID) return false;
      if (!LatestAssetOperationTime.Equals(other.LatestAssetOperationTime)) return false;
      if (!LatestAssetOperationTimeV2.Equals(other.LatestAssetOperationTimeV2)) return false;
      if (FreeNetUsage != other.FreeNetUsage) return false;
      if (!FreeAssetNetUsage.Equals(other.FreeAssetNetUsage)) return false;
      if (!FreeAssetNetUsageV2.Equals(other.FreeAssetNetUsageV2)) return false;
      if (LatestConsumeTime != other.LatestConsumeTime) return false;
      if (LatestConsumeFreeTime != other.LatestConsumeFreeTime) return false;
      if (AccountId != other.AccountId) return false;
      if (!object.Equals(AccountResource, other.AccountResource)) return false;
      if (CodeHash != other.CodeHash) return false;
      if (!object.Equals(OwnerPermission, other.OwnerPermission)) return false;
      if (!object.Equals(WitnessPermission, other.WitnessPermission)) return false;
      if(!activePermission_.Equals(other.activePermission_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      hash ^= votes_.GetHashCode();
      hash ^= Asset.GetHashCode();
      hash ^= AssetV2.GetHashCode();
      hash ^= frozen_.GetHashCode();
      if (NetUsage != 0L) hash ^= NetUsage.GetHashCode();
      if (AcquiredDelegatedFrozenBalanceForBandwidth != 0L) hash ^= AcquiredDelegatedFrozenBalanceForBandwidth.GetHashCode();
      if (DelegatedFrozenBalanceForBandwidth != 0L) hash ^= DelegatedFrozenBalanceForBandwidth.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (LatestOprationTime != 0L) hash ^= LatestOprationTime.GetHashCode();
      if (Allowance != 0L) hash ^= Allowance.GetHashCode();
      if (LatestWithdrawTime != 0L) hash ^= LatestWithdrawTime.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (IsWitness != false) hash ^= IsWitness.GetHashCode();
      if (IsCommittee != false) hash ^= IsCommittee.GetHashCode();
      hash ^= frozenSupply_.GetHashCode();
      if (AssetIssuedName.Length != 0) hash ^= AssetIssuedName.GetHashCode();
      if (AssetIssuedID.Length != 0) hash ^= AssetIssuedID.GetHashCode();
      hash ^= LatestAssetOperationTime.GetHashCode();
      hash ^= LatestAssetOperationTimeV2.GetHashCode();
      if (FreeNetUsage != 0L) hash ^= FreeNetUsage.GetHashCode();
      hash ^= FreeAssetNetUsage.GetHashCode();
      hash ^= FreeAssetNetUsageV2.GetHashCode();
      if (LatestConsumeTime != 0L) hash ^= LatestConsumeTime.GetHashCode();
      if (LatestConsumeFreeTime != 0L) hash ^= LatestConsumeFreeTime.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (accountResource_ != null) hash ^= AccountResource.GetHashCode();
      if (CodeHash.Length != 0) hash ^= CodeHash.GetHashCode();
      if (ownerPermission_ != null) hash ^= OwnerPermission.GetHashCode();
      if (witnessPermission_ != null) hash ^= WitnessPermission.GetHashCode();
      hash ^= activePermission_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AccountName);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Address);
      }
      if (Balance != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Balance);
      }
      votes_.WriteTo(output, _repeated_votes_codec);
      asset_.WriteTo(output, _map_asset_codec);
      frozen_.WriteTo(output, _repeated_frozen_codec);
      if (NetUsage != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(NetUsage);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CreateTime);
      }
      if (LatestOprationTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LatestOprationTime);
      }
      if (Allowance != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Allowance);
      }
      if (LatestWithdrawTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LatestWithdrawTime);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(Code);
      }
      if (IsWitness != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsWitness);
      }
      if (IsCommittee != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsCommittee);
      }
      frozenSupply_.WriteTo(output, _repeated_frozenSupply_codec);
      if (AssetIssuedName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(AssetIssuedName);
      }
      latestAssetOperationTime_.WriteTo(output, _map_latestAssetOperationTime_codec);
      if (FreeNetUsage != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(FreeNetUsage);
      }
      freeAssetNetUsage_.WriteTo(output, _map_freeAssetNetUsage_codec);
      if (LatestConsumeTime != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(LatestConsumeTime);
      }
      if (LatestConsumeFreeTime != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(LatestConsumeFreeTime);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteBytes(AccountId);
      }
      if (accountResource_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(AccountResource);
      }
      if (CodeHash.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteBytes(CodeHash);
      }
      if (ownerPermission_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(OwnerPermission);
      }
      if (witnessPermission_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(WitnessPermission);
      }
      activePermission_.WriteTo(output, _repeated_activePermission_codec);
      if (AcquiredDelegatedFrozenBalanceForBandwidth != 0L) {
        output.WriteRawTag(200, 2);
        output.WriteInt64(AcquiredDelegatedFrozenBalanceForBandwidth);
      }
      if (DelegatedFrozenBalanceForBandwidth != 0L) {
        output.WriteRawTag(208, 2);
        output.WriteInt64(DelegatedFrozenBalanceForBandwidth);
      }
      assetV2_.WriteTo(output, _map_assetV2_codec);
      if (AssetIssuedID.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteBytes(AssetIssuedID);
      }
      latestAssetOperationTimeV2_.WriteTo(output, _map_latestAssetOperationTimeV2_codec);
      freeAssetNetUsageV2_.WriteTo(output, _map_freeAssetNetUsageV2_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AccountName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      size += votes_.CalculateSize(_repeated_votes_codec);
      size += asset_.CalculateSize(_map_asset_codec);
      size += assetV2_.CalculateSize(_map_assetV2_codec);
      size += frozen_.CalculateSize(_repeated_frozen_codec);
      if (NetUsage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NetUsage);
      }
      if (AcquiredDelegatedFrozenBalanceForBandwidth != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AcquiredDelegatedFrozenBalanceForBandwidth);
      }
      if (DelegatedFrozenBalanceForBandwidth != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DelegatedFrozenBalanceForBandwidth);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (LatestOprationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestOprationTime);
      }
      if (Allowance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Allowance);
      }
      if (LatestWithdrawTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestWithdrawTime);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Code);
      }
      if (IsWitness != false) {
        size += 1 + 1;
      }
      if (IsCommittee != false) {
        size += 1 + 1;
      }
      size += frozenSupply_.CalculateSize(_repeated_frozenSupply_codec);
      if (AssetIssuedName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AssetIssuedName);
      }
      if (AssetIssuedID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AssetIssuedID);
      }
      size += latestAssetOperationTime_.CalculateSize(_map_latestAssetOperationTime_codec);
      size += latestAssetOperationTimeV2_.CalculateSize(_map_latestAssetOperationTimeV2_codec);
      if (FreeNetUsage != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FreeNetUsage);
      }
      size += freeAssetNetUsage_.CalculateSize(_map_freeAssetNetUsage_codec);
      size += freeAssetNetUsageV2_.CalculateSize(_map_freeAssetNetUsageV2_codec);
      if (LatestConsumeTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LatestConsumeTime);
      }
      if (LatestConsumeFreeTime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LatestConsumeFreeTime);
      }
      if (AccountId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AccountId);
      }
      if (accountResource_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccountResource);
      }
      if (CodeHash.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(CodeHash);
      }
      if (ownerPermission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OwnerPermission);
      }
      if (witnessPermission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WitnessPermission);
      }
      size += activePermission_.CalculateSize(_repeated_activePermission_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      votes_.Add(other.votes_);
      asset_.Add(other.asset_);
      assetV2_.Add(other.assetV2_);
      frozen_.Add(other.frozen_);
      if (other.NetUsage != 0L) {
        NetUsage = other.NetUsage;
      }
      if (other.AcquiredDelegatedFrozenBalanceForBandwidth != 0L) {
        AcquiredDelegatedFrozenBalanceForBandwidth = other.AcquiredDelegatedFrozenBalanceForBandwidth;
      }
      if (other.DelegatedFrozenBalanceForBandwidth != 0L) {
        DelegatedFrozenBalanceForBandwidth = other.DelegatedFrozenBalanceForBandwidth;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.LatestOprationTime != 0L) {
        LatestOprationTime = other.LatestOprationTime;
      }
      if (other.Allowance != 0L) {
        Allowance = other.Allowance;
      }
      if (other.LatestWithdrawTime != 0L) {
        LatestWithdrawTime = other.LatestWithdrawTime;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.IsWitness != false) {
        IsWitness = other.IsWitness;
      }
      if (other.IsCommittee != false) {
        IsCommittee = other.IsCommittee;
      }
      frozenSupply_.Add(other.frozenSupply_);
      if (other.AssetIssuedName.Length != 0) {
        AssetIssuedName = other.AssetIssuedName;
      }
      if (other.AssetIssuedID.Length != 0) {
        AssetIssuedID = other.AssetIssuedID;
      }
      latestAssetOperationTime_.Add(other.latestAssetOperationTime_);
      latestAssetOperationTimeV2_.Add(other.latestAssetOperationTimeV2_);
      if (other.FreeNetUsage != 0L) {
        FreeNetUsage = other.FreeNetUsage;
      }
      freeAssetNetUsage_.Add(other.freeAssetNetUsage_);
      freeAssetNetUsageV2_.Add(other.freeAssetNetUsageV2_);
      if (other.LatestConsumeTime != 0L) {
        LatestConsumeTime = other.LatestConsumeTime;
      }
      if (other.LatestConsumeFreeTime != 0L) {
        LatestConsumeFreeTime = other.LatestConsumeFreeTime;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.accountResource_ != null) {
        if (accountResource_ == null) {
          AccountResource = new global::Protocol.Account.Types.AccountResource();
        }
        AccountResource.MergeFrom(other.AccountResource);
      }
      if (other.CodeHash.Length != 0) {
        CodeHash = other.CodeHash;
      }
      if (other.ownerPermission_ != null) {
        if (ownerPermission_ == null) {
          OwnerPermission = new global::Protocol.Permission();
        }
        OwnerPermission.MergeFrom(other.OwnerPermission);
      }
      if (other.witnessPermission_ != null) {
        if (witnessPermission_ == null) {
          WitnessPermission = new global::Protocol.Permission();
        }
        WitnessPermission.MergeFrom(other.WitnessPermission);
      }
      activePermission_.Add(other.activePermission_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccountName = input.ReadBytes();
            break;
          }
          case 16: {
            Type = (global::Protocol.AccountType) input.ReadEnum();
            break;
          }
          case 26: {
            Address = input.ReadBytes();
            break;
          }
          case 32: {
            Balance = input.ReadInt64();
            break;
          }
          case 42: {
            votes_.AddEntriesFrom(input, _repeated_votes_codec);
            break;
          }
          case 50: {
            asset_.AddEntriesFrom(input, _map_asset_codec);
            break;
          }
          case 58: {
            frozen_.AddEntriesFrom(input, _repeated_frozen_codec);
            break;
          }
          case 64: {
            NetUsage = input.ReadInt64();
            break;
          }
          case 72: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 80: {
            LatestOprationTime = input.ReadInt64();
            break;
          }
          case 88: {
            Allowance = input.ReadInt64();
            break;
          }
          case 96: {
            LatestWithdrawTime = input.ReadInt64();
            break;
          }
          case 106: {
            Code = input.ReadBytes();
            break;
          }
          case 112: {
            IsWitness = input.ReadBool();
            break;
          }
          case 120: {
            IsCommittee = input.ReadBool();
            break;
          }
          case 130: {
            frozenSupply_.AddEntriesFrom(input, _repeated_frozenSupply_codec);
            break;
          }
          case 138: {
            AssetIssuedName = input.ReadBytes();
            break;
          }
          case 146: {
            latestAssetOperationTime_.AddEntriesFrom(input, _map_latestAssetOperationTime_codec);
            break;
          }
          case 152: {
            FreeNetUsage = input.ReadInt64();
            break;
          }
          case 162: {
            freeAssetNetUsage_.AddEntriesFrom(input, _map_freeAssetNetUsage_codec);
            break;
          }
          case 168: {
            LatestConsumeTime = input.ReadInt64();
            break;
          }
          case 176: {
            LatestConsumeFreeTime = input.ReadInt64();
            break;
          }
          case 186: {
            AccountId = input.ReadBytes();
            break;
          }
          case 210: {
            if (accountResource_ == null) {
              AccountResource = new global::Protocol.Account.Types.AccountResource();
            }
            input.ReadMessage(AccountResource);
            break;
          }
          case 242: {
            CodeHash = input.ReadBytes();
            break;
          }
          case 250: {
            if (ownerPermission_ == null) {
              OwnerPermission = new global::Protocol.Permission();
            }
            input.ReadMessage(OwnerPermission);
            break;
          }
          case 258: {
            if (witnessPermission_ == null) {
              WitnessPermission = new global::Protocol.Permission();
            }
            input.ReadMessage(WitnessPermission);
            break;
          }
          case 266: {
            activePermission_.AddEntriesFrom(input, _repeated_activePermission_codec);
            break;
          }
          case 328: {
            AcquiredDelegatedFrozenBalanceForBandwidth = input.ReadInt64();
            break;
          }
          case 336: {
            DelegatedFrozenBalanceForBandwidth = input.ReadInt64();
            break;
          }
          case 450: {
            assetV2_.AddEntriesFrom(input, _map_assetV2_codec);
            break;
          }
          case 458: {
            AssetIssuedID = input.ReadBytes();
            break;
          }
          case 466: {
            latestAssetOperationTimeV2_.AddEntriesFrom(input, _map_latestAssetOperationTimeV2_codec);
            break;
          }
          case 474: {
            freeAssetNetUsageV2_.AddEntriesFrom(input, _map_freeAssetNetUsageV2_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Account message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// frozen balance 
      /// </summary>
      public sealed partial class Frozen : pb::IMessage<Frozen> {
        private static readonly pb::MessageParser<Frozen> _parser = new pb::MessageParser<Frozen>(() => new Frozen());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Frozen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Account.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Frozen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Frozen(Frozen other) : this() {
          frozenBalance_ = other.frozenBalance_;
          expireTime_ = other.expireTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Frozen Clone() {
          return new Frozen(this);
        }

        /// <summary>Field number for the "frozen_balance" field.</summary>
        public const int FrozenBalanceFieldNumber = 1;
        private long frozenBalance_;
        /// <summary>
        /// the frozen trx balance
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FrozenBalance {
          get { return frozenBalance_; }
          set {
            frozenBalance_ = value;
          }
        }

        /// <summary>Field number for the "expire_time" field.</summary>
        public const int ExpireTimeFieldNumber = 2;
        private long expireTime_;
        /// <summary>
        /// the expire time
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpireTime {
          get { return expireTime_; }
          set {
            expireTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Frozen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Frozen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FrozenBalance != other.FrozenBalance) return false;
          if (ExpireTime != other.ExpireTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FrozenBalance != 0L) hash ^= FrozenBalance.GetHashCode();
          if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FrozenBalance != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(FrozenBalance);
          }
          if (ExpireTime != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(ExpireTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FrozenBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrozenBalance);
          }
          if (ExpireTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Frozen other) {
          if (other == null) {
            return;
          }
          if (other.FrozenBalance != 0L) {
            FrozenBalance = other.FrozenBalance;
          }
          if (other.ExpireTime != 0L) {
            ExpireTime = other.ExpireTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FrozenBalance = input.ReadInt64();
                break;
              }
              case 16: {
                ExpireTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class AccountResource : pb::IMessage<AccountResource> {
        private static readonly pb::MessageParser<AccountResource> _parser = new pb::MessageParser<AccountResource>(() => new AccountResource());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AccountResource> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Account.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountResource() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountResource(AccountResource other) : this() {
          energyUsage_ = other.energyUsage_;
          frozenBalanceForEnergy_ = other.frozenBalanceForEnergy_ != null ? other.frozenBalanceForEnergy_.Clone() : null;
          latestConsumeTimeForEnergy_ = other.latestConsumeTimeForEnergy_;
          acquiredDelegatedFrozenBalanceForEnergy_ = other.acquiredDelegatedFrozenBalanceForEnergy_;
          delegatedFrozenBalanceForEnergy_ = other.delegatedFrozenBalanceForEnergy_;
          storageLimit_ = other.storageLimit_;
          storageUsage_ = other.storageUsage_;
          latestExchangeStorageTime_ = other.latestExchangeStorageTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AccountResource Clone() {
          return new AccountResource(this);
        }

        /// <summary>Field number for the "energy_usage" field.</summary>
        public const int EnergyUsageFieldNumber = 1;
        private long energyUsage_;
        /// <summary>
        /// energy resource, get from frozen
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EnergyUsage {
          get { return energyUsage_; }
          set {
            energyUsage_ = value;
          }
        }

        /// <summary>Field number for the "frozen_balance_for_energy" field.</summary>
        public const int FrozenBalanceForEnergyFieldNumber = 2;
        private global::Protocol.Account.Types.Frozen frozenBalanceForEnergy_;
        /// <summary>
        /// the frozen balance for energy
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Account.Types.Frozen FrozenBalanceForEnergy {
          get { return frozenBalanceForEnergy_; }
          set {
            frozenBalanceForEnergy_ = value;
          }
        }

        /// <summary>Field number for the "latest_consume_time_for_energy" field.</summary>
        public const int LatestConsumeTimeForEnergyFieldNumber = 3;
        private long latestConsumeTimeForEnergy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LatestConsumeTimeForEnergy {
          get { return latestConsumeTimeForEnergy_; }
          set {
            latestConsumeTimeForEnergy_ = value;
          }
        }

        /// <summary>Field number for the "acquired_delegated_frozen_balance_for_energy" field.</summary>
        public const int AcquiredDelegatedFrozenBalanceForEnergyFieldNumber = 4;
        private long acquiredDelegatedFrozenBalanceForEnergy_;
        /// <summary>
        ///Frozen balance provided by other accounts to this account
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AcquiredDelegatedFrozenBalanceForEnergy {
          get { return acquiredDelegatedFrozenBalanceForEnergy_; }
          set {
            acquiredDelegatedFrozenBalanceForEnergy_ = value;
          }
        }

        /// <summary>Field number for the "delegated_frozen_balance_for_energy" field.</summary>
        public const int DelegatedFrozenBalanceForEnergyFieldNumber = 5;
        private long delegatedFrozenBalanceForEnergy_;
        /// <summary>
        ///Frozen balances provided to other accounts
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long DelegatedFrozenBalanceForEnergy {
          get { return delegatedFrozenBalanceForEnergy_; }
          set {
            delegatedFrozenBalanceForEnergy_ = value;
          }
        }

        /// <summary>Field number for the "storage_limit" field.</summary>
        public const int StorageLimitFieldNumber = 6;
        private long storageLimit_;
        /// <summary>
        /// storage resource, get from market
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StorageLimit {
          get { return storageLimit_; }
          set {
            storageLimit_ = value;
          }
        }

        /// <summary>Field number for the "storage_usage" field.</summary>
        public const int StorageUsageFieldNumber = 7;
        private long storageUsage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StorageUsage {
          get { return storageUsage_; }
          set {
            storageUsage_ = value;
          }
        }

        /// <summary>Field number for the "latest_exchange_storage_time" field.</summary>
        public const int LatestExchangeStorageTimeFieldNumber = 8;
        private long latestExchangeStorageTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LatestExchangeStorageTime {
          get { return latestExchangeStorageTime_; }
          set {
            latestExchangeStorageTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AccountResource);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AccountResource other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EnergyUsage != other.EnergyUsage) return false;
          if (!object.Equals(FrozenBalanceForEnergy, other.FrozenBalanceForEnergy)) return false;
          if (LatestConsumeTimeForEnergy != other.LatestConsumeTimeForEnergy) return false;
          if (AcquiredDelegatedFrozenBalanceForEnergy != other.AcquiredDelegatedFrozenBalanceForEnergy) return false;
          if (DelegatedFrozenBalanceForEnergy != other.DelegatedFrozenBalanceForEnergy) return false;
          if (StorageLimit != other.StorageLimit) return false;
          if (StorageUsage != other.StorageUsage) return false;
          if (LatestExchangeStorageTime != other.LatestExchangeStorageTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EnergyUsage != 0L) hash ^= EnergyUsage.GetHashCode();
          if (frozenBalanceForEnergy_ != null) hash ^= FrozenBalanceForEnergy.GetHashCode();
          if (LatestConsumeTimeForEnergy != 0L) hash ^= LatestConsumeTimeForEnergy.GetHashCode();
          if (AcquiredDelegatedFrozenBalanceForEnergy != 0L) hash ^= AcquiredDelegatedFrozenBalanceForEnergy.GetHashCode();
          if (DelegatedFrozenBalanceForEnergy != 0L) hash ^= DelegatedFrozenBalanceForEnergy.GetHashCode();
          if (StorageLimit != 0L) hash ^= StorageLimit.GetHashCode();
          if (StorageUsage != 0L) hash ^= StorageUsage.GetHashCode();
          if (LatestExchangeStorageTime != 0L) hash ^= LatestExchangeStorageTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EnergyUsage != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(EnergyUsage);
          }
          if (frozenBalanceForEnergy_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FrozenBalanceForEnergy);
          }
          if (LatestConsumeTimeForEnergy != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(LatestConsumeTimeForEnergy);
          }
          if (AcquiredDelegatedFrozenBalanceForEnergy != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(AcquiredDelegatedFrozenBalanceForEnergy);
          }
          if (DelegatedFrozenBalanceForEnergy != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(DelegatedFrozenBalanceForEnergy);
          }
          if (StorageLimit != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(StorageLimit);
          }
          if (StorageUsage != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(StorageUsage);
          }
          if (LatestExchangeStorageTime != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(LatestExchangeStorageTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EnergyUsage != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnergyUsage);
          }
          if (frozenBalanceForEnergy_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrozenBalanceForEnergy);
          }
          if (LatestConsumeTimeForEnergy != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestConsumeTimeForEnergy);
          }
          if (AcquiredDelegatedFrozenBalanceForEnergy != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AcquiredDelegatedFrozenBalanceForEnergy);
          }
          if (DelegatedFrozenBalanceForEnergy != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(DelegatedFrozenBalanceForEnergy);
          }
          if (StorageLimit != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(StorageLimit);
          }
          if (StorageUsage != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(StorageUsage);
          }
          if (LatestExchangeStorageTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestExchangeStorageTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AccountResource other) {
          if (other == null) {
            return;
          }
          if (other.EnergyUsage != 0L) {
            EnergyUsage = other.EnergyUsage;
          }
          if (other.frozenBalanceForEnergy_ != null) {
            if (frozenBalanceForEnergy_ == null) {
              FrozenBalanceForEnergy = new global::Protocol.Account.Types.Frozen();
            }
            FrozenBalanceForEnergy.MergeFrom(other.FrozenBalanceForEnergy);
          }
          if (other.LatestConsumeTimeForEnergy != 0L) {
            LatestConsumeTimeForEnergy = other.LatestConsumeTimeForEnergy;
          }
          if (other.AcquiredDelegatedFrozenBalanceForEnergy != 0L) {
            AcquiredDelegatedFrozenBalanceForEnergy = other.AcquiredDelegatedFrozenBalanceForEnergy;
          }
          if (other.DelegatedFrozenBalanceForEnergy != 0L) {
            DelegatedFrozenBalanceForEnergy = other.DelegatedFrozenBalanceForEnergy;
          }
          if (other.StorageLimit != 0L) {
            StorageLimit = other.StorageLimit;
          }
          if (other.StorageUsage != 0L) {
            StorageUsage = other.StorageUsage;
          }
          if (other.LatestExchangeStorageTime != 0L) {
            LatestExchangeStorageTime = other.LatestExchangeStorageTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EnergyUsage = input.ReadInt64();
                break;
              }
              case 18: {
                if (frozenBalanceForEnergy_ == null) {
                  FrozenBalanceForEnergy = new global::Protocol.Account.Types.Frozen();
                }
                input.ReadMessage(FrozenBalanceForEnergy);
                break;
              }
              case 24: {
                LatestConsumeTimeForEnergy = input.ReadInt64();
                break;
              }
              case 32: {
                AcquiredDelegatedFrozenBalanceForEnergy = input.ReadInt64();
                break;
              }
              case 40: {
                DelegatedFrozenBalanceForEnergy = input.ReadInt64();
                break;
              }
              case 48: {
                StorageLimit = input.ReadInt64();
                break;
              }
              case 56: {
                StorageUsage = input.ReadInt64();
                break;
              }
              case 64: {
                LatestExchangeStorageTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Key : pb::IMessage<Key> {
    private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Key> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key(Key other) : this() {
      address_ = other.address_;
      weight_ = other.weight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key Clone() {
      return new Key(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 2;
    private long weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Key);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Key other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Weight != other.Weight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Weight != 0L) hash ^= Weight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (Weight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Weight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Weight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Weight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Key other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Weight != 0L) {
        Weight = other.Weight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 16: {
            Weight = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DelegatedResource : pb::IMessage<DelegatedResource> {
    private static readonly pb::MessageParser<DelegatedResource> _parser = new pb::MessageParser<DelegatedResource>(() => new DelegatedResource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelegatedResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelegatedResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelegatedResource(DelegatedResource other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      frozenBalanceForBandwidth_ = other.frozenBalanceForBandwidth_;
      frozenBalanceForEnergy_ = other.frozenBalanceForEnergy_;
      expireTimeForBandwidth_ = other.expireTimeForBandwidth_;
      expireTimeForEnergy_ = other.expireTimeForEnergy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelegatedResource Clone() {
      return new DelegatedResource(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private pb::ByteString from_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private pb::ByteString to_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frozen_balance_for_bandwidth" field.</summary>
    public const int FrozenBalanceForBandwidthFieldNumber = 3;
    private long frozenBalanceForBandwidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrozenBalanceForBandwidth {
      get { return frozenBalanceForBandwidth_; }
      set {
        frozenBalanceForBandwidth_ = value;
      }
    }

    /// <summary>Field number for the "frozen_balance_for_energy" field.</summary>
    public const int FrozenBalanceForEnergyFieldNumber = 4;
    private long frozenBalanceForEnergy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FrozenBalanceForEnergy {
      get { return frozenBalanceForEnergy_; }
      set {
        frozenBalanceForEnergy_ = value;
      }
    }

    /// <summary>Field number for the "expire_time_for_bandwidth" field.</summary>
    public const int ExpireTimeForBandwidthFieldNumber = 5;
    private long expireTimeForBandwidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpireTimeForBandwidth {
      get { return expireTimeForBandwidth_; }
      set {
        expireTimeForBandwidth_ = value;
      }
    }

    /// <summary>Field number for the "expire_time_for_energy" field.</summary>
    public const int ExpireTimeForEnergyFieldNumber = 6;
    private long expireTimeForEnergy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpireTimeForEnergy {
      get { return expireTimeForEnergy_; }
      set {
        expireTimeForEnergy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelegatedResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelegatedResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (FrozenBalanceForBandwidth != other.FrozenBalanceForBandwidth) return false;
      if (FrozenBalanceForEnergy != other.FrozenBalanceForEnergy) return false;
      if (ExpireTimeForBandwidth != other.ExpireTimeForBandwidth) return false;
      if (ExpireTimeForEnergy != other.ExpireTimeForEnergy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (FrozenBalanceForBandwidth != 0L) hash ^= FrozenBalanceForBandwidth.GetHashCode();
      if (FrozenBalanceForEnergy != 0L) hash ^= FrozenBalanceForEnergy.GetHashCode();
      if (ExpireTimeForBandwidth != 0L) hash ^= ExpireTimeForBandwidth.GetHashCode();
      if (ExpireTimeForEnergy != 0L) hash ^= ExpireTimeForEnergy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(To);
      }
      if (FrozenBalanceForBandwidth != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FrozenBalanceForBandwidth);
      }
      if (FrozenBalanceForEnergy != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FrozenBalanceForEnergy);
      }
      if (ExpireTimeForBandwidth != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ExpireTimeForBandwidth);
      }
      if (ExpireTimeForEnergy != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExpireTimeForEnergy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(To);
      }
      if (FrozenBalanceForBandwidth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrozenBalanceForBandwidth);
      }
      if (FrozenBalanceForEnergy != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrozenBalanceForEnergy);
      }
      if (ExpireTimeForBandwidth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTimeForBandwidth);
      }
      if (ExpireTimeForEnergy != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTimeForEnergy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelegatedResource other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.FrozenBalanceForBandwidth != 0L) {
        FrozenBalanceForBandwidth = other.FrozenBalanceForBandwidth;
      }
      if (other.FrozenBalanceForEnergy != 0L) {
        FrozenBalanceForEnergy = other.FrozenBalanceForEnergy;
      }
      if (other.ExpireTimeForBandwidth != 0L) {
        ExpireTimeForBandwidth = other.ExpireTimeForBandwidth;
      }
      if (other.ExpireTimeForEnergy != 0L) {
        ExpireTimeForEnergy = other.ExpireTimeForEnergy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            From = input.ReadBytes();
            break;
          }
          case 18: {
            To = input.ReadBytes();
            break;
          }
          case 24: {
            FrozenBalanceForBandwidth = input.ReadInt64();
            break;
          }
          case 32: {
            FrozenBalanceForEnergy = input.ReadInt64();
            break;
          }
          case 40: {
            ExpireTimeForBandwidth = input.ReadInt64();
            break;
          }
          case 48: {
            ExpireTimeForEnergy = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class authority : pb::IMessage<authority> {
    private static readonly pb::MessageParser<authority> _parser = new pb::MessageParser<authority>(() => new authority());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<authority> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public authority() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public authority(authority other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      permissionName_ = other.permissionName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public authority Clone() {
      return new authority(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Protocol.AccountId account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AccountId Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "permission_name" field.</summary>
    public const int PermissionNameFieldNumber = 2;
    private pb::ByteString permissionName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PermissionName {
      get { return permissionName_; }
      set {
        permissionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as authority);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(authority other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (PermissionName != other.PermissionName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (PermissionName.Length != 0) hash ^= PermissionName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (PermissionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PermissionName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (PermissionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PermissionName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(authority other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Protocol.AccountId();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.PermissionName.Length != 0) {
        PermissionName = other.PermissionName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Protocol.AccountId();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            PermissionName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Permission : pb::IMessage<Permission> {
    private static readonly pb::MessageParser<Permission> _parser = new pb::MessageParser<Permission>(() => new Permission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Permission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission(Permission other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      permissionName_ = other.permissionName_;
      threshold_ = other.threshold_;
      parentId_ = other.parentId_;
      operations_ = other.operations_;
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission Clone() {
      return new Permission(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protocol.Permission.Types.PermissionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Permission.Types.PermissionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    ///Owner id=0, Witness id=1, Active id start by 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "permission_name" field.</summary>
    public const int PermissionNameFieldNumber = 3;
    private string permissionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionName {
      get { return permissionName_; }
      set {
        permissionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 4;
    private long threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 5;
    private int parentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentId {
      get { return parentId_; }
      set {
        parentId_ = value;
      }
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 6;
    private pb::ByteString operations_ = pb::ByteString.Empty;
    /// <summary>
    ///1 bit 1 contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Operations {
      get { return operations_; }
      set {
        operations_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protocol.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(58, global::Protocol.Key.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Key> keys_ = new pbc::RepeatedField<global::Protocol.Key>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Key> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Permission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Permission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (PermissionName != other.PermissionName) return false;
      if (Threshold != other.Threshold) return false;
      if (ParentId != other.ParentId) return false;
      if (Operations != other.Operations) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PermissionName.Length != 0) hash ^= PermissionName.GetHashCode();
      if (Threshold != 0L) hash ^= Threshold.GetHashCode();
      if (ParentId != 0) hash ^= ParentId.GetHashCode();
      if (Operations.Length != 0) hash ^= Operations.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (PermissionName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PermissionName);
      }
      if (Threshold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Threshold);
      }
      if (ParentId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ParentId);
      }
      if (Operations.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Operations);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (PermissionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionName);
      }
      if (Threshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Threshold);
      }
      if (ParentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentId);
      }
      if (Operations.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Operations);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Permission other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PermissionName.Length != 0) {
        PermissionName = other.PermissionName;
      }
      if (other.Threshold != 0L) {
        Threshold = other.Threshold;
      }
      if (other.ParentId != 0) {
        ParentId = other.ParentId;
      }
      if (other.Operations.Length != 0) {
        Operations = other.Operations;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Protocol.Permission.Types.PermissionType) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            PermissionName = input.ReadString();
            break;
          }
          case 32: {
            Threshold = input.ReadInt64();
            break;
          }
          case 40: {
            ParentId = input.ReadInt32();
            break;
          }
          case 50: {
            Operations = input.ReadBytes();
            break;
          }
          case 58: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Permission message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PermissionType {
        [pbr::OriginalName("Owner")] Owner = 0,
        [pbr::OriginalName("Witness")] Witness = 1,
        [pbr::OriginalName("Active")] Active = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Witness
  /// </summary>
  public sealed partial class Witness : pb::IMessage<Witness> {
    private static readonly pb::MessageParser<Witness> _parser = new pb::MessageParser<Witness>(() => new Witness());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Witness> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Witness() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Witness(Witness other) : this() {
      address_ = other.address_;
      voteCount_ = other.voteCount_;
      pubKey_ = other.pubKey_;
      url_ = other.url_;
      totalProduced_ = other.totalProduced_;
      totalMissed_ = other.totalMissed_;
      latestBlockNum_ = other.latestBlockNum_;
      latestSlotNum_ = other.latestSlotNum_;
      isJobs_ = other.isJobs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Witness Clone() {
      return new Witness(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voteCount" field.</summary>
    public const int VoteCountFieldNumber = 2;
    private long voteCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VoteCount {
      get { return voteCount_; }
      set {
        voteCount_ = value;
      }
    }

    /// <summary>Field number for the "pubKey" field.</summary>
    public const int PubKeyFieldNumber = 3;
    private pb::ByteString pubKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 4;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalProduced" field.</summary>
    public const int TotalProducedFieldNumber = 5;
    private long totalProduced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalProduced {
      get { return totalProduced_; }
      set {
        totalProduced_ = value;
      }
    }

    /// <summary>Field number for the "totalMissed" field.</summary>
    public const int TotalMissedFieldNumber = 6;
    private long totalMissed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalMissed {
      get { return totalMissed_; }
      set {
        totalMissed_ = value;
      }
    }

    /// <summary>Field number for the "latestBlockNum" field.</summary>
    public const int LatestBlockNumFieldNumber = 7;
    private long latestBlockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestBlockNum {
      get { return latestBlockNum_; }
      set {
        latestBlockNum_ = value;
      }
    }

    /// <summary>Field number for the "latestSlotNum" field.</summary>
    public const int LatestSlotNumFieldNumber = 8;
    private long latestSlotNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestSlotNum {
      get { return latestSlotNum_; }
      set {
        latestSlotNum_ = value;
      }
    }

    /// <summary>Field number for the "isJobs" field.</summary>
    public const int IsJobsFieldNumber = 9;
    private bool isJobs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJobs {
      get { return isJobs_; }
      set {
        isJobs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Witness);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Witness other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (VoteCount != other.VoteCount) return false;
      if (PubKey != other.PubKey) return false;
      if (Url != other.Url) return false;
      if (TotalProduced != other.TotalProduced) return false;
      if (TotalMissed != other.TotalMissed) return false;
      if (LatestBlockNum != other.LatestBlockNum) return false;
      if (LatestSlotNum != other.LatestSlotNum) return false;
      if (IsJobs != other.IsJobs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (VoteCount != 0L) hash ^= VoteCount.GetHashCode();
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (TotalProduced != 0L) hash ^= TotalProduced.GetHashCode();
      if (TotalMissed != 0L) hash ^= TotalMissed.GetHashCode();
      if (LatestBlockNum != 0L) hash ^= LatestBlockNum.GetHashCode();
      if (LatestSlotNum != 0L) hash ^= LatestSlotNum.GetHashCode();
      if (IsJobs != false) hash ^= IsJobs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (VoteCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VoteCount);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PubKey);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      if (TotalProduced != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalProduced);
      }
      if (TotalMissed != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalMissed);
      }
      if (LatestBlockNum != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(LatestBlockNum);
      }
      if (LatestSlotNum != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LatestSlotNum);
      }
      if (IsJobs != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsJobs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (VoteCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VoteCount);
      }
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKey);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (TotalProduced != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProduced);
      }
      if (TotalMissed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalMissed);
      }
      if (LatestBlockNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestBlockNum);
      }
      if (LatestSlotNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestSlotNum);
      }
      if (IsJobs != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Witness other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.VoteCount != 0L) {
        VoteCount = other.VoteCount;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.TotalProduced != 0L) {
        TotalProduced = other.TotalProduced;
      }
      if (other.TotalMissed != 0L) {
        TotalMissed = other.TotalMissed;
      }
      if (other.LatestBlockNum != 0L) {
        LatestBlockNum = other.LatestBlockNum;
      }
      if (other.LatestSlotNum != 0L) {
        LatestSlotNum = other.LatestSlotNum;
      }
      if (other.IsJobs != false) {
        IsJobs = other.IsJobs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 16: {
            VoteCount = input.ReadInt64();
            break;
          }
          case 26: {
            PubKey = input.ReadBytes();
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
          case 40: {
            TotalProduced = input.ReadInt64();
            break;
          }
          case 48: {
            TotalMissed = input.ReadInt64();
            break;
          }
          case 56: {
            LatestBlockNum = input.ReadInt64();
            break;
          }
          case 64: {
            LatestSlotNum = input.ReadInt64();
            break;
          }
          case 72: {
            IsJobs = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Vote Change
  /// </summary>
  public sealed partial class Votes : pb::IMessage<Votes> {
    private static readonly pb::MessageParser<Votes> _parser = new pb::MessageParser<Votes>(() => new Votes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Votes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes(Votes other) : this() {
      address_ = other.address_;
      oldVotes_ = other.oldVotes_.Clone();
      newVotes_ = other.newVotes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes Clone() {
      return new Votes(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "old_votes" field.</summary>
    public const int OldVotesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.Vote> _repeated_oldVotes_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.Vote.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Vote> oldVotes_ = new pbc::RepeatedField<global::Protocol.Vote>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Vote> OldVotes {
      get { return oldVotes_; }
    }

    /// <summary>Field number for the "new_votes" field.</summary>
    public const int NewVotesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.Vote> _repeated_newVotes_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.Vote.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Vote> newVotes_ = new pbc::RepeatedField<global::Protocol.Vote>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Vote> NewVotes {
      get { return newVotes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Votes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Votes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if(!oldVotes_.Equals(other.oldVotes_)) return false;
      if(!newVotes_.Equals(other.newVotes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      hash ^= oldVotes_.GetHashCode();
      hash ^= newVotes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      oldVotes_.WriteTo(output, _repeated_oldVotes_codec);
      newVotes_.WriteTo(output, _repeated_newVotes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      size += oldVotes_.CalculateSize(_repeated_oldVotes_codec);
      size += newVotes_.CalculateSize(_repeated_newVotes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Votes other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      oldVotes_.Add(other.oldVotes_);
      newVotes_.Add(other.newVotes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 18: {
            oldVotes_.AddEntriesFrom(input, _repeated_oldVotes_codec);
            break;
          }
          case 26: {
            newVotes_.AddEntriesFrom(input, _repeated_newVotes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TXOutput : pb::IMessage<TXOutput> {
    private static readonly pb::MessageParser<TXOutput> _parser = new pb::MessageParser<TXOutput>(() => new TXOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TXOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutput(TXOutput other) : this() {
      value_ = other.value_;
      pubKeyHash_ = other.pubKeyHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutput Clone() {
      return new TXOutput(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "pubKeyHash" field.</summary>
    public const int PubKeyHashFieldNumber = 2;
    private pb::ByteString pubKeyHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PubKeyHash {
      get { return pubKeyHash_; }
      set {
        pubKeyHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TXOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TXOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (PubKeyHash != other.PubKeyHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (PubKeyHash.Length != 0) hash ^= PubKeyHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (PubKeyHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PubKeyHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (PubKeyHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKeyHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TXOutput other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.PubKeyHash.Length != 0) {
        PubKeyHash = other.PubKeyHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
          case 18: {
            PubKeyHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TXInput : pb::IMessage<TXInput> {
    private static readonly pb::MessageParser<TXInput> _parser = new pb::MessageParser<TXInput>(() => new TXInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TXInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXInput(TXInput other) : this() {
      rawData_ = other.rawData_ != null ? other.rawData_.Clone() : null;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXInput Clone() {
      return new TXInput(this);
    }

    /// <summary>Field number for the "raw_data" field.</summary>
    public const int RawDataFieldNumber = 1;
    private global::Protocol.TXInput.Types.raw rawData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TXInput.Types.raw RawData {
      get { return rawData_; }
      set {
        rawData_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 4;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TXInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TXInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RawData, other.RawData)) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rawData_ != null) hash ^= RawData.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rawData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RawData);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rawData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawData);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TXInput other) {
      if (other == null) {
        return;
      }
      if (other.rawData_ != null) {
        if (rawData_ == null) {
          RawData = new global::Protocol.TXInput.Types.raw();
        }
        RawData.MergeFrom(other.RawData);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rawData_ == null) {
              RawData = new global::Protocol.TXInput.Types.raw();
            }
            input.ReadMessage(RawData);
            break;
          }
          case 34: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TXInput message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class raw : pb::IMessage<raw> {
        private static readonly pb::MessageParser<raw> _parser = new pb::MessageParser<raw>(() => new raw());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<raw> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.TXInput.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw(raw other) : this() {
          txID_ = other.txID_;
          vout_ = other.vout_;
          pubKey_ = other.pubKey_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw Clone() {
          return new raw(this);
        }

        /// <summary>Field number for the "txID" field.</summary>
        public const int TxIDFieldNumber = 1;
        private pb::ByteString txID_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TxID {
          get { return txID_; }
          set {
            txID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "vout" field.</summary>
        public const int VoutFieldNumber = 2;
        private long vout_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Vout {
          get { return vout_; }
          set {
            vout_ = value;
          }
        }

        /// <summary>Field number for the "pubKey" field.</summary>
        public const int PubKeyFieldNumber = 3;
        private pb::ByteString pubKey_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PubKey {
          get { return pubKey_; }
          set {
            pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as raw);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(raw other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TxID != other.TxID) return false;
          if (Vout != other.Vout) return false;
          if (PubKey != other.PubKey) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TxID.Length != 0) hash ^= TxID.GetHashCode();
          if (Vout != 0L) hash ^= Vout.GetHashCode();
          if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TxID.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(TxID);
          }
          if (Vout != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Vout);
          }
          if (PubKey.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(PubKey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TxID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxID);
          }
          if (Vout != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Vout);
          }
          if (PubKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKey);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(raw other) {
          if (other == null) {
            return;
          }
          if (other.TxID.Length != 0) {
            TxID = other.TxID;
          }
          if (other.Vout != 0L) {
            Vout = other.Vout;
          }
          if (other.PubKey.Length != 0) {
            PubKey = other.PubKey;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                TxID = input.ReadBytes();
                break;
              }
              case 16: {
                Vout = input.ReadInt64();
                break;
              }
              case 26: {
                PubKey = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TXOutputs : pb::IMessage<TXOutputs> {
    private static readonly pb::MessageParser<TXOutputs> _parser = new pb::MessageParser<TXOutputs>(() => new TXOutputs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TXOutputs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutputs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutputs(TXOutputs other) : this() {
      outputs_ = other.outputs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutputs Clone() {
      return new TXOutputs(this);
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.TXOutput> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.TXOutput.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TXOutput> outputs_ = new pbc::RepeatedField<global::Protocol.TXOutput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TXOutput> Outputs {
      get { return outputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TXOutputs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TXOutputs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!outputs_.Equals(other.outputs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= outputs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TXOutputs other) {
      if (other == null) {
        return;
      }
      outputs_.Add(other.outputs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceReceipt : pb::IMessage<ResourceReceipt> {
    private static readonly pb::MessageParser<ResourceReceipt> _parser = new pb::MessageParser<ResourceReceipt>(() => new ResourceReceipt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceReceipt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceReceipt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceReceipt(ResourceReceipt other) : this() {
      energyUsage_ = other.energyUsage_;
      energyFee_ = other.energyFee_;
      originEnergyUsage_ = other.originEnergyUsage_;
      energyUsageTotal_ = other.energyUsageTotal_;
      netUsage_ = other.netUsage_;
      netFee_ = other.netFee_;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceReceipt Clone() {
      return new ResourceReceipt(this);
    }

    /// <summary>Field number for the "energy_usage" field.</summary>
    public const int EnergyUsageFieldNumber = 1;
    private long energyUsage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnergyUsage {
      get { return energyUsage_; }
      set {
        energyUsage_ = value;
      }
    }

    /// <summary>Field number for the "energy_fee" field.</summary>
    public const int EnergyFeeFieldNumber = 2;
    private long energyFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnergyFee {
      get { return energyFee_; }
      set {
        energyFee_ = value;
      }
    }

    /// <summary>Field number for the "origin_energy_usage" field.</summary>
    public const int OriginEnergyUsageFieldNumber = 3;
    private long originEnergyUsage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OriginEnergyUsage {
      get { return originEnergyUsage_; }
      set {
        originEnergyUsage_ = value;
      }
    }

    /// <summary>Field number for the "energy_usage_total" field.</summary>
    public const int EnergyUsageTotalFieldNumber = 4;
    private long energyUsageTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EnergyUsageTotal {
      get { return energyUsageTotal_; }
      set {
        energyUsageTotal_ = value;
      }
    }

    /// <summary>Field number for the "net_usage" field.</summary>
    public const int NetUsageFieldNumber = 5;
    private long netUsage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NetUsage {
      get { return netUsage_; }
      set {
        netUsage_ = value;
      }
    }

    /// <summary>Field number for the "net_fee" field.</summary>
    public const int NetFeeFieldNumber = 6;
    private long netFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NetFee {
      get { return netFee_; }
      set {
        netFee_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 7;
    private global::Protocol.Transaction.Types.Result.Types.contractResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Transaction.Types.Result.Types.contractResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceReceipt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceReceipt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnergyUsage != other.EnergyUsage) return false;
      if (EnergyFee != other.EnergyFee) return false;
      if (OriginEnergyUsage != other.OriginEnergyUsage) return false;
      if (EnergyUsageTotal != other.EnergyUsageTotal) return false;
      if (NetUsage != other.NetUsage) return false;
      if (NetFee != other.NetFee) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnergyUsage != 0L) hash ^= EnergyUsage.GetHashCode();
      if (EnergyFee != 0L) hash ^= EnergyFee.GetHashCode();
      if (OriginEnergyUsage != 0L) hash ^= OriginEnergyUsage.GetHashCode();
      if (EnergyUsageTotal != 0L) hash ^= EnergyUsageTotal.GetHashCode();
      if (NetUsage != 0L) hash ^= NetUsage.GetHashCode();
      if (NetFee != 0L) hash ^= NetFee.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnergyUsage != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EnergyUsage);
      }
      if (EnergyFee != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EnergyFee);
      }
      if (OriginEnergyUsage != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OriginEnergyUsage);
      }
      if (EnergyUsageTotal != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EnergyUsageTotal);
      }
      if (NetUsage != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NetUsage);
      }
      if (NetFee != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(NetFee);
      }
      if (Result != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnergyUsage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnergyUsage);
      }
      if (EnergyFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnergyFee);
      }
      if (OriginEnergyUsage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OriginEnergyUsage);
      }
      if (EnergyUsageTotal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EnergyUsageTotal);
      }
      if (NetUsage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NetUsage);
      }
      if (NetFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NetFee);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceReceipt other) {
      if (other == null) {
        return;
      }
      if (other.EnergyUsage != 0L) {
        EnergyUsage = other.EnergyUsage;
      }
      if (other.EnergyFee != 0L) {
        EnergyFee = other.EnergyFee;
      }
      if (other.OriginEnergyUsage != 0L) {
        OriginEnergyUsage = other.OriginEnergyUsage;
      }
      if (other.EnergyUsageTotal != 0L) {
        EnergyUsageTotal = other.EnergyUsageTotal;
      }
      if (other.NetUsage != 0L) {
        NetUsage = other.NetUsage;
      }
      if (other.NetFee != 0L) {
        NetFee = other.NetFee;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnergyUsage = input.ReadInt64();
            break;
          }
          case 16: {
            EnergyFee = input.ReadInt64();
            break;
          }
          case 24: {
            OriginEnergyUsage = input.ReadInt64();
            break;
          }
          case 32: {
            EnergyUsageTotal = input.ReadInt64();
            break;
          }
          case 40: {
            NetUsage = input.ReadInt64();
            break;
          }
          case 48: {
            NetFee = input.ReadInt64();
            break;
          }
          case 56: {
            Result = (global::Protocol.Transaction.Types.Result.Types.contractResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      rawData_ = other.rawData_ != null ? other.rawData_.Clone() : null;
      signature_ = other.signature_.Clone();
      ret_ = other.ret_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "raw_data" field.</summary>
    public const int RawDataFieldNumber = 1;
    private global::Protocol.Transaction.Types.raw rawData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Transaction.Types.raw RawData {
      get { return rawData_; }
      set {
        rawData_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_signature_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> signature_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// only support size = 1,  repeated list here for muti-sig extension
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Signature {
      get { return signature_; }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.Transaction.Types.Result> _repeated_ret_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.Transaction.Types.Result.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Transaction.Types.Result> ret_ = new pbc::RepeatedField<global::Protocol.Transaction.Types.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Transaction.Types.Result> Ret {
      get { return ret_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RawData, other.RawData)) return false;
      if(!signature_.Equals(other.signature_)) return false;
      if(!ret_.Equals(other.ret_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rawData_ != null) hash ^= RawData.GetHashCode();
      hash ^= signature_.GetHashCode();
      hash ^= ret_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rawData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RawData);
      }
      signature_.WriteTo(output, _repeated_signature_codec);
      ret_.WriteTo(output, _repeated_ret_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rawData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawData);
      }
      size += signature_.CalculateSize(_repeated_signature_codec);
      size += ret_.CalculateSize(_repeated_ret_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.rawData_ != null) {
        if (rawData_ == null) {
          RawData = new global::Protocol.Transaction.Types.raw();
        }
        RawData.MergeFrom(other.RawData);
      }
      signature_.Add(other.signature_);
      ret_.Add(other.ret_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rawData_ == null) {
              RawData = new global::Protocol.Transaction.Types.raw();
            }
            input.ReadMessage(RawData);
            break;
          }
          case 18: {
            signature_.AddEntriesFrom(input, _repeated_signature_codec);
            break;
          }
          case 42: {
            ret_.AddEntriesFrom(input, _repeated_ret_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Transaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Contract : pb::IMessage<Contract> {
        private static readonly pb::MessageParser<Contract> _parser = new pb::MessageParser<Contract>(() => new Contract());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Contract> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Transaction.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract(Contract other) : this() {
          type_ = other.type_;
          parameter_ = other.parameter_ != null ? other.parameter_.Clone() : null;
          provider_ = other.provider_;
          contractName_ = other.contractName_;
          permissionId_ = other.permissionId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract Clone() {
          return new Contract(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Protocol.Transaction.Types.Contract.Types.ContractType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Transaction.Types.Contract.Types.ContractType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "parameter" field.</summary>
        public const int ParameterFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Any parameter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Any Parameter {
          get { return parameter_; }
          set {
            parameter_ = value;
          }
        }

        /// <summary>Field number for the "provider" field.</summary>
        public const int ProviderFieldNumber = 3;
        private pb::ByteString provider_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Provider {
          get { return provider_; }
          set {
            provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ContractName" field.</summary>
        public const int ContractNameFieldNumber = 4;
        private pb::ByteString contractName_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ContractName {
          get { return contractName_; }
          set {
            contractName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Permission_id" field.</summary>
        public const int PermissionIdFieldNumber = 5;
        private int permissionId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PermissionId {
          get { return permissionId_; }
          set {
            permissionId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Contract);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Contract other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (!object.Equals(Parameter, other.Parameter)) return false;
          if (Provider != other.Provider) return false;
          if (ContractName != other.ContractName) return false;
          if (PermissionId != other.PermissionId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (parameter_ != null) hash ^= Parameter.GetHashCode();
          if (Provider.Length != 0) hash ^= Provider.GetHashCode();
          if (ContractName.Length != 0) hash ^= ContractName.GetHashCode();
          if (PermissionId != 0) hash ^= PermissionId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (parameter_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Parameter);
          }
          if (Provider.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Provider);
          }
          if (ContractName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(ContractName);
          }
          if (PermissionId != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(PermissionId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (parameter_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameter);
          }
          if (Provider.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Provider);
          }
          if (ContractName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContractName);
          }
          if (PermissionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Contract other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.parameter_ != null) {
            if (parameter_ == null) {
              Parameter = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            Parameter.MergeFrom(other.Parameter);
          }
          if (other.Provider.Length != 0) {
            Provider = other.Provider;
          }
          if (other.ContractName.Length != 0) {
            ContractName = other.ContractName;
          }
          if (other.PermissionId != 0) {
            PermissionId = other.PermissionId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Protocol.Transaction.Types.Contract.Types.ContractType) input.ReadEnum();
                break;
              }
              case 18: {
                if (parameter_ == null) {
                  Parameter = new global::Google.Protobuf.WellKnownTypes.Any();
                }
                input.ReadMessage(Parameter);
                break;
              }
              case 26: {
                Provider = input.ReadBytes();
                break;
              }
              case 34: {
                ContractName = input.ReadBytes();
                break;
              }
              case 40: {
                PermissionId = input.ReadInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Contract message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ContractType {
            [pbr::OriginalName("AccountCreateContract")] AccountCreateContract = 0,
            [pbr::OriginalName("TransferContract")] TransferContract = 1,
            [pbr::OriginalName("TransferAssetContract")] TransferAssetContract = 2,
            [pbr::OriginalName("VoteAssetContract")] VoteAssetContract = 3,
            [pbr::OriginalName("VoteWitnessContract")] VoteWitnessContract = 4,
            [pbr::OriginalName("WitnessCreateContract")] WitnessCreateContract = 5,
            [pbr::OriginalName("AssetIssueContract")] AssetIssueContract = 6,
            [pbr::OriginalName("WitnessUpdateContract")] WitnessUpdateContract = 8,
            [pbr::OriginalName("ParticipateAssetIssueContract")] ParticipateAssetIssueContract = 9,
            [pbr::OriginalName("AccountUpdateContract")] AccountUpdateContract = 10,
            [pbr::OriginalName("FreezeBalanceContract")] FreezeBalanceContract = 11,
            [pbr::OriginalName("UnfreezeBalanceContract")] UnfreezeBalanceContract = 12,
            [pbr::OriginalName("WithdrawBalanceContract")] WithdrawBalanceContract = 13,
            [pbr::OriginalName("UnfreezeAssetContract")] UnfreezeAssetContract = 14,
            [pbr::OriginalName("UpdateAssetContract")] UpdateAssetContract = 15,
            [pbr::OriginalName("ProposalCreateContract")] ProposalCreateContract = 16,
            [pbr::OriginalName("ProposalApproveContract")] ProposalApproveContract = 17,
            [pbr::OriginalName("ProposalDeleteContract")] ProposalDeleteContract = 18,
            [pbr::OriginalName("SetAccountIdContract")] SetAccountIdContract = 19,
            [pbr::OriginalName("CustomContract")] CustomContract = 20,
            /// <summary>
            /// BuyStorageContract = 21;
            /// BuyStorageBytesContract = 22;
            /// SellStorageContract = 23;
            /// </summary>
            [pbr::OriginalName("CreateSmartContract")] CreateSmartContract = 30,
            [pbr::OriginalName("TriggerSmartContract")] TriggerSmartContract = 31,
            [pbr::OriginalName("GetContract")] GetContract = 32,
            [pbr::OriginalName("UpdateSettingContract")] UpdateSettingContract = 33,
            [pbr::OriginalName("ExchangeCreateContract")] ExchangeCreateContract = 41,
            [pbr::OriginalName("ExchangeInjectContract")] ExchangeInjectContract = 42,
            [pbr::OriginalName("ExchangeWithdrawContract")] ExchangeWithdrawContract = 43,
            [pbr::OriginalName("ExchangeTransactionContract")] ExchangeTransactionContract = 44,
            [pbr::OriginalName("UpdateEnergyLimitContract")] UpdateEnergyLimitContract = 45,
            [pbr::OriginalName("AccountPermissionUpdateContract")] AccountPermissionUpdateContract = 46,
            [pbr::OriginalName("ClearABIContract")] ClearAbicontract = 48,
          }

        }
        #endregion

      }

      public sealed partial class Result : pb::IMessage<Result> {
        private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Result> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Transaction.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result(Result other) : this() {
          fee_ = other.fee_;
          ret_ = other.ret_;
          contractRet_ = other.contractRet_;
          assetIssueID_ = other.assetIssueID_;
          withdrawAmount_ = other.withdrawAmount_;
          unfreezeAmount_ = other.unfreezeAmount_;
          exchangeReceivedAmount_ = other.exchangeReceivedAmount_;
          exchangeInjectAnotherAmount_ = other.exchangeInjectAnotherAmount_;
          exchangeWithdrawAnotherAmount_ = other.exchangeWithdrawAnotherAmount_;
          exchangeId_ = other.exchangeId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result Clone() {
          return new Result(this);
        }

        /// <summary>Field number for the "fee" field.</summary>
        public const int FeeFieldNumber = 1;
        private long fee_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Fee {
          get { return fee_; }
          set {
            fee_ = value;
          }
        }

        /// <summary>Field number for the "ret" field.</summary>
        public const int RetFieldNumber = 2;
        private global::Protocol.Transaction.Types.Result.Types.code ret_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Transaction.Types.Result.Types.code Ret {
          get { return ret_; }
          set {
            ret_ = value;
          }
        }

        /// <summary>Field number for the "contractRet" field.</summary>
        public const int ContractRetFieldNumber = 3;
        private global::Protocol.Transaction.Types.Result.Types.contractResult contractRet_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Transaction.Types.Result.Types.contractResult ContractRet {
          get { return contractRet_; }
          set {
            contractRet_ = value;
          }
        }

        /// <summary>Field number for the "assetIssueID" field.</summary>
        public const int AssetIssueIDFieldNumber = 14;
        private string assetIssueID_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AssetIssueID {
          get { return assetIssueID_; }
          set {
            assetIssueID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "withdraw_amount" field.</summary>
        public const int WithdrawAmountFieldNumber = 15;
        private long withdrawAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long WithdrawAmount {
          get { return withdrawAmount_; }
          set {
            withdrawAmount_ = value;
          }
        }

        /// <summary>Field number for the "unfreeze_amount" field.</summary>
        public const int UnfreezeAmountFieldNumber = 16;
        private long unfreezeAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UnfreezeAmount {
          get { return unfreezeAmount_; }
          set {
            unfreezeAmount_ = value;
          }
        }

        /// <summary>Field number for the "exchange_received_amount" field.</summary>
        public const int ExchangeReceivedAmountFieldNumber = 18;
        private long exchangeReceivedAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExchangeReceivedAmount {
          get { return exchangeReceivedAmount_; }
          set {
            exchangeReceivedAmount_ = value;
          }
        }

        /// <summary>Field number for the "exchange_inject_another_amount" field.</summary>
        public const int ExchangeInjectAnotherAmountFieldNumber = 19;
        private long exchangeInjectAnotherAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExchangeInjectAnotherAmount {
          get { return exchangeInjectAnotherAmount_; }
          set {
            exchangeInjectAnotherAmount_ = value;
          }
        }

        /// <summary>Field number for the "exchange_withdraw_another_amount" field.</summary>
        public const int ExchangeWithdrawAnotherAmountFieldNumber = 20;
        private long exchangeWithdrawAnotherAmount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExchangeWithdrawAnotherAmount {
          get { return exchangeWithdrawAnotherAmount_; }
          set {
            exchangeWithdrawAnotherAmount_ = value;
          }
        }

        /// <summary>Field number for the "exchange_id" field.</summary>
        public const int ExchangeIdFieldNumber = 21;
        private long exchangeId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExchangeId {
          get { return exchangeId_; }
          set {
            exchangeId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Result);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Result other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Fee != other.Fee) return false;
          if (Ret != other.Ret) return false;
          if (ContractRet != other.ContractRet) return false;
          if (AssetIssueID != other.AssetIssueID) return false;
          if (WithdrawAmount != other.WithdrawAmount) return false;
          if (UnfreezeAmount != other.UnfreezeAmount) return false;
          if (ExchangeReceivedAmount != other.ExchangeReceivedAmount) return false;
          if (ExchangeInjectAnotherAmount != other.ExchangeInjectAnotherAmount) return false;
          if (ExchangeWithdrawAnotherAmount != other.ExchangeWithdrawAnotherAmount) return false;
          if (ExchangeId != other.ExchangeId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Fee != 0L) hash ^= Fee.GetHashCode();
          if (Ret != 0) hash ^= Ret.GetHashCode();
          if (ContractRet != 0) hash ^= ContractRet.GetHashCode();
          if (AssetIssueID.Length != 0) hash ^= AssetIssueID.GetHashCode();
          if (WithdrawAmount != 0L) hash ^= WithdrawAmount.GetHashCode();
          if (UnfreezeAmount != 0L) hash ^= UnfreezeAmount.GetHashCode();
          if (ExchangeReceivedAmount != 0L) hash ^= ExchangeReceivedAmount.GetHashCode();
          if (ExchangeInjectAnotherAmount != 0L) hash ^= ExchangeInjectAnotherAmount.GetHashCode();
          if (ExchangeWithdrawAnotherAmount != 0L) hash ^= ExchangeWithdrawAnotherAmount.GetHashCode();
          if (ExchangeId != 0L) hash ^= ExchangeId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Fee != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Fee);
          }
          if (Ret != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Ret);
          }
          if (ContractRet != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) ContractRet);
          }
          if (AssetIssueID.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(AssetIssueID);
          }
          if (WithdrawAmount != 0L) {
            output.WriteRawTag(120);
            output.WriteInt64(WithdrawAmount);
          }
          if (UnfreezeAmount != 0L) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(UnfreezeAmount);
          }
          if (ExchangeReceivedAmount != 0L) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(ExchangeReceivedAmount);
          }
          if (ExchangeInjectAnotherAmount != 0L) {
            output.WriteRawTag(152, 1);
            output.WriteInt64(ExchangeInjectAnotherAmount);
          }
          if (ExchangeWithdrawAnotherAmount != 0L) {
            output.WriteRawTag(160, 1);
            output.WriteInt64(ExchangeWithdrawAnotherAmount);
          }
          if (ExchangeId != 0L) {
            output.WriteRawTag(168, 1);
            output.WriteInt64(ExchangeId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Fee != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
          }
          if (Ret != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
          }
          if (ContractRet != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ContractRet);
          }
          if (AssetIssueID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetIssueID);
          }
          if (WithdrawAmount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(WithdrawAmount);
          }
          if (UnfreezeAmount != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(UnfreezeAmount);
          }
          if (ExchangeReceivedAmount != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeReceivedAmount);
          }
          if (ExchangeInjectAnotherAmount != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeInjectAnotherAmount);
          }
          if (ExchangeWithdrawAnotherAmount != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeWithdrawAnotherAmount);
          }
          if (ExchangeId != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Result other) {
          if (other == null) {
            return;
          }
          if (other.Fee != 0L) {
            Fee = other.Fee;
          }
          if (other.Ret != 0) {
            Ret = other.Ret;
          }
          if (other.ContractRet != 0) {
            ContractRet = other.ContractRet;
          }
          if (other.AssetIssueID.Length != 0) {
            AssetIssueID = other.AssetIssueID;
          }
          if (other.WithdrawAmount != 0L) {
            WithdrawAmount = other.WithdrawAmount;
          }
          if (other.UnfreezeAmount != 0L) {
            UnfreezeAmount = other.UnfreezeAmount;
          }
          if (other.ExchangeReceivedAmount != 0L) {
            ExchangeReceivedAmount = other.ExchangeReceivedAmount;
          }
          if (other.ExchangeInjectAnotherAmount != 0L) {
            ExchangeInjectAnotherAmount = other.ExchangeInjectAnotherAmount;
          }
          if (other.ExchangeWithdrawAnotherAmount != 0L) {
            ExchangeWithdrawAnotherAmount = other.ExchangeWithdrawAnotherAmount;
          }
          if (other.ExchangeId != 0L) {
            ExchangeId = other.ExchangeId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Fee = input.ReadInt64();
                break;
              }
              case 16: {
                Ret = (global::Protocol.Transaction.Types.Result.Types.code) input.ReadEnum();
                break;
              }
              case 24: {
                ContractRet = (global::Protocol.Transaction.Types.Result.Types.contractResult) input.ReadEnum();
                break;
              }
              case 114: {
                AssetIssueID = input.ReadString();
                break;
              }
              case 120: {
                WithdrawAmount = input.ReadInt64();
                break;
              }
              case 128: {
                UnfreezeAmount = input.ReadInt64();
                break;
              }
              case 144: {
                ExchangeReceivedAmount = input.ReadInt64();
                break;
              }
              case 152: {
                ExchangeInjectAnotherAmount = input.ReadInt64();
                break;
              }
              case 160: {
                ExchangeWithdrawAnotherAmount = input.ReadInt64();
                break;
              }
              case 168: {
                ExchangeId = input.ReadInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Result message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum code {
            [pbr::OriginalName("SUCESS")] Sucess = 0,
            [pbr::OriginalName("FAILED")] Failed = 1,
          }

          public enum contractResult {
            [pbr::OriginalName("DEFAULT")] Default = 0,
            [pbr::OriginalName("SUCCESS")] Success = 1,
            [pbr::OriginalName("REVERT")] Revert = 2,
            [pbr::OriginalName("BAD_JUMP_DESTINATION")] BadJumpDestination = 3,
            [pbr::OriginalName("OUT_OF_MEMORY")] OutOfMemory = 4,
            [pbr::OriginalName("PRECOMPILED_CONTRACT")] PrecompiledContract = 5,
            [pbr::OriginalName("STACK_TOO_SMALL")] StackTooSmall = 6,
            [pbr::OriginalName("STACK_TOO_LARGE")] StackTooLarge = 7,
            [pbr::OriginalName("ILLEGAL_OPERATION")] IllegalOperation = 8,
            [pbr::OriginalName("STACK_OVERFLOW")] StackOverflow = 9,
            [pbr::OriginalName("OUT_OF_ENERGY")] OutOfEnergy = 10,
            [pbr::OriginalName("OUT_OF_TIME")] OutOfTime = 11,
            [pbr::OriginalName("JVM_STACK_OVER_FLOW")] JvmStackOverFlow = 12,
            [pbr::OriginalName("UNKNOWN")] Unknown = 13,
            [pbr::OriginalName("TRANSFER_FAILED")] TransferFailed = 14,
          }

        }
        #endregion

      }

      public sealed partial class raw : pb::IMessage<raw> {
        private static readonly pb::MessageParser<raw> _parser = new pb::MessageParser<raw>(() => new raw());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<raw> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Transaction.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw(raw other) : this() {
          refBlockBytes_ = other.refBlockBytes_;
          refBlockNum_ = other.refBlockNum_;
          refBlockHash_ = other.refBlockHash_;
          expiration_ = other.expiration_;
          auths_ = other.auths_.Clone();
          data_ = other.data_;
          contract_ = other.contract_.Clone();
          scripts_ = other.scripts_;
          timestamp_ = other.timestamp_;
          feeLimit_ = other.feeLimit_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw Clone() {
          return new raw(this);
        }

        /// <summary>Field number for the "ref_block_bytes" field.</summary>
        public const int RefBlockBytesFieldNumber = 1;
        private pb::ByteString refBlockBytes_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RefBlockBytes {
          get { return refBlockBytes_; }
          set {
            refBlockBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ref_block_num" field.</summary>
        public const int RefBlockNumFieldNumber = 3;
        private long refBlockNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RefBlockNum {
          get { return refBlockNum_; }
          set {
            refBlockNum_ = value;
          }
        }

        /// <summary>Field number for the "ref_block_hash" field.</summary>
        public const int RefBlockHashFieldNumber = 4;
        private pb::ByteString refBlockHash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RefBlockHash {
          get { return refBlockHash_; }
          set {
            refBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expiration" field.</summary>
        public const int ExpirationFieldNumber = 8;
        private long expiration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Expiration {
          get { return expiration_; }
          set {
            expiration_ = value;
          }
        }

        /// <summary>Field number for the "auths" field.</summary>
        public const int AuthsFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Protocol.authority> _repeated_auths_codec
            = pb::FieldCodec.ForMessage(74, global::Protocol.authority.Parser);
        private readonly pbc::RepeatedField<global::Protocol.authority> auths_ = new pbc::RepeatedField<global::Protocol.authority>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.authority> Auths {
          get { return auths_; }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 10;
        private pb::ByteString data_ = pb::ByteString.Empty;
        /// <summary>
        /// data not used
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "contract" field.</summary>
        public const int ContractFieldNumber = 11;
        private static readonly pb::FieldCodec<global::Protocol.Transaction.Types.Contract> _repeated_contract_codec
            = pb::FieldCodec.ForMessage(90, global::Protocol.Transaction.Types.Contract.Parser);
        private readonly pbc::RepeatedField<global::Protocol.Transaction.Types.Contract> contract_ = new pbc::RepeatedField<global::Protocol.Transaction.Types.Contract>();
        /// <summary>
        ///only support size = 1,  repeated list here for extension
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.Transaction.Types.Contract> Contract {
          get { return contract_; }
        }

        /// <summary>Field number for the "scripts" field.</summary>
        public const int ScriptsFieldNumber = 12;
        private pb::ByteString scripts_ = pb::ByteString.Empty;
        /// <summary>
        /// scripts not used
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Scripts {
          get { return scripts_; }
          set {
            scripts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 14;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        /// <summary>Field number for the "fee_limit" field.</summary>
        public const int FeeLimitFieldNumber = 18;
        private long feeLimit_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FeeLimit {
          get { return feeLimit_; }
          set {
            feeLimit_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as raw);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(raw other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RefBlockBytes != other.RefBlockBytes) return false;
          if (RefBlockNum != other.RefBlockNum) return false;
          if (RefBlockHash != other.RefBlockHash) return false;
          if (Expiration != other.Expiration) return false;
          if(!auths_.Equals(other.auths_)) return false;
          if (Data != other.Data) return false;
          if(!contract_.Equals(other.contract_)) return false;
          if (Scripts != other.Scripts) return false;
          if (Timestamp != other.Timestamp) return false;
          if (FeeLimit != other.FeeLimit) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RefBlockBytes.Length != 0) hash ^= RefBlockBytes.GetHashCode();
          if (RefBlockNum != 0L) hash ^= RefBlockNum.GetHashCode();
          if (RefBlockHash.Length != 0) hash ^= RefBlockHash.GetHashCode();
          if (Expiration != 0L) hash ^= Expiration.GetHashCode();
          hash ^= auths_.GetHashCode();
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          hash ^= contract_.GetHashCode();
          if (Scripts.Length != 0) hash ^= Scripts.GetHashCode();
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          if (FeeLimit != 0L) hash ^= FeeLimit.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RefBlockBytes.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(RefBlockBytes);
          }
          if (RefBlockNum != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(RefBlockNum);
          }
          if (RefBlockHash.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(RefBlockHash);
          }
          if (Expiration != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(Expiration);
          }
          auths_.WriteTo(output, _repeated_auths_codec);
          if (Data.Length != 0) {
            output.WriteRawTag(82);
            output.WriteBytes(Data);
          }
          contract_.WriteTo(output, _repeated_contract_codec);
          if (Scripts.Length != 0) {
            output.WriteRawTag(98);
            output.WriteBytes(Scripts);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(Timestamp);
          }
          if (FeeLimit != 0L) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(FeeLimit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RefBlockBytes.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(RefBlockBytes);
          }
          if (RefBlockNum != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefBlockNum);
          }
          if (RefBlockHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(RefBlockHash);
          }
          if (Expiration != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
          }
          size += auths_.CalculateSize(_repeated_auths_codec);
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          size += contract_.CalculateSize(_repeated_contract_codec);
          if (Scripts.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Scripts);
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (FeeLimit != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(FeeLimit);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(raw other) {
          if (other == null) {
            return;
          }
          if (other.RefBlockBytes.Length != 0) {
            RefBlockBytes = other.RefBlockBytes;
          }
          if (other.RefBlockNum != 0L) {
            RefBlockNum = other.RefBlockNum;
          }
          if (other.RefBlockHash.Length != 0) {
            RefBlockHash = other.RefBlockHash;
          }
          if (other.Expiration != 0L) {
            Expiration = other.Expiration;
          }
          auths_.Add(other.auths_);
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          contract_.Add(other.contract_);
          if (other.Scripts.Length != 0) {
            Scripts = other.Scripts;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
          if (other.FeeLimit != 0L) {
            FeeLimit = other.FeeLimit;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                RefBlockBytes = input.ReadBytes();
                break;
              }
              case 24: {
                RefBlockNum = input.ReadInt64();
                break;
              }
              case 34: {
                RefBlockHash = input.ReadBytes();
                break;
              }
              case 64: {
                Expiration = input.ReadInt64();
                break;
              }
              case 74: {
                auths_.AddEntriesFrom(input, _repeated_auths_codec);
                break;
              }
              case 82: {
                Data = input.ReadBytes();
                break;
              }
              case 90: {
                contract_.AddEntriesFrom(input, _repeated_contract_codec);
                break;
              }
              case 98: {
                Scripts = input.ReadBytes();
                break;
              }
              case 112: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 144: {
                FeeLimit = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TransactionInfo : pb::IMessage<TransactionInfo> {
    private static readonly pb::MessageParser<TransactionInfo> _parser = new pb::MessageParser<TransactionInfo>(() => new TransactionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo(TransactionInfo other) : this() {
      id_ = other.id_;
      fee_ = other.fee_;
      blockNumber_ = other.blockNumber_;
      blockTimeStamp_ = other.blockTimeStamp_;
      contractResult_ = other.contractResult_.Clone();
      contractAddress_ = other.contractAddress_;
      receipt_ = other.receipt_ != null ? other.receipt_.Clone() : null;
      log_ = other.log_.Clone();
      result_ = other.result_;
      resMessage_ = other.resMessage_;
      assetIssueID_ = other.assetIssueID_;
      withdrawAmount_ = other.withdrawAmount_;
      unfreezeAmount_ = other.unfreezeAmount_;
      internalTransactions_ = other.internalTransactions_.Clone();
      exchangeReceivedAmount_ = other.exchangeReceivedAmount_;
      exchangeInjectAnotherAmount_ = other.exchangeInjectAnotherAmount_;
      exchangeWithdrawAnotherAmount_ = other.exchangeWithdrawAnotherAmount_;
      exchangeId_ = other.exchangeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo Clone() {
      return new TransactionInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 2;
    private long fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "blockNumber" field.</summary>
    public const int BlockNumberFieldNumber = 3;
    private long blockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "blockTimeStamp" field.</summary>
    public const int BlockTimeStampFieldNumber = 4;
    private long blockTimeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockTimeStamp {
      get { return blockTimeStamp_; }
      set {
        blockTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "contractResult" field.</summary>
    public const int ContractResultFieldNumber = 5;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_contractResult_codec
        = pb::FieldCodec.ForBytes(42);
    private readonly pbc::RepeatedField<pb::ByteString> contractResult_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> ContractResult {
      get { return contractResult_; }
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 6;
    private pb::ByteString contractAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receipt" field.</summary>
    public const int ReceiptFieldNumber = 7;
    private global::Protocol.ResourceReceipt receipt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ResourceReceipt Receipt {
      get { return receipt_; }
      set {
        receipt_ = value;
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Protocol.TransactionInfo.Types.Log> _repeated_log_codec
        = pb::FieldCodec.ForMessage(66, global::Protocol.TransactionInfo.Types.Log.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TransactionInfo.Types.Log> log_ = new pbc::RepeatedField<global::Protocol.TransactionInfo.Types.Log>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TransactionInfo.Types.Log> Log {
      get { return log_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 9;
    private global::Protocol.TransactionInfo.Types.code result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TransactionInfo.Types.code Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "resMessage" field.</summary>
    public const int ResMessageFieldNumber = 10;
    private pb::ByteString resMessage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResMessage {
      get { return resMessage_; }
      set {
        resMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assetIssueID" field.</summary>
    public const int AssetIssueIDFieldNumber = 14;
    private string assetIssueID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetIssueID {
      get { return assetIssueID_; }
      set {
        assetIssueID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "withdraw_amount" field.</summary>
    public const int WithdrawAmountFieldNumber = 15;
    private long withdrawAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WithdrawAmount {
      get { return withdrawAmount_; }
      set {
        withdrawAmount_ = value;
      }
    }

    /// <summary>Field number for the "unfreeze_amount" field.</summary>
    public const int UnfreezeAmountFieldNumber = 16;
    private long unfreezeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnfreezeAmount {
      get { return unfreezeAmount_; }
      set {
        unfreezeAmount_ = value;
      }
    }

    /// <summary>Field number for the "internal_transactions" field.</summary>
    public const int InternalTransactionsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Protocol.InternalTransaction> _repeated_internalTransactions_codec
        = pb::FieldCodec.ForMessage(138, global::Protocol.InternalTransaction.Parser);
    private readonly pbc::RepeatedField<global::Protocol.InternalTransaction> internalTransactions_ = new pbc::RepeatedField<global::Protocol.InternalTransaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.InternalTransaction> InternalTransactions {
      get { return internalTransactions_; }
    }

    /// <summary>Field number for the "exchange_received_amount" field.</summary>
    public const int ExchangeReceivedAmountFieldNumber = 18;
    private long exchangeReceivedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeReceivedAmount {
      get { return exchangeReceivedAmount_; }
      set {
        exchangeReceivedAmount_ = value;
      }
    }

    /// <summary>Field number for the "exchange_inject_another_amount" field.</summary>
    public const int ExchangeInjectAnotherAmountFieldNumber = 19;
    private long exchangeInjectAnotherAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeInjectAnotherAmount {
      get { return exchangeInjectAnotherAmount_; }
      set {
        exchangeInjectAnotherAmount_ = value;
      }
    }

    /// <summary>Field number for the "exchange_withdraw_another_amount" field.</summary>
    public const int ExchangeWithdrawAnotherAmountFieldNumber = 20;
    private long exchangeWithdrawAnotherAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeWithdrawAnotherAmount {
      get { return exchangeWithdrawAnotherAmount_; }
      set {
        exchangeWithdrawAnotherAmount_ = value;
      }
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 21;
    private long exchangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Fee != other.Fee) return false;
      if (BlockNumber != other.BlockNumber) return false;
      if (BlockTimeStamp != other.BlockTimeStamp) return false;
      if(!contractResult_.Equals(other.contractResult_)) return false;
      if (ContractAddress != other.ContractAddress) return false;
      if (!object.Equals(Receipt, other.Receipt)) return false;
      if(!log_.Equals(other.log_)) return false;
      if (Result != other.Result) return false;
      if (ResMessage != other.ResMessage) return false;
      if (AssetIssueID != other.AssetIssueID) return false;
      if (WithdrawAmount != other.WithdrawAmount) return false;
      if (UnfreezeAmount != other.UnfreezeAmount) return false;
      if(!internalTransactions_.Equals(other.internalTransactions_)) return false;
      if (ExchangeReceivedAmount != other.ExchangeReceivedAmount) return false;
      if (ExchangeInjectAnotherAmount != other.ExchangeInjectAnotherAmount) return false;
      if (ExchangeWithdrawAnotherAmount != other.ExchangeWithdrawAnotherAmount) return false;
      if (ExchangeId != other.ExchangeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (BlockTimeStamp != 0L) hash ^= BlockTimeStamp.GetHashCode();
      hash ^= contractResult_.GetHashCode();
      if (ContractAddress.Length != 0) hash ^= ContractAddress.GetHashCode();
      if (receipt_ != null) hash ^= Receipt.GetHashCode();
      hash ^= log_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ResMessage.Length != 0) hash ^= ResMessage.GetHashCode();
      if (AssetIssueID.Length != 0) hash ^= AssetIssueID.GetHashCode();
      if (WithdrawAmount != 0L) hash ^= WithdrawAmount.GetHashCode();
      if (UnfreezeAmount != 0L) hash ^= UnfreezeAmount.GetHashCode();
      hash ^= internalTransactions_.GetHashCode();
      if (ExchangeReceivedAmount != 0L) hash ^= ExchangeReceivedAmount.GetHashCode();
      if (ExchangeInjectAnotherAmount != 0L) hash ^= ExchangeInjectAnotherAmount.GetHashCode();
      if (ExchangeWithdrawAnotherAmount != 0L) hash ^= ExchangeWithdrawAnotherAmount.GetHashCode();
      if (ExchangeId != 0L) hash ^= ExchangeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (Fee != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Fee);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockNumber);
      }
      if (BlockTimeStamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BlockTimeStamp);
      }
      contractResult_.WriteTo(output, _repeated_contractResult_codec);
      if (ContractAddress.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ContractAddress);
      }
      if (receipt_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Receipt);
      }
      log_.WriteTo(output, _repeated_log_codec);
      if (Result != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Result);
      }
      if (ResMessage.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(ResMessage);
      }
      if (AssetIssueID.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AssetIssueID);
      }
      if (WithdrawAmount != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(WithdrawAmount);
      }
      if (UnfreezeAmount != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(UnfreezeAmount);
      }
      internalTransactions_.WriteTo(output, _repeated_internalTransactions_codec);
      if (ExchangeReceivedAmount != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(ExchangeReceivedAmount);
      }
      if (ExchangeInjectAnotherAmount != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(ExchangeInjectAnotherAmount);
      }
      if (ExchangeWithdrawAnotherAmount != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(ExchangeWithdrawAnotherAmount);
      }
      if (ExchangeId != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(ExchangeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (BlockTimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockTimeStamp);
      }
      size += contractResult_.CalculateSize(_repeated_contractResult_codec);
      if (ContractAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContractAddress);
      }
      if (receipt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receipt);
      }
      size += log_.CalculateSize(_repeated_log_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (ResMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResMessage);
      }
      if (AssetIssueID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetIssueID);
      }
      if (WithdrawAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WithdrawAmount);
      }
      if (UnfreezeAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UnfreezeAmount);
      }
      size += internalTransactions_.CalculateSize(_repeated_internalTransactions_codec);
      if (ExchangeReceivedAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeReceivedAmount);
      }
      if (ExchangeInjectAnotherAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeInjectAnotherAmount);
      }
      if (ExchangeWithdrawAnotherAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeWithdrawAnotherAmount);
      }
      if (ExchangeId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExchangeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      if (other.BlockTimeStamp != 0L) {
        BlockTimeStamp = other.BlockTimeStamp;
      }
      contractResult_.Add(other.contractResult_);
      if (other.ContractAddress.Length != 0) {
        ContractAddress = other.ContractAddress;
      }
      if (other.receipt_ != null) {
        if (receipt_ == null) {
          Receipt = new global::Protocol.ResourceReceipt();
        }
        Receipt.MergeFrom(other.Receipt);
      }
      log_.Add(other.log_);
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ResMessage.Length != 0) {
        ResMessage = other.ResMessage;
      }
      if (other.AssetIssueID.Length != 0) {
        AssetIssueID = other.AssetIssueID;
      }
      if (other.WithdrawAmount != 0L) {
        WithdrawAmount = other.WithdrawAmount;
      }
      if (other.UnfreezeAmount != 0L) {
        UnfreezeAmount = other.UnfreezeAmount;
      }
      internalTransactions_.Add(other.internalTransactions_);
      if (other.ExchangeReceivedAmount != 0L) {
        ExchangeReceivedAmount = other.ExchangeReceivedAmount;
      }
      if (other.ExchangeInjectAnotherAmount != 0L) {
        ExchangeInjectAnotherAmount = other.ExchangeInjectAnotherAmount;
      }
      if (other.ExchangeWithdrawAnotherAmount != 0L) {
        ExchangeWithdrawAnotherAmount = other.ExchangeWithdrawAnotherAmount;
      }
      if (other.ExchangeId != 0L) {
        ExchangeId = other.ExchangeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            Fee = input.ReadInt64();
            break;
          }
          case 24: {
            BlockNumber = input.ReadInt64();
            break;
          }
          case 32: {
            BlockTimeStamp = input.ReadInt64();
            break;
          }
          case 42: {
            contractResult_.AddEntriesFrom(input, _repeated_contractResult_codec);
            break;
          }
          case 50: {
            ContractAddress = input.ReadBytes();
            break;
          }
          case 58: {
            if (receipt_ == null) {
              Receipt = new global::Protocol.ResourceReceipt();
            }
            input.ReadMessage(Receipt);
            break;
          }
          case 66: {
            log_.AddEntriesFrom(input, _repeated_log_codec);
            break;
          }
          case 72: {
            Result = (global::Protocol.TransactionInfo.Types.code) input.ReadEnum();
            break;
          }
          case 82: {
            ResMessage = input.ReadBytes();
            break;
          }
          case 114: {
            AssetIssueID = input.ReadString();
            break;
          }
          case 120: {
            WithdrawAmount = input.ReadInt64();
            break;
          }
          case 128: {
            UnfreezeAmount = input.ReadInt64();
            break;
          }
          case 138: {
            internalTransactions_.AddEntriesFrom(input, _repeated_internalTransactions_codec);
            break;
          }
          case 144: {
            ExchangeReceivedAmount = input.ReadInt64();
            break;
          }
          case 152: {
            ExchangeInjectAnotherAmount = input.ReadInt64();
            break;
          }
          case 160: {
            ExchangeWithdrawAnotherAmount = input.ReadInt64();
            break;
          }
          case 168: {
            ExchangeId = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum code {
        [pbr::OriginalName("SUCESS")] Sucess = 0,
        [pbr::OriginalName("FAILED")] Failed = 1,
      }

      public sealed partial class Log : pb::IMessage<Log> {
        private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Log> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.TransactionInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Log() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Log(Log other) : this() {
          address_ = other.address_;
          topics_ = other.topics_.Clone();
          data_ = other.data_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Log Clone() {
          return new Log(this);
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 1;
        private pb::ByteString address_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Address {
          get { return address_; }
          set {
            address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "topics" field.</summary>
        public const int TopicsFieldNumber = 2;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_topics_codec
            = pb::FieldCodec.ForBytes(18);
        private readonly pbc::RepeatedField<pb::ByteString> topics_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> Topics {
          get { return topics_; }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 3;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Log);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Log other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Address != other.Address) return false;
          if(!topics_.Equals(other.topics_)) return false;
          if (Data != other.Data) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Address.Length != 0) hash ^= Address.GetHashCode();
          hash ^= topics_.GetHashCode();
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Address.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Address);
          }
          topics_.WriteTo(output, _repeated_topics_codec);
          if (Data.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Data);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Address.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
          }
          size += topics_.CalculateSize(_repeated_topics_codec);
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Log other) {
          if (other == null) {
            return;
          }
          if (other.Address.Length != 0) {
            Address = other.Address;
          }
          topics_.Add(other.topics_);
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Address = input.ReadBytes();
                break;
              }
              case 18: {
                topics_.AddEntriesFrom(input, _repeated_topics_codec);
                break;
              }
              case 26: {
                Data = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Transactions : pb::IMessage<Transactions> {
    private static readonly pb::MessageParser<Transactions> _parser = new pb::MessageParser<Transactions>(() => new Transactions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transactions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transactions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transactions(Transactions other) : this() {
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transactions Clone() {
      return new Transactions(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int Transactions_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Transaction> transactions_ = new pbc::RepeatedField<global::Protocol.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Transaction> Transactions_ {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transactions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transactions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transactions other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionSign : pb::IMessage<TransactionSign> {
    private static readonly pb::MessageParser<TransactionSign> _parser = new pb::MessageParser<TransactionSign>(() => new TransactionSign());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionSign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSign(TransactionSign other) : this() {
      transaction_ = other.transaction_ != null ? other.transaction_.Clone() : null;
      privateKey_ = other.privateKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSign Clone() {
      return new TransactionSign(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private global::Protocol.Transaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    /// <summary>Field number for the "privateKey" field.</summary>
    public const int PrivateKeyFieldNumber = 2;
    private pb::ByteString privateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionSign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionSign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if (PrivateKey != other.PrivateKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transaction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transaction);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PrivateKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionSign other) {
      if (other == null) {
        return;
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          Transaction = new global::Protocol.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transaction_ == null) {
              Transaction = new global::Protocol.Transaction();
            }
            input.ReadMessage(Transaction);
            break;
          }
          case 18: {
            PrivateKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockHeader : pb::IMessage<BlockHeader> {
    private static readonly pb::MessageParser<BlockHeader> _parser = new pb::MessageParser<BlockHeader>(() => new BlockHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader(BlockHeader other) : this() {
      rawData_ = other.rawData_ != null ? other.rawData_.Clone() : null;
      witnessSignature_ = other.witnessSignature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader Clone() {
      return new BlockHeader(this);
    }

    /// <summary>Field number for the "raw_data" field.</summary>
    public const int RawDataFieldNumber = 1;
    private global::Protocol.BlockHeader.Types.raw rawData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BlockHeader.Types.raw RawData {
      get { return rawData_; }
      set {
        rawData_ = value;
      }
    }

    /// <summary>Field number for the "witness_signature" field.</summary>
    public const int WitnessSignatureFieldNumber = 2;
    private pb::ByteString witnessSignature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WitnessSignature {
      get { return witnessSignature_; }
      set {
        witnessSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RawData, other.RawData)) return false;
      if (WitnessSignature != other.WitnessSignature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rawData_ != null) hash ^= RawData.GetHashCode();
      if (WitnessSignature.Length != 0) hash ^= WitnessSignature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rawData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RawData);
      }
      if (WitnessSignature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(WitnessSignature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rawData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawData);
      }
      if (WitnessSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WitnessSignature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockHeader other) {
      if (other == null) {
        return;
      }
      if (other.rawData_ != null) {
        if (rawData_ == null) {
          RawData = new global::Protocol.BlockHeader.Types.raw();
        }
        RawData.MergeFrom(other.RawData);
      }
      if (other.WitnessSignature.Length != 0) {
        WitnessSignature = other.WitnessSignature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rawData_ == null) {
              RawData = new global::Protocol.BlockHeader.Types.raw();
            }
            input.ReadMessage(RawData);
            break;
          }
          case 18: {
            WitnessSignature = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class raw : pb::IMessage<raw> {
        private static readonly pb::MessageParser<raw> _parser = new pb::MessageParser<raw>(() => new raw());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<raw> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.BlockHeader.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw(raw other) : this() {
          timestamp_ = other.timestamp_;
          txTrieRoot_ = other.txTrieRoot_;
          parentHash_ = other.parentHash_;
          number_ = other.number_;
          witnessId_ = other.witnessId_;
          witnessAddress_ = other.witnessAddress_;
          version_ = other.version_;
          accountStateRoot_ = other.accountStateRoot_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw Clone() {
          return new raw(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 1;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        /// <summary>Field number for the "txTrieRoot" field.</summary>
        public const int TxTrieRootFieldNumber = 2;
        private pb::ByteString txTrieRoot_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TxTrieRoot {
          get { return txTrieRoot_; }
          set {
            txTrieRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "parentHash" field.</summary>
        public const int ParentHashFieldNumber = 3;
        private pb::ByteString parentHash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ParentHash {
          get { return parentHash_; }
          set {
            parentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 7;
        private long number_;
        /// <summary>
        ///bytes nonce = 5;
        ///bytes difficulty = 6;
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Number {
          get { return number_; }
          set {
            number_ = value;
          }
        }

        /// <summary>Field number for the "witness_id" field.</summary>
        public const int WitnessIdFieldNumber = 8;
        private long witnessId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long WitnessId {
          get { return witnessId_; }
          set {
            witnessId_ = value;
          }
        }

        /// <summary>Field number for the "witness_address" field.</summary>
        public const int WitnessAddressFieldNumber = 9;
        private pb::ByteString witnessAddress_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString WitnessAddress {
          get { return witnessAddress_; }
          set {
            witnessAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 10;
        private int version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        /// <summary>Field number for the "accountStateRoot" field.</summary>
        public const int AccountStateRootFieldNumber = 11;
        private pb::ByteString accountStateRoot_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString AccountStateRoot {
          get { return accountStateRoot_; }
          set {
            accountStateRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as raw);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(raw other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Timestamp != other.Timestamp) return false;
          if (TxTrieRoot != other.TxTrieRoot) return false;
          if (ParentHash != other.ParentHash) return false;
          if (Number != other.Number) return false;
          if (WitnessId != other.WitnessId) return false;
          if (WitnessAddress != other.WitnessAddress) return false;
          if (Version != other.Version) return false;
          if (AccountStateRoot != other.AccountStateRoot) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          if (TxTrieRoot.Length != 0) hash ^= TxTrieRoot.GetHashCode();
          if (ParentHash.Length != 0) hash ^= ParentHash.GetHashCode();
          if (Number != 0L) hash ^= Number.GetHashCode();
          if (WitnessId != 0L) hash ^= WitnessId.GetHashCode();
          if (WitnessAddress.Length != 0) hash ^= WitnessAddress.GetHashCode();
          if (Version != 0) hash ^= Version.GetHashCode();
          if (AccountStateRoot.Length != 0) hash ^= AccountStateRoot.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Timestamp != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Timestamp);
          }
          if (TxTrieRoot.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(TxTrieRoot);
          }
          if (ParentHash.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(ParentHash);
          }
          if (Number != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(Number);
          }
          if (WitnessId != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(WitnessId);
          }
          if (WitnessAddress.Length != 0) {
            output.WriteRawTag(74);
            output.WriteBytes(WitnessAddress);
          }
          if (Version != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(Version);
          }
          if (AccountStateRoot.Length != 0) {
            output.WriteRawTag(90);
            output.WriteBytes(AccountStateRoot);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (TxTrieRoot.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxTrieRoot);
          }
          if (ParentHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ParentHash);
          }
          if (Number != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
          }
          if (WitnessId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(WitnessId);
          }
          if (WitnessAddress.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(WitnessAddress);
          }
          if (Version != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
          }
          if (AccountStateRoot.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(AccountStateRoot);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(raw other) {
          if (other == null) {
            return;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
          if (other.TxTrieRoot.Length != 0) {
            TxTrieRoot = other.TxTrieRoot;
          }
          if (other.ParentHash.Length != 0) {
            ParentHash = other.ParentHash;
          }
          if (other.Number != 0L) {
            Number = other.Number;
          }
          if (other.WitnessId != 0L) {
            WitnessId = other.WitnessId;
          }
          if (other.WitnessAddress.Length != 0) {
            WitnessAddress = other.WitnessAddress;
          }
          if (other.Version != 0) {
            Version = other.Version;
          }
          if (other.AccountStateRoot.Length != 0) {
            AccountStateRoot = other.AccountStateRoot;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 18: {
                TxTrieRoot = input.ReadBytes();
                break;
              }
              case 26: {
                ParentHash = input.ReadBytes();
                break;
              }
              case 56: {
                Number = input.ReadInt64();
                break;
              }
              case 64: {
                WitnessId = input.ReadInt64();
                break;
              }
              case 74: {
                WitnessAddress = input.ReadBytes();
                break;
              }
              case 80: {
                Version = input.ReadInt32();
                break;
              }
              case 90: {
                AccountStateRoot = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// block
  /// </summary>
  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      transactions_ = other.transactions_.Clone();
      blockHeader_ = other.blockHeader_ != null ? other.blockHeader_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Transaction> transactions_ = new pbc::RepeatedField<global::Protocol.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Transaction> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "block_header" field.</summary>
    public const int BlockHeaderFieldNumber = 2;
    private global::Protocol.BlockHeader blockHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BlockHeader BlockHeader {
      get { return blockHeader_; }
      set {
        blockHeader_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      if (!object.Equals(BlockHeader, other.BlockHeader)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      if (blockHeader_ != null) hash ^= BlockHeader.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (blockHeader_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlockHeader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (blockHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockHeader);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      if (other.blockHeader_ != null) {
        if (blockHeader_ == null) {
          BlockHeader = new global::Protocol.BlockHeader();
        }
        BlockHeader.MergeFrom(other.BlockHeader);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 18: {
            if (blockHeader_ == null) {
              BlockHeader = new global::Protocol.BlockHeader();
            }
            input.ReadMessage(BlockHeader);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChainInventory : pb::IMessage<ChainInventory> {
    private static readonly pb::MessageParser<ChainInventory> _parser = new pb::MessageParser<ChainInventory>(() => new ChainInventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChainInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInventory(ChainInventory other) : this() {
      ids_ = other.ids_.Clone();
      remainNum_ = other.remainNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInventory Clone() {
      return new ChainInventory(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ChainInventory.Types.BlockId> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ChainInventory.Types.BlockId.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ChainInventory.Types.BlockId> ids_ = new pbc::RepeatedField<global::Protocol.ChainInventory.Types.BlockId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ChainInventory.Types.BlockId> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "remain_num" field.</summary>
    public const int RemainNumFieldNumber = 2;
    private long remainNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemainNum {
      get { return remainNum_; }
      set {
        remainNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChainInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChainInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if (RemainNum != other.RemainNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (RemainNum != 0L) hash ^= RemainNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (RemainNum != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RemainNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (RemainNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChainInventory other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      if (other.RemainNum != 0L) {
        RemainNum = other.RemainNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            RemainNum = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChainInventory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class BlockId : pb::IMessage<BlockId> {
        private static readonly pb::MessageParser<BlockId> _parser = new pb::MessageParser<BlockId>(() => new BlockId());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.ChainInventory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId(BlockId other) : this() {
          hash_ = other.hash_;
          number_ = other.number_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId Clone() {
          return new BlockId(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;
        private pb::ByteString hash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash {
          get { return hash_; }
          set {
            hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 2;
        private long number_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Number {
          get { return number_; }
          set {
            number_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BlockId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hash != other.Hash) return false;
          if (Number != other.Number) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hash.Length != 0) hash ^= Hash.GetHashCode();
          if (Number != 0L) hash ^= Number.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Hash);
          }
          if (Number != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Number);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
          }
          if (Number != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockId other) {
          if (other == null) {
            return;
          }
          if (other.Hash.Length != 0) {
            Hash = other.Hash;
          }
          if (other.Number != 0L) {
            Number = other.Number;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Hash = input.ReadBytes();
                break;
              }
              case 16: {
                Number = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Inventory
  /// </summary>
  public sealed partial class BlockInventory : pb::IMessage<BlockInventory> {
    private static readonly pb::MessageParser<BlockInventory> _parser = new pb::MessageParser<BlockInventory>(() => new BlockInventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInventory(BlockInventory other) : this() {
      ids_ = other.ids_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInventory Clone() {
      return new BlockInventory(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.BlockInventory.Types.BlockId> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.BlockInventory.Types.BlockId.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BlockInventory.Types.BlockId> ids_ = new pbc::RepeatedField<global::Protocol.BlockInventory.Types.BlockId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BlockInventory.Types.BlockId> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Protocol.BlockInventory.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BlockInventory.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockInventory other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            Type = (global::Protocol.BlockInventory.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockInventory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("SYNC")] Sync = 0,
        [pbr::OriginalName("ADVTISE")] Advtise = 1,
        [pbr::OriginalName("FETCH")] Fetch = 2,
      }

      public sealed partial class BlockId : pb::IMessage<BlockId> {
        private static readonly pb::MessageParser<BlockId> _parser = new pb::MessageParser<BlockId>(() => new BlockId());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.BlockInventory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId(BlockId other) : this() {
          hash_ = other.hash_;
          number_ = other.number_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId Clone() {
          return new BlockId(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;
        private pb::ByteString hash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash {
          get { return hash_; }
          set {
            hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 2;
        private long number_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Number {
          get { return number_; }
          set {
            number_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BlockId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hash != other.Hash) return false;
          if (Number != other.Number) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hash.Length != 0) hash ^= Hash.GetHashCode();
          if (Number != 0L) hash ^= Number.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Hash);
          }
          if (Number != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Number);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
          }
          if (Number != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockId other) {
          if (other == null) {
            return;
          }
          if (other.Hash.Length != 0) {
            Hash = other.Hash;
          }
          if (other.Number != 0L) {
            Number = other.Number;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Hash = input.ReadBytes();
                break;
              }
              case 16: {
                Number = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Inventory : pb::IMessage<Inventory> {
    private static readonly pb::MessageParser<Inventory> _parser = new pb::MessageParser<Inventory>(() => new Inventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Inventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory(Inventory other) : this() {
      type_ = other.type_;
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory Clone() {
      return new Inventory(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protocol.Inventory.Types.InventoryType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Inventory.Types.InventoryType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ids_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> ids_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Inventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Inventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Inventory other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Protocol.Inventory.Types.InventoryType) input.ReadEnum();
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Inventory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InventoryType {
        [pbr::OriginalName("TRX")] Trx = 0,
        [pbr::OriginalName("BLOCK")] Block = 1,
      }

    }
    #endregion

  }

  public sealed partial class Items : pb::IMessage<Items> {
    private static readonly pb::MessageParser<Items> _parser = new pb::MessageParser<Items>(() => new Items());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Items> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items(Items other) : this() {
      type_ = other.type_;
      blocks_ = other.blocks_.Clone();
      blockHeaders_ = other.blockHeaders_.Clone();
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items Clone() {
      return new Items(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protocol.Items.Types.ItemType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Items.Types.ItemType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.Block> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.Block.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Block> blocks_ = new pbc::RepeatedField<global::Protocol.Block>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Block> Blocks {
      get { return blocks_; }
    }

    /// <summary>Field number for the "block_headers" field.</summary>
    public const int BlockHeadersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.BlockHeader> _repeated_blockHeaders_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.BlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BlockHeader> blockHeaders_ = new pbc::RepeatedField<global::Protocol.BlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BlockHeader> BlockHeaders {
      get { return blockHeaders_; }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Transaction> transactions_ = new pbc::RepeatedField<global::Protocol.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Items);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Items other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      if(!blockHeaders_.Equals(other.blockHeaders_)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= blocks_.GetHashCode();
      hash ^= blockHeaders_.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      blocks_.WriteTo(output, _repeated_blocks_codec);
      blockHeaders_.WriteTo(output, _repeated_blockHeaders_codec);
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      size += blockHeaders_.CalculateSize(_repeated_blockHeaders_codec);
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Items other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      blocks_.Add(other.blocks_);
      blockHeaders_.Add(other.blockHeaders_);
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Protocol.Items.Types.ItemType) input.ReadEnum();
            break;
          }
          case 18: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
          case 26: {
            blockHeaders_.AddEntriesFrom(input, _repeated_blockHeaders_codec);
            break;
          }
          case 34: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Items message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ItemType {
        [pbr::OriginalName("ERR")] Err = 0,
        [pbr::OriginalName("TRX")] Trx = 1,
        [pbr::OriginalName("BLOCK")] Block = 2,
        [pbr::OriginalName("BLOCKHEADER")] Blockheader = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// DynamicProperties
  /// </summary>
  public sealed partial class DynamicProperties : pb::IMessage<DynamicProperties> {
    private static readonly pb::MessageParser<DynamicProperties> _parser = new pb::MessageParser<DynamicProperties>(() => new DynamicProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicProperties(DynamicProperties other) : this() {
      lastSolidityBlockNum_ = other.lastSolidityBlockNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicProperties Clone() {
      return new DynamicProperties(this);
    }

    /// <summary>Field number for the "last_solidity_block_num" field.</summary>
    public const int LastSolidityBlockNumFieldNumber = 1;
    private long lastSolidityBlockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSolidityBlockNum {
      get { return lastSolidityBlockNum_; }
      set {
        lastSolidityBlockNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastSolidityBlockNum != other.LastSolidityBlockNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastSolidityBlockNum != 0L) hash ^= LastSolidityBlockNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastSolidityBlockNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastSolidityBlockNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastSolidityBlockNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSolidityBlockNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicProperties other) {
      if (other == null) {
        return;
      }
      if (other.LastSolidityBlockNum != 0L) {
        LastSolidityBlockNum = other.LastSolidityBlockNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastSolidityBlockNum = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisconnectMessage : pb::IMessage<DisconnectMessage> {
    private static readonly pb::MessageParser<DisconnectMessage> _parser = new pb::MessageParser<DisconnectMessage>(() => new DisconnectMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectMessage(DisconnectMessage other) : this() {
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectMessage Clone() {
      return new DisconnectMessage(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::Protocol.ReasonCode reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReasonCode Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectMessage other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reason = (global::Protocol.ReasonCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HelloMessage : pb::IMessage<HelloMessage> {
    private static readonly pb::MessageParser<HelloMessage> _parser = new pb::MessageParser<HelloMessage>(() => new HelloMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelloMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloMessage(HelloMessage other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      version_ = other.version_;
      timestamp_ = other.timestamp_;
      genesisBlockId_ = other.genesisBlockId_ != null ? other.genesisBlockId_.Clone() : null;
      solidBlockId_ = other.solidBlockId_ != null ? other.solidBlockId_.Clone() : null;
      headBlockId_ = other.headBlockId_ != null ? other.headBlockId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloMessage Clone() {
      return new HelloMessage(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Protocol.Endpoint from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Endpoint From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "genesisBlockId" field.</summary>
    public const int GenesisBlockIdFieldNumber = 4;
    private global::Protocol.HelloMessage.Types.BlockId genesisBlockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HelloMessage.Types.BlockId GenesisBlockId {
      get { return genesisBlockId_; }
      set {
        genesisBlockId_ = value;
      }
    }

    /// <summary>Field number for the "solidBlockId" field.</summary>
    public const int SolidBlockIdFieldNumber = 5;
    private global::Protocol.HelloMessage.Types.BlockId solidBlockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HelloMessage.Types.BlockId SolidBlockId {
      get { return solidBlockId_; }
      set {
        solidBlockId_ = value;
      }
    }

    /// <summary>Field number for the "headBlockId" field.</summary>
    public const int HeadBlockIdFieldNumber = 6;
    private global::Protocol.HelloMessage.Types.BlockId headBlockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.HelloMessage.Types.BlockId HeadBlockId {
      get { return headBlockId_; }
      set {
        headBlockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelloMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelloMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (Version != other.Version) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(GenesisBlockId, other.GenesisBlockId)) return false;
      if (!object.Equals(SolidBlockId, other.SolidBlockId)) return false;
      if (!object.Equals(HeadBlockId, other.HeadBlockId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (genesisBlockId_ != null) hash ^= GenesisBlockId.GetHashCode();
      if (solidBlockId_ != null) hash ^= SolidBlockId.GetHashCode();
      if (headBlockId_ != null) hash ^= HeadBlockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (genesisBlockId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GenesisBlockId);
      }
      if (solidBlockId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SolidBlockId);
      }
      if (headBlockId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(HeadBlockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (genesisBlockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenesisBlockId);
      }
      if (solidBlockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolidBlockId);
      }
      if (headBlockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeadBlockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelloMessage other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Protocol.Endpoint();
        }
        From.MergeFrom(other.From);
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.genesisBlockId_ != null) {
        if (genesisBlockId_ == null) {
          GenesisBlockId = new global::Protocol.HelloMessage.Types.BlockId();
        }
        GenesisBlockId.MergeFrom(other.GenesisBlockId);
      }
      if (other.solidBlockId_ != null) {
        if (solidBlockId_ == null) {
          SolidBlockId = new global::Protocol.HelloMessage.Types.BlockId();
        }
        SolidBlockId.MergeFrom(other.SolidBlockId);
      }
      if (other.headBlockId_ != null) {
        if (headBlockId_ == null) {
          HeadBlockId = new global::Protocol.HelloMessage.Types.BlockId();
        }
        HeadBlockId.MergeFrom(other.HeadBlockId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::Protocol.Endpoint();
            }
            input.ReadMessage(From);
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            if (genesisBlockId_ == null) {
              GenesisBlockId = new global::Protocol.HelloMessage.Types.BlockId();
            }
            input.ReadMessage(GenesisBlockId);
            break;
          }
          case 42: {
            if (solidBlockId_ == null) {
              SolidBlockId = new global::Protocol.HelloMessage.Types.BlockId();
            }
            input.ReadMessage(SolidBlockId);
            break;
          }
          case 50: {
            if (headBlockId_ == null) {
              HeadBlockId = new global::Protocol.HelloMessage.Types.BlockId();
            }
            input.ReadMessage(HeadBlockId);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HelloMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class BlockId : pb::IMessage<BlockId> {
        private static readonly pb::MessageParser<BlockId> _parser = new pb::MessageParser<BlockId>(() => new BlockId());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.HelloMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId(BlockId other) : this() {
          hash_ = other.hash_;
          number_ = other.number_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId Clone() {
          return new BlockId(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;
        private pb::ByteString hash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash {
          get { return hash_; }
          set {
            hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 2;
        private long number_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Number {
          get { return number_; }
          set {
            number_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BlockId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hash != other.Hash) return false;
          if (Number != other.Number) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hash.Length != 0) hash ^= Hash.GetHashCode();
          if (Number != 0L) hash ^= Number.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Hash);
          }
          if (Number != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Number);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
          }
          if (Number != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockId other) {
          if (other == null) {
            return;
          }
          if (other.Hash.Length != 0) {
            Hash = other.Hash;
          }
          if (other.Number != 0L) {
            Number = other.Number;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Hash = input.ReadBytes();
                break;
              }
              case 16: {
                Number = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SmartContract : pb::IMessage<SmartContract> {
    private static readonly pb::MessageParser<SmartContract> _parser = new pb::MessageParser<SmartContract>(() => new SmartContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContract(SmartContract other) : this() {
      originAddress_ = other.originAddress_;
      contractAddress_ = other.contractAddress_;
      abi_ = other.abi_ != null ? other.abi_.Clone() : null;
      bytecode_ = other.bytecode_;
      callValue_ = other.callValue_;
      consumeUserResourcePercent_ = other.consumeUserResourcePercent_;
      name_ = other.name_;
      originEnergyLimit_ = other.originEnergyLimit_;
      codeHash_ = other.codeHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContract Clone() {
      return new SmartContract(this);
    }

    /// <summary>Field number for the "origin_address" field.</summary>
    public const int OriginAddressFieldNumber = 1;
    private pb::ByteString originAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginAddress {
      get { return originAddress_; }
      set {
        originAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 2;
    private pb::ByteString contractAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abi" field.</summary>
    public const int AbiFieldNumber = 3;
    private global::Protocol.SmartContract.Types.ABI abi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.SmartContract.Types.ABI Abi {
      get { return abi_; }
      set {
        abi_ = value;
      }
    }

    /// <summary>Field number for the "bytecode" field.</summary>
    public const int BytecodeFieldNumber = 4;
    private pb::ByteString bytecode_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bytecode {
      get { return bytecode_; }
      set {
        bytecode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "call_value" field.</summary>
    public const int CallValueFieldNumber = 5;
    private long callValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CallValue {
      get { return callValue_; }
      set {
        callValue_ = value;
      }
    }

    /// <summary>Field number for the "consume_user_resource_percent" field.</summary>
    public const int ConsumeUserResourcePercentFieldNumber = 6;
    private long consumeUserResourcePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConsumeUserResourcePercent {
      get { return consumeUserResourcePercent_; }
      set {
        consumeUserResourcePercent_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "origin_energy_limit" field.</summary>
    public const int OriginEnergyLimitFieldNumber = 8;
    private long originEnergyLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OriginEnergyLimit {
      get { return originEnergyLimit_; }
      set {
        originEnergyLimit_ = value;
      }
    }

    /// <summary>Field number for the "code_hash" field.</summary>
    public const int CodeHashFieldNumber = 9;
    private pb::ByteString codeHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CodeHash {
      get { return codeHash_; }
      set {
        codeHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginAddress != other.OriginAddress) return false;
      if (ContractAddress != other.ContractAddress) return false;
      if (!object.Equals(Abi, other.Abi)) return false;
      if (Bytecode != other.Bytecode) return false;
      if (CallValue != other.CallValue) return false;
      if (ConsumeUserResourcePercent != other.ConsumeUserResourcePercent) return false;
      if (Name != other.Name) return false;
      if (OriginEnergyLimit != other.OriginEnergyLimit) return false;
      if (CodeHash != other.CodeHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginAddress.Length != 0) hash ^= OriginAddress.GetHashCode();
      if (ContractAddress.Length != 0) hash ^= ContractAddress.GetHashCode();
      if (abi_ != null) hash ^= Abi.GetHashCode();
      if (Bytecode.Length != 0) hash ^= Bytecode.GetHashCode();
      if (CallValue != 0L) hash ^= CallValue.GetHashCode();
      if (ConsumeUserResourcePercent != 0L) hash ^= ConsumeUserResourcePercent.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (OriginEnergyLimit != 0L) hash ^= OriginEnergyLimit.GetHashCode();
      if (CodeHash.Length != 0) hash ^= CodeHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(OriginAddress);
      }
      if (ContractAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ContractAddress);
      }
      if (abi_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Abi);
      }
      if (Bytecode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Bytecode);
      }
      if (CallValue != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CallValue);
      }
      if (ConsumeUserResourcePercent != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ConsumeUserResourcePercent);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (OriginEnergyLimit != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(OriginEnergyLimit);
      }
      if (CodeHash.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(CodeHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginAddress);
      }
      if (ContractAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContractAddress);
      }
      if (abi_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abi);
      }
      if (Bytecode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytecode);
      }
      if (CallValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CallValue);
      }
      if (ConsumeUserResourcePercent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConsumeUserResourcePercent);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (OriginEnergyLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OriginEnergyLimit);
      }
      if (CodeHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CodeHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartContract other) {
      if (other == null) {
        return;
      }
      if (other.OriginAddress.Length != 0) {
        OriginAddress = other.OriginAddress;
      }
      if (other.ContractAddress.Length != 0) {
        ContractAddress = other.ContractAddress;
      }
      if (other.abi_ != null) {
        if (abi_ == null) {
          Abi = new global::Protocol.SmartContract.Types.ABI();
        }
        Abi.MergeFrom(other.Abi);
      }
      if (other.Bytecode.Length != 0) {
        Bytecode = other.Bytecode;
      }
      if (other.CallValue != 0L) {
        CallValue = other.CallValue;
      }
      if (other.ConsumeUserResourcePercent != 0L) {
        ConsumeUserResourcePercent = other.ConsumeUserResourcePercent;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.OriginEnergyLimit != 0L) {
        OriginEnergyLimit = other.OriginEnergyLimit;
      }
      if (other.CodeHash.Length != 0) {
        CodeHash = other.CodeHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OriginAddress = input.ReadBytes();
            break;
          }
          case 18: {
            ContractAddress = input.ReadBytes();
            break;
          }
          case 26: {
            if (abi_ == null) {
              Abi = new global::Protocol.SmartContract.Types.ABI();
            }
            input.ReadMessage(Abi);
            break;
          }
          case 34: {
            Bytecode = input.ReadBytes();
            break;
          }
          case 40: {
            CallValue = input.ReadInt64();
            break;
          }
          case 48: {
            ConsumeUserResourcePercent = input.ReadInt64();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 64: {
            OriginEnergyLimit = input.ReadInt64();
            break;
          }
          case 74: {
            CodeHash = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SmartContract message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ABI : pb::IMessage<ABI> {
        private static readonly pb::MessageParser<ABI> _parser = new pb::MessageParser<ABI>(() => new ABI());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ABI> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.SmartContract.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI(ABI other) : this() {
          entrys_ = other.entrys_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ABI Clone() {
          return new ABI(this);
        }

        /// <summary>Field number for the "entrys" field.</summary>
        public const int EntrysFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Protocol.SmartContract.Types.ABI.Types.Entry> _repeated_entrys_codec
            = pb::FieldCodec.ForMessage(10, global::Protocol.SmartContract.Types.ABI.Types.Entry.Parser);
        private readonly pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry> entrys_ = new pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry> Entrys {
          get { return entrys_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ABI);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ABI other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!entrys_.Equals(other.entrys_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= entrys_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          entrys_.WriteTo(output, _repeated_entrys_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += entrys_.CalculateSize(_repeated_entrys_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ABI other) {
          if (other == null) {
            return;
          }
          entrys_.Add(other.entrys_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                entrys_.AddEntriesFrom(input, _repeated_entrys_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ABI message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Entry : pb::IMessage<Entry> {
            private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Entry> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protocol.SmartContract.Types.ABI.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Entry() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Entry(Entry other) : this() {
              anonymous_ = other.anonymous_;
              constant_ = other.constant_;
              name_ = other.name_;
              inputs_ = other.inputs_.Clone();
              outputs_ = other.outputs_.Clone();
              type_ = other.type_;
              payable_ = other.payable_;
              stateMutability_ = other.stateMutability_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Entry Clone() {
              return new Entry(this);
            }

            /// <summary>Field number for the "anonymous" field.</summary>
            public const int AnonymousFieldNumber = 1;
            private bool anonymous_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Anonymous {
              get { return anonymous_; }
              set {
                anonymous_ = value;
              }
            }

            /// <summary>Field number for the "constant" field.</summary>
            public const int ConstantFieldNumber = 2;
            private bool constant_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Constant {
              get { return constant_; }
              set {
                constant_ = value;
              }
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 3;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "inputs" field.</summary>
            public const int InputsFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param> _repeated_inputs_codec
                = pb::FieldCodec.ForMessage(34, global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param.Parser);
            private readonly pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param> inputs_ = new pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param> Inputs {
              get { return inputs_; }
            }

            /// <summary>Field number for the "outputs" field.</summary>
            public const int OutputsFieldNumber = 5;
            private static readonly pb::FieldCodec<global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param> _repeated_outputs_codec
                = pb::FieldCodec.ForMessage(42, global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param.Parser);
            private readonly pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param> outputs_ = new pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.Param> Outputs {
              get { return outputs_; }
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 6;
            private global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.EntryType type_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.EntryType Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "payable" field.</summary>
            public const int PayableFieldNumber = 7;
            private bool payable_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Payable {
              get { return payable_; }
              set {
                payable_ = value;
              }
            }

            /// <summary>Field number for the "stateMutability" field.</summary>
            public const int StateMutabilityFieldNumber = 8;
            private global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.StateMutabilityType stateMutability_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.StateMutabilityType StateMutability {
              get { return stateMutability_; }
              set {
                stateMutability_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Entry);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Entry other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Anonymous != other.Anonymous) return false;
              if (Constant != other.Constant) return false;
              if (Name != other.Name) return false;
              if(!inputs_.Equals(other.inputs_)) return false;
              if(!outputs_.Equals(other.outputs_)) return false;
              if (Type != other.Type) return false;
              if (Payable != other.Payable) return false;
              if (StateMutability != other.StateMutability) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Anonymous != false) hash ^= Anonymous.GetHashCode();
              if (Constant != false) hash ^= Constant.GetHashCode();
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              hash ^= inputs_.GetHashCode();
              hash ^= outputs_.GetHashCode();
              if (Type != 0) hash ^= Type.GetHashCode();
              if (Payable != false) hash ^= Payable.GetHashCode();
              if (StateMutability != 0) hash ^= StateMutability.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Anonymous != false) {
                output.WriteRawTag(8);
                output.WriteBool(Anonymous);
              }
              if (Constant != false) {
                output.WriteRawTag(16);
                output.WriteBool(Constant);
              }
              if (Name.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Name);
              }
              inputs_.WriteTo(output, _repeated_inputs_codec);
              outputs_.WriteTo(output, _repeated_outputs_codec);
              if (Type != 0) {
                output.WriteRawTag(48);
                output.WriteEnum((int) Type);
              }
              if (Payable != false) {
                output.WriteRawTag(56);
                output.WriteBool(Payable);
              }
              if (StateMutability != 0) {
                output.WriteRawTag(64);
                output.WriteEnum((int) StateMutability);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Anonymous != false) {
                size += 1 + 1;
              }
              if (Constant != false) {
                size += 1 + 1;
              }
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              size += inputs_.CalculateSize(_repeated_inputs_codec);
              size += outputs_.CalculateSize(_repeated_outputs_codec);
              if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (Payable != false) {
                size += 1 + 1;
              }
              if (StateMutability != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StateMutability);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Entry other) {
              if (other == null) {
                return;
              }
              if (other.Anonymous != false) {
                Anonymous = other.Anonymous;
              }
              if (other.Constant != false) {
                Constant = other.Constant;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              inputs_.Add(other.inputs_);
              outputs_.Add(other.outputs_);
              if (other.Type != 0) {
                Type = other.Type;
              }
              if (other.Payable != false) {
                Payable = other.Payable;
              }
              if (other.StateMutability != 0) {
                StateMutability = other.StateMutability;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Anonymous = input.ReadBool();
                    break;
                  }
                  case 16: {
                    Constant = input.ReadBool();
                    break;
                  }
                  case 26: {
                    Name = input.ReadString();
                    break;
                  }
                  case 34: {
                    inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
                    break;
                  }
                  case 42: {
                    outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
                    break;
                  }
                  case 48: {
                    Type = (global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.EntryType) input.ReadEnum();
                    break;
                  }
                  case 56: {
                    Payable = input.ReadBool();
                    break;
                  }
                  case 64: {
                    StateMutability = (global::Protocol.SmartContract.Types.ABI.Types.Entry.Types.StateMutabilityType) input.ReadEnum();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Entry message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum EntryType {
                [pbr::OriginalName("UnknownEntryType")] UnknownEntryType = 0,
                [pbr::OriginalName("Constructor")] Constructor = 1,
                [pbr::OriginalName("Function")] Function = 2,
                [pbr::OriginalName("Event")] Event = 3,
                [pbr::OriginalName("Fallback")] Fallback = 4,
              }

              public enum StateMutabilityType {
                [pbr::OriginalName("UnknownMutabilityType")] UnknownMutabilityType = 0,
                [pbr::OriginalName("Pure")] Pure = 1,
                [pbr::OriginalName("View")] View = 2,
                [pbr::OriginalName("Nonpayable")] Nonpayable = 3,
                [pbr::OriginalName("Payable")] Payable = 4,
              }

              public sealed partial class Param : pb::IMessage<Param> {
                private static readonly pb::MessageParser<Param> _parser = new pb::MessageParser<Param>(() => new Param());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Param> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Protocol.SmartContract.Types.ABI.Types.Entry.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Param() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Param(Param other) : this() {
                  indexed_ = other.indexed_;
                  name_ = other.name_;
                  type_ = other.type_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Param Clone() {
                  return new Param(this);
                }

                /// <summary>Field number for the "indexed" field.</summary>
                public const int IndexedFieldNumber = 1;
                private bool indexed_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Indexed {
                  get { return indexed_; }
                  set {
                    indexed_ = value;
                  }
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 2;
                private string name_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "type" field.</summary>
                public const int TypeFieldNumber = 3;
                private string type_ = "";
                /// <summary>
                /// SolidityType type = 3;
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Type {
                  get { return type_; }
                  set {
                    type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Param);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Param other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Indexed != other.Indexed) return false;
                  if (Name != other.Name) return false;
                  if (Type != other.Type) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Indexed != false) hash ^= Indexed.GetHashCode();
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (Type.Length != 0) hash ^= Type.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Indexed != false) {
                    output.WriteRawTag(8);
                    output.WriteBool(Indexed);
                  }
                  if (Name.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Name);
                  }
                  if (Type.Length != 0) {
                    output.WriteRawTag(26);
                    output.WriteString(Type);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Indexed != false) {
                    size += 1 + 1;
                  }
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (Type.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Param other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Indexed != false) {
                    Indexed = other.Indexed;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  if (other.Type.Length != 0) {
                    Type = other.Type;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        Indexed = input.ReadBool();
                        break;
                      }
                      case 18: {
                        Name = input.ReadString();
                        break;
                      }
                      case 26: {
                        Type = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class InternalTransaction : pb::IMessage<InternalTransaction> {
    private static readonly pb::MessageParser<InternalTransaction> _parser = new pb::MessageParser<InternalTransaction>(() => new InternalTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InternalTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalTransaction(InternalTransaction other) : this() {
      hash_ = other.hash_;
      callerAddress_ = other.callerAddress_;
      transferToAddress_ = other.transferToAddress_;
      callValueInfo_ = other.callValueInfo_.Clone();
      note_ = other.note_;
      rejected_ = other.rejected_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternalTransaction Clone() {
      return new InternalTransaction(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    /// <summary>
    /// internalTransaction identity, the root InternalTransaction hash
    /// should equals to root transaction id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "caller_address" field.</summary>
    public const int CallerAddressFieldNumber = 2;
    private pb::ByteString callerAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// the one send trx (TBD: or token) via function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CallerAddress {
      get { return callerAddress_; }
      set {
        callerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transferTo_address" field.</summary>
    public const int TransferToAddressFieldNumber = 3;
    private pb::ByteString transferToAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// the one recieve trx (TBD: or token) via function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransferToAddress {
      get { return transferToAddress_; }
      set {
        transferToAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "callValueInfo" field.</summary>
    public const int CallValueInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.InternalTransaction.Types.CallValueInfo> _repeated_callValueInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.InternalTransaction.Types.CallValueInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.InternalTransaction.Types.CallValueInfo> callValueInfo_ = new pbc::RepeatedField<global::Protocol.InternalTransaction.Types.CallValueInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.InternalTransaction.Types.CallValueInfo> CallValueInfo {
      get { return callValueInfo_; }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 5;
    private pb::ByteString note_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rejected" field.</summary>
    public const int RejectedFieldNumber = 6;
    private bool rejected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Rejected {
      get { return rejected_; }
      set {
        rejected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InternalTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InternalTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (CallerAddress != other.CallerAddress) return false;
      if (TransferToAddress != other.TransferToAddress) return false;
      if(!callValueInfo_.Equals(other.callValueInfo_)) return false;
      if (Note != other.Note) return false;
      if (Rejected != other.Rejected) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (CallerAddress.Length != 0) hash ^= CallerAddress.GetHashCode();
      if (TransferToAddress.Length != 0) hash ^= TransferToAddress.GetHashCode();
      hash ^= callValueInfo_.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (Rejected != false) hash ^= Rejected.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (CallerAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CallerAddress);
      }
      if (TransferToAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransferToAddress);
      }
      callValueInfo_.WriteTo(output, _repeated_callValueInfo_codec);
      if (Note.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Note);
      }
      if (Rejected != false) {
        output.WriteRawTag(48);
        output.WriteBool(Rejected);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (CallerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CallerAddress);
      }
      if (TransferToAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransferToAddress);
      }
      size += callValueInfo_.CalculateSize(_repeated_callValueInfo_codec);
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Note);
      }
      if (Rejected != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InternalTransaction other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.CallerAddress.Length != 0) {
        CallerAddress = other.CallerAddress;
      }
      if (other.TransferToAddress.Length != 0) {
        TransferToAddress = other.TransferToAddress;
      }
      callValueInfo_.Add(other.callValueInfo_);
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      if (other.Rejected != false) {
        Rejected = other.Rejected;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 18: {
            CallerAddress = input.ReadBytes();
            break;
          }
          case 26: {
            TransferToAddress = input.ReadBytes();
            break;
          }
          case 34: {
            callValueInfo_.AddEntriesFrom(input, _repeated_callValueInfo_codec);
            break;
          }
          case 42: {
            Note = input.ReadBytes();
            break;
          }
          case 48: {
            Rejected = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InternalTransaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class CallValueInfo : pb::IMessage<CallValueInfo> {
        private static readonly pb::MessageParser<CallValueInfo> _parser = new pb::MessageParser<CallValueInfo>(() => new CallValueInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CallValueInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.InternalTransaction.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallValueInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallValueInfo(CallValueInfo other) : this() {
          callValue_ = other.callValue_;
          tokenId_ = other.tokenId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CallValueInfo Clone() {
          return new CallValueInfo(this);
        }

        /// <summary>Field number for the "callValue" field.</summary>
        public const int CallValueFieldNumber = 1;
        private long callValue_;
        /// <summary>
        /// trx (TBD: or token) value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CallValue {
          get { return callValue_; }
          set {
            callValue_ = value;
          }
        }

        /// <summary>Field number for the "tokenId" field.</summary>
        public const int TokenIdFieldNumber = 2;
        private string tokenId_ = "";
        /// <summary>
        /// TBD: tokenName, trx should be empty
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TokenId {
          get { return tokenId_; }
          set {
            tokenId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CallValueInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CallValueInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CallValue != other.CallValue) return false;
          if (TokenId != other.TokenId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CallValue != 0L) hash ^= CallValue.GetHashCode();
          if (TokenId.Length != 0) hash ^= TokenId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CallValue != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(CallValue);
          }
          if (TokenId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TokenId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CallValue != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CallValue);
          }
          if (TokenId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CallValueInfo other) {
          if (other == null) {
            return;
          }
          if (other.CallValue != 0L) {
            CallValue = other.CallValue;
          }
          if (other.TokenId.Length != 0) {
            TokenId = other.TokenId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CallValue = input.ReadInt64();
                break;
              }
              case 18: {
                TokenId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DelegatedResourceAccountIndex : pb::IMessage<DelegatedResourceAccountIndex> {
    private static readonly pb::MessageParser<DelegatedResourceAccountIndex> _parser = new pb::MessageParser<DelegatedResourceAccountIndex>(() => new DelegatedResourceAccountIndex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelegatedResourceAccountIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelegatedResourceAccountIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelegatedResourceAccountIndex(DelegatedResourceAccountIndex other) : this() {
      account_ = other.account_;
      fromAccounts_ = other.fromAccounts_.Clone();
      toAccounts_ = other.toAccounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelegatedResourceAccountIndex Clone() {
      return new DelegatedResourceAccountIndex(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromAccounts" field.</summary>
    public const int FromAccountsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fromAccounts_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> fromAccounts_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FromAccounts {
      get { return fromAccounts_; }
    }

    /// <summary>Field number for the "toAccounts" field.</summary>
    public const int ToAccountsFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_toAccounts_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> toAccounts_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> ToAccounts {
      get { return toAccounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelegatedResourceAccountIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelegatedResourceAccountIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if(!fromAccounts_.Equals(other.fromAccounts_)) return false;
      if(!toAccounts_.Equals(other.toAccounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      hash ^= fromAccounts_.GetHashCode();
      hash ^= toAccounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Account);
      }
      fromAccounts_.WriteTo(output, _repeated_fromAccounts_codec);
      toAccounts_.WriteTo(output, _repeated_toAccounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
      }
      size += fromAccounts_.CalculateSize(_repeated_fromAccounts_codec);
      size += toAccounts_.CalculateSize(_repeated_toAccounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelegatedResourceAccountIndex other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      fromAccounts_.Add(other.fromAccounts_);
      toAccounts_.Add(other.toAccounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadBytes();
            break;
          }
          case 18: {
            fromAccounts_.AddEntriesFrom(input, _repeated_fromAccounts_codec);
            break;
          }
          case 26: {
            toAccounts_.AddEntriesFrom(input, _repeated_toAccounts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeInfo : pb::IMessage<NodeInfo> {
    private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo(NodeInfo other) : this() {
      beginSyncNum_ = other.beginSyncNum_;
      block_ = other.block_;
      solidityBlock_ = other.solidityBlock_;
      currentConnectCount_ = other.currentConnectCount_;
      activeConnectCount_ = other.activeConnectCount_;
      passiveConnectCount_ = other.passiveConnectCount_;
      totalFlow_ = other.totalFlow_;
      peerInfoList_ = other.peerInfoList_.Clone();
      configNodeInfo_ = other.configNodeInfo_ != null ? other.configNodeInfo_.Clone() : null;
      machineInfo_ = other.machineInfo_ != null ? other.machineInfo_.Clone() : null;
      cheatWitnessInfoMap_ = other.cheatWitnessInfoMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo Clone() {
      return new NodeInfo(this);
    }

    /// <summary>Field number for the "beginSyncNum" field.</summary>
    public const int BeginSyncNumFieldNumber = 1;
    private long beginSyncNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BeginSyncNum {
      get { return beginSyncNum_; }
      set {
        beginSyncNum_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private string block_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Block {
      get { return block_; }
      set {
        block_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "solidityBlock" field.</summary>
    public const int SolidityBlockFieldNumber = 3;
    private string solidityBlock_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SolidityBlock {
      get { return solidityBlock_; }
      set {
        solidityBlock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentConnectCount" field.</summary>
    public const int CurrentConnectCountFieldNumber = 4;
    private int currentConnectCount_;
    /// <summary>
    ///connect information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentConnectCount {
      get { return currentConnectCount_; }
      set {
        currentConnectCount_ = value;
      }
    }

    /// <summary>Field number for the "activeConnectCount" field.</summary>
    public const int ActiveConnectCountFieldNumber = 5;
    private int activeConnectCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveConnectCount {
      get { return activeConnectCount_; }
      set {
        activeConnectCount_ = value;
      }
    }

    /// <summary>Field number for the "passiveConnectCount" field.</summary>
    public const int PassiveConnectCountFieldNumber = 6;
    private int passiveConnectCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveConnectCount {
      get { return passiveConnectCount_; }
      set {
        passiveConnectCount_ = value;
      }
    }

    /// <summary>Field number for the "totalFlow" field.</summary>
    public const int TotalFlowFieldNumber = 7;
    private long totalFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFlow {
      get { return totalFlow_; }
      set {
        totalFlow_ = value;
      }
    }

    /// <summary>Field number for the "peerInfoList" field.</summary>
    public const int PeerInfoListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Protocol.NodeInfo.Types.PeerInfo> _repeated_peerInfoList_codec
        = pb::FieldCodec.ForMessage(66, global::Protocol.NodeInfo.Types.PeerInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocol.NodeInfo.Types.PeerInfo> peerInfoList_ = new pbc::RepeatedField<global::Protocol.NodeInfo.Types.PeerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.NodeInfo.Types.PeerInfo> PeerInfoList {
      get { return peerInfoList_; }
    }

    /// <summary>Field number for the "configNodeInfo" field.</summary>
    public const int ConfigNodeInfoFieldNumber = 9;
    private global::Protocol.NodeInfo.Types.ConfigNodeInfo configNodeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NodeInfo.Types.ConfigNodeInfo ConfigNodeInfo {
      get { return configNodeInfo_; }
      set {
        configNodeInfo_ = value;
      }
    }

    /// <summary>Field number for the "machineInfo" field.</summary>
    public const int MachineInfoFieldNumber = 10;
    private global::Protocol.NodeInfo.Types.MachineInfo machineInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.NodeInfo.Types.MachineInfo MachineInfo {
      get { return machineInfo_; }
      set {
        machineInfo_ = value;
      }
    }

    /// <summary>Field number for the "cheatWitnessInfoMap" field.</summary>
    public const int CheatWitnessInfoMapFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_cheatWitnessInfoMap_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 90);
    private readonly pbc::MapField<string, string> cheatWitnessInfoMap_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> CheatWitnessInfoMap {
      get { return cheatWitnessInfoMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeginSyncNum != other.BeginSyncNum) return false;
      if (Block != other.Block) return false;
      if (SolidityBlock != other.SolidityBlock) return false;
      if (CurrentConnectCount != other.CurrentConnectCount) return false;
      if (ActiveConnectCount != other.ActiveConnectCount) return false;
      if (PassiveConnectCount != other.PassiveConnectCount) return false;
      if (TotalFlow != other.TotalFlow) return false;
      if(!peerInfoList_.Equals(other.peerInfoList_)) return false;
      if (!object.Equals(ConfigNodeInfo, other.ConfigNodeInfo)) return false;
      if (!object.Equals(MachineInfo, other.MachineInfo)) return false;
      if (!CheatWitnessInfoMap.Equals(other.CheatWitnessInfoMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BeginSyncNum != 0L) hash ^= BeginSyncNum.GetHashCode();
      if (Block.Length != 0) hash ^= Block.GetHashCode();
      if (SolidityBlock.Length != 0) hash ^= SolidityBlock.GetHashCode();
      if (CurrentConnectCount != 0) hash ^= CurrentConnectCount.GetHashCode();
      if (ActiveConnectCount != 0) hash ^= ActiveConnectCount.GetHashCode();
      if (PassiveConnectCount != 0) hash ^= PassiveConnectCount.GetHashCode();
      if (TotalFlow != 0L) hash ^= TotalFlow.GetHashCode();
      hash ^= peerInfoList_.GetHashCode();
      if (configNodeInfo_ != null) hash ^= ConfigNodeInfo.GetHashCode();
      if (machineInfo_ != null) hash ^= MachineInfo.GetHashCode();
      hash ^= CheatWitnessInfoMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BeginSyncNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BeginSyncNum);
      }
      if (Block.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Block);
      }
      if (SolidityBlock.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SolidityBlock);
      }
      if (CurrentConnectCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentConnectCount);
      }
      if (ActiveConnectCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActiveConnectCount);
      }
      if (PassiveConnectCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PassiveConnectCount);
      }
      if (TotalFlow != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalFlow);
      }
      peerInfoList_.WriteTo(output, _repeated_peerInfoList_codec);
      if (configNodeInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ConfigNodeInfo);
      }
      if (machineInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MachineInfo);
      }
      cheatWitnessInfoMap_.WriteTo(output, _map_cheatWitnessInfoMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BeginSyncNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BeginSyncNum);
      }
      if (Block.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Block);
      }
      if (SolidityBlock.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SolidityBlock);
      }
      if (CurrentConnectCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentConnectCount);
      }
      if (ActiveConnectCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveConnectCount);
      }
      if (PassiveConnectCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveConnectCount);
      }
      if (TotalFlow != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFlow);
      }
      size += peerInfoList_.CalculateSize(_repeated_peerInfoList_codec);
      if (configNodeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigNodeInfo);
      }
      if (machineInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MachineInfo);
      }
      size += cheatWitnessInfoMap_.CalculateSize(_map_cheatWitnessInfoMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.BeginSyncNum != 0L) {
        BeginSyncNum = other.BeginSyncNum;
      }
      if (other.Block.Length != 0) {
        Block = other.Block;
      }
      if (other.SolidityBlock.Length != 0) {
        SolidityBlock = other.SolidityBlock;
      }
      if (other.CurrentConnectCount != 0) {
        CurrentConnectCount = other.CurrentConnectCount;
      }
      if (other.ActiveConnectCount != 0) {
        ActiveConnectCount = other.ActiveConnectCount;
      }
      if (other.PassiveConnectCount != 0) {
        PassiveConnectCount = other.PassiveConnectCount;
      }
      if (other.TotalFlow != 0L) {
        TotalFlow = other.TotalFlow;
      }
      peerInfoList_.Add(other.peerInfoList_);
      if (other.configNodeInfo_ != null) {
        if (configNodeInfo_ == null) {
          ConfigNodeInfo = new global::Protocol.NodeInfo.Types.ConfigNodeInfo();
        }
        ConfigNodeInfo.MergeFrom(other.ConfigNodeInfo);
      }
      if (other.machineInfo_ != null) {
        if (machineInfo_ == null) {
          MachineInfo = new global::Protocol.NodeInfo.Types.MachineInfo();
        }
        MachineInfo.MergeFrom(other.MachineInfo);
      }
      cheatWitnessInfoMap_.Add(other.cheatWitnessInfoMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BeginSyncNum = input.ReadInt64();
            break;
          }
          case 18: {
            Block = input.ReadString();
            break;
          }
          case 26: {
            SolidityBlock = input.ReadString();
            break;
          }
          case 32: {
            CurrentConnectCount = input.ReadInt32();
            break;
          }
          case 40: {
            ActiveConnectCount = input.ReadInt32();
            break;
          }
          case 48: {
            PassiveConnectCount = input.ReadInt32();
            break;
          }
          case 56: {
            TotalFlow = input.ReadInt64();
            break;
          }
          case 66: {
            peerInfoList_.AddEntriesFrom(input, _repeated_peerInfoList_codec);
            break;
          }
          case 74: {
            if (configNodeInfo_ == null) {
              ConfigNodeInfo = new global::Protocol.NodeInfo.Types.ConfigNodeInfo();
            }
            input.ReadMessage(ConfigNodeInfo);
            break;
          }
          case 82: {
            if (machineInfo_ == null) {
              MachineInfo = new global::Protocol.NodeInfo.Types.MachineInfo();
            }
            input.ReadMessage(MachineInfo);
            break;
          }
          case 90: {
            cheatWitnessInfoMap_.AddEntriesFrom(input, _map_cheatWitnessInfoMap_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NodeInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PeerInfo : pb::IMessage<PeerInfo> {
        private static readonly pb::MessageParser<PeerInfo> _parser = new pb::MessageParser<PeerInfo>(() => new PeerInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PeerInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.NodeInfo.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PeerInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PeerInfo(PeerInfo other) : this() {
          lastSyncBlock_ = other.lastSyncBlock_;
          remainNum_ = other.remainNum_;
          lastBlockUpdateTime_ = other.lastBlockUpdateTime_;
          syncFlag_ = other.syncFlag_;
          headBlockTimeWeBothHave_ = other.headBlockTimeWeBothHave_;
          needSyncFromPeer_ = other.needSyncFromPeer_;
          needSyncFromUs_ = other.needSyncFromUs_;
          host_ = other.host_;
          port_ = other.port_;
          nodeId_ = other.nodeId_;
          connectTime_ = other.connectTime_;
          avgLatency_ = other.avgLatency_;
          syncToFetchSize_ = other.syncToFetchSize_;
          syncToFetchSizePeekNum_ = other.syncToFetchSizePeekNum_;
          syncBlockRequestedSize_ = other.syncBlockRequestedSize_;
          unFetchSynNum_ = other.unFetchSynNum_;
          blockInPorcSize_ = other.blockInPorcSize_;
          headBlockWeBothHave_ = other.headBlockWeBothHave_;
          isActive_ = other.isActive_;
          score_ = other.score_;
          nodeCount_ = other.nodeCount_;
          inFlow_ = other.inFlow_;
          disconnectTimes_ = other.disconnectTimes_;
          localDisconnectReason_ = other.localDisconnectReason_;
          remoteDisconnectReason_ = other.remoteDisconnectReason_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PeerInfo Clone() {
          return new PeerInfo(this);
        }

        /// <summary>Field number for the "lastSyncBlock" field.</summary>
        public const int LastSyncBlockFieldNumber = 1;
        private string lastSyncBlock_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LastSyncBlock {
          get { return lastSyncBlock_; }
          set {
            lastSyncBlock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "remainNum" field.</summary>
        public const int RemainNumFieldNumber = 2;
        private long remainNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RemainNum {
          get { return remainNum_; }
          set {
            remainNum_ = value;
          }
        }

        /// <summary>Field number for the "lastBlockUpdateTime" field.</summary>
        public const int LastBlockUpdateTimeFieldNumber = 3;
        private long lastBlockUpdateTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LastBlockUpdateTime {
          get { return lastBlockUpdateTime_; }
          set {
            lastBlockUpdateTime_ = value;
          }
        }

        /// <summary>Field number for the "syncFlag" field.</summary>
        public const int SyncFlagFieldNumber = 4;
        private bool syncFlag_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SyncFlag {
          get { return syncFlag_; }
          set {
            syncFlag_ = value;
          }
        }

        /// <summary>Field number for the "headBlockTimeWeBothHave" field.</summary>
        public const int HeadBlockTimeWeBothHaveFieldNumber = 5;
        private long headBlockTimeWeBothHave_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long HeadBlockTimeWeBothHave {
          get { return headBlockTimeWeBothHave_; }
          set {
            headBlockTimeWeBothHave_ = value;
          }
        }

        /// <summary>Field number for the "needSyncFromPeer" field.</summary>
        public const int NeedSyncFromPeerFieldNumber = 6;
        private bool needSyncFromPeer_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NeedSyncFromPeer {
          get { return needSyncFromPeer_; }
          set {
            needSyncFromPeer_ = value;
          }
        }

        /// <summary>Field number for the "needSyncFromUs" field.</summary>
        public const int NeedSyncFromUsFieldNumber = 7;
        private bool needSyncFromUs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NeedSyncFromUs {
          get { return needSyncFromUs_; }
          set {
            needSyncFromUs_ = value;
          }
        }

        /// <summary>Field number for the "host" field.</summary>
        public const int HostFieldNumber = 8;
        private string host_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Host {
          get { return host_; }
          set {
            host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 9;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        /// <summary>Field number for the "nodeId" field.</summary>
        public const int NodeIdFieldNumber = 10;
        private string nodeId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NodeId {
          get { return nodeId_; }
          set {
            nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "connectTime" field.</summary>
        public const int ConnectTimeFieldNumber = 11;
        private long connectTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ConnectTime {
          get { return connectTime_; }
          set {
            connectTime_ = value;
          }
        }

        /// <summary>Field number for the "avgLatency" field.</summary>
        public const int AvgLatencyFieldNumber = 12;
        private double avgLatency_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AvgLatency {
          get { return avgLatency_; }
          set {
            avgLatency_ = value;
          }
        }

        /// <summary>Field number for the "syncToFetchSize" field.</summary>
        public const int SyncToFetchSizeFieldNumber = 13;
        private int syncToFetchSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SyncToFetchSize {
          get { return syncToFetchSize_; }
          set {
            syncToFetchSize_ = value;
          }
        }

        /// <summary>Field number for the "syncToFetchSizePeekNum" field.</summary>
        public const int SyncToFetchSizePeekNumFieldNumber = 14;
        private long syncToFetchSizePeekNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long SyncToFetchSizePeekNum {
          get { return syncToFetchSizePeekNum_; }
          set {
            syncToFetchSizePeekNum_ = value;
          }
        }

        /// <summary>Field number for the "syncBlockRequestedSize" field.</summary>
        public const int SyncBlockRequestedSizeFieldNumber = 15;
        private int syncBlockRequestedSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SyncBlockRequestedSize {
          get { return syncBlockRequestedSize_; }
          set {
            syncBlockRequestedSize_ = value;
          }
        }

        /// <summary>Field number for the "unFetchSynNum" field.</summary>
        public const int UnFetchSynNumFieldNumber = 16;
        private long unFetchSynNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long UnFetchSynNum {
          get { return unFetchSynNum_; }
          set {
            unFetchSynNum_ = value;
          }
        }

        /// <summary>Field number for the "blockInPorcSize" field.</summary>
        public const int BlockInPorcSizeFieldNumber = 17;
        private int blockInPorcSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlockInPorcSize {
          get { return blockInPorcSize_; }
          set {
            blockInPorcSize_ = value;
          }
        }

        /// <summary>Field number for the "headBlockWeBothHave" field.</summary>
        public const int HeadBlockWeBothHaveFieldNumber = 18;
        private string headBlockWeBothHave_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string HeadBlockWeBothHave {
          get { return headBlockWeBothHave_; }
          set {
            headBlockWeBothHave_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "isActive" field.</summary>
        public const int IsActiveFieldNumber = 19;
        private bool isActive_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsActive {
          get { return isActive_; }
          set {
            isActive_ = value;
          }
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 20;
        private int score_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "nodeCount" field.</summary>
        public const int NodeCountFieldNumber = 21;
        private int nodeCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NodeCount {
          get { return nodeCount_; }
          set {
            nodeCount_ = value;
          }
        }

        /// <summary>Field number for the "inFlow" field.</summary>
        public const int InFlowFieldNumber = 22;
        private long inFlow_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InFlow {
          get { return inFlow_; }
          set {
            inFlow_ = value;
          }
        }

        /// <summary>Field number for the "disconnectTimes" field.</summary>
        public const int DisconnectTimesFieldNumber = 23;
        private int disconnectTimes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DisconnectTimes {
          get { return disconnectTimes_; }
          set {
            disconnectTimes_ = value;
          }
        }

        /// <summary>Field number for the "localDisconnectReason" field.</summary>
        public const int LocalDisconnectReasonFieldNumber = 24;
        private string localDisconnectReason_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LocalDisconnectReason {
          get { return localDisconnectReason_; }
          set {
            localDisconnectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "remoteDisconnectReason" field.</summary>
        public const int RemoteDisconnectReasonFieldNumber = 25;
        private string remoteDisconnectReason_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemoteDisconnectReason {
          get { return remoteDisconnectReason_; }
          set {
            remoteDisconnectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PeerInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PeerInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LastSyncBlock != other.LastSyncBlock) return false;
          if (RemainNum != other.RemainNum) return false;
          if (LastBlockUpdateTime != other.LastBlockUpdateTime) return false;
          if (SyncFlag != other.SyncFlag) return false;
          if (HeadBlockTimeWeBothHave != other.HeadBlockTimeWeBothHave) return false;
          if (NeedSyncFromPeer != other.NeedSyncFromPeer) return false;
          if (NeedSyncFromUs != other.NeedSyncFromUs) return false;
          if (Host != other.Host) return false;
          if (Port != other.Port) return false;
          if (NodeId != other.NodeId) return false;
          if (ConnectTime != other.ConnectTime) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgLatency, other.AvgLatency)) return false;
          if (SyncToFetchSize != other.SyncToFetchSize) return false;
          if (SyncToFetchSizePeekNum != other.SyncToFetchSizePeekNum) return false;
          if (SyncBlockRequestedSize != other.SyncBlockRequestedSize) return false;
          if (UnFetchSynNum != other.UnFetchSynNum) return false;
          if (BlockInPorcSize != other.BlockInPorcSize) return false;
          if (HeadBlockWeBothHave != other.HeadBlockWeBothHave) return false;
          if (IsActive != other.IsActive) return false;
          if (Score != other.Score) return false;
          if (NodeCount != other.NodeCount) return false;
          if (InFlow != other.InFlow) return false;
          if (DisconnectTimes != other.DisconnectTimes) return false;
          if (LocalDisconnectReason != other.LocalDisconnectReason) return false;
          if (RemoteDisconnectReason != other.RemoteDisconnectReason) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LastSyncBlock.Length != 0) hash ^= LastSyncBlock.GetHashCode();
          if (RemainNum != 0L) hash ^= RemainNum.GetHashCode();
          if (LastBlockUpdateTime != 0L) hash ^= LastBlockUpdateTime.GetHashCode();
          if (SyncFlag != false) hash ^= SyncFlag.GetHashCode();
          if (HeadBlockTimeWeBothHave != 0L) hash ^= HeadBlockTimeWeBothHave.GetHashCode();
          if (NeedSyncFromPeer != false) hash ^= NeedSyncFromPeer.GetHashCode();
          if (NeedSyncFromUs != false) hash ^= NeedSyncFromUs.GetHashCode();
          if (Host.Length != 0) hash ^= Host.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
          if (ConnectTime != 0L) hash ^= ConnectTime.GetHashCode();
          if (AvgLatency != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgLatency);
          if (SyncToFetchSize != 0) hash ^= SyncToFetchSize.GetHashCode();
          if (SyncToFetchSizePeekNum != 0L) hash ^= SyncToFetchSizePeekNum.GetHashCode();
          if (SyncBlockRequestedSize != 0) hash ^= SyncBlockRequestedSize.GetHashCode();
          if (UnFetchSynNum != 0L) hash ^= UnFetchSynNum.GetHashCode();
          if (BlockInPorcSize != 0) hash ^= BlockInPorcSize.GetHashCode();
          if (HeadBlockWeBothHave.Length != 0) hash ^= HeadBlockWeBothHave.GetHashCode();
          if (IsActive != false) hash ^= IsActive.GetHashCode();
          if (Score != 0) hash ^= Score.GetHashCode();
          if (NodeCount != 0) hash ^= NodeCount.GetHashCode();
          if (InFlow != 0L) hash ^= InFlow.GetHashCode();
          if (DisconnectTimes != 0) hash ^= DisconnectTimes.GetHashCode();
          if (LocalDisconnectReason.Length != 0) hash ^= LocalDisconnectReason.GetHashCode();
          if (RemoteDisconnectReason.Length != 0) hash ^= RemoteDisconnectReason.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (LastSyncBlock.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LastSyncBlock);
          }
          if (RemainNum != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(RemainNum);
          }
          if (LastBlockUpdateTime != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(LastBlockUpdateTime);
          }
          if (SyncFlag != false) {
            output.WriteRawTag(32);
            output.WriteBool(SyncFlag);
          }
          if (HeadBlockTimeWeBothHave != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(HeadBlockTimeWeBothHave);
          }
          if (NeedSyncFromPeer != false) {
            output.WriteRawTag(48);
            output.WriteBool(NeedSyncFromPeer);
          }
          if (NeedSyncFromUs != false) {
            output.WriteRawTag(56);
            output.WriteBool(NeedSyncFromUs);
          }
          if (Host.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(Host);
          }
          if (Port != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(Port);
          }
          if (NodeId.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(NodeId);
          }
          if (ConnectTime != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(ConnectTime);
          }
          if (AvgLatency != 0D) {
            output.WriteRawTag(97);
            output.WriteDouble(AvgLatency);
          }
          if (SyncToFetchSize != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(SyncToFetchSize);
          }
          if (SyncToFetchSizePeekNum != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(SyncToFetchSizePeekNum);
          }
          if (SyncBlockRequestedSize != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(SyncBlockRequestedSize);
          }
          if (UnFetchSynNum != 0L) {
            output.WriteRawTag(128, 1);
            output.WriteInt64(UnFetchSynNum);
          }
          if (BlockInPorcSize != 0) {
            output.WriteRawTag(136, 1);
            output.WriteInt32(BlockInPorcSize);
          }
          if (HeadBlockWeBothHave.Length != 0) {
            output.WriteRawTag(146, 1);
            output.WriteString(HeadBlockWeBothHave);
          }
          if (IsActive != false) {
            output.WriteRawTag(152, 1);
            output.WriteBool(IsActive);
          }
          if (Score != 0) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(Score);
          }
          if (NodeCount != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(NodeCount);
          }
          if (InFlow != 0L) {
            output.WriteRawTag(176, 1);
            output.WriteInt64(InFlow);
          }
          if (DisconnectTimes != 0) {
            output.WriteRawTag(184, 1);
            output.WriteInt32(DisconnectTimes);
          }
          if (LocalDisconnectReason.Length != 0) {
            output.WriteRawTag(194, 1);
            output.WriteString(LocalDisconnectReason);
          }
          if (RemoteDisconnectReason.Length != 0) {
            output.WriteRawTag(202, 1);
            output.WriteString(RemoteDisconnectReason);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LastSyncBlock.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LastSyncBlock);
          }
          if (RemainNum != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainNum);
          }
          if (LastBlockUpdateTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBlockUpdateTime);
          }
          if (SyncFlag != false) {
            size += 1 + 1;
          }
          if (HeadBlockTimeWeBothHave != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeadBlockTimeWeBothHave);
          }
          if (NeedSyncFromPeer != false) {
            size += 1 + 1;
          }
          if (NeedSyncFromUs != false) {
            size += 1 + 1;
          }
          if (Host.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
          }
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          if (NodeId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
          }
          if (ConnectTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnectTime);
          }
          if (AvgLatency != 0D) {
            size += 1 + 8;
          }
          if (SyncToFetchSize != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SyncToFetchSize);
          }
          if (SyncToFetchSizePeekNum != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(SyncToFetchSizePeekNum);
          }
          if (SyncBlockRequestedSize != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SyncBlockRequestedSize);
          }
          if (UnFetchSynNum != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(UnFetchSynNum);
          }
          if (BlockInPorcSize != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlockInPorcSize);
          }
          if (HeadBlockWeBothHave.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(HeadBlockWeBothHave);
          }
          if (IsActive != false) {
            size += 2 + 1;
          }
          if (Score != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Score);
          }
          if (NodeCount != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NodeCount);
          }
          if (InFlow != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(InFlow);
          }
          if (DisconnectTimes != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisconnectTimes);
          }
          if (LocalDisconnectReason.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(LocalDisconnectReason);
          }
          if (RemoteDisconnectReason.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(RemoteDisconnectReason);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PeerInfo other) {
          if (other == null) {
            return;
          }
          if (other.LastSyncBlock.Length != 0) {
            LastSyncBlock = other.LastSyncBlock;
          }
          if (other.RemainNum != 0L) {
            RemainNum = other.RemainNum;
          }
          if (other.LastBlockUpdateTime != 0L) {
            LastBlockUpdateTime = other.LastBlockUpdateTime;
          }
          if (other.SyncFlag != false) {
            SyncFlag = other.SyncFlag;
          }
          if (other.HeadBlockTimeWeBothHave != 0L) {
            HeadBlockTimeWeBothHave = other.HeadBlockTimeWeBothHave;
          }
          if (other.NeedSyncFromPeer != false) {
            NeedSyncFromPeer = other.NeedSyncFromPeer;
          }
          if (other.NeedSyncFromUs != false) {
            NeedSyncFromUs = other.NeedSyncFromUs;
          }
          if (other.Host.Length != 0) {
            Host = other.Host;
          }
          if (other.Port != 0) {
            Port = other.Port;
          }
          if (other.NodeId.Length != 0) {
            NodeId = other.NodeId;
          }
          if (other.ConnectTime != 0L) {
            ConnectTime = other.ConnectTime;
          }
          if (other.AvgLatency != 0D) {
            AvgLatency = other.AvgLatency;
          }
          if (other.SyncToFetchSize != 0) {
            SyncToFetchSize = other.SyncToFetchSize;
          }
          if (other.SyncToFetchSizePeekNum != 0L) {
            SyncToFetchSizePeekNum = other.SyncToFetchSizePeekNum;
          }
          if (other.SyncBlockRequestedSize != 0) {
            SyncBlockRequestedSize = other.SyncBlockRequestedSize;
          }
          if (other.UnFetchSynNum != 0L) {
            UnFetchSynNum = other.UnFetchSynNum;
          }
          if (other.BlockInPorcSize != 0) {
            BlockInPorcSize = other.BlockInPorcSize;
          }
          if (other.HeadBlockWeBothHave.Length != 0) {
            HeadBlockWeBothHave = other.HeadBlockWeBothHave;
          }
          if (other.IsActive != false) {
            IsActive = other.IsActive;
          }
          if (other.Score != 0) {
            Score = other.Score;
          }
          if (other.NodeCount != 0) {
            NodeCount = other.NodeCount;
          }
          if (other.InFlow != 0L) {
            InFlow = other.InFlow;
          }
          if (other.DisconnectTimes != 0) {
            DisconnectTimes = other.DisconnectTimes;
          }
          if (other.LocalDisconnectReason.Length != 0) {
            LocalDisconnectReason = other.LocalDisconnectReason;
          }
          if (other.RemoteDisconnectReason.Length != 0) {
            RemoteDisconnectReason = other.RemoteDisconnectReason;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                LastSyncBlock = input.ReadString();
                break;
              }
              case 16: {
                RemainNum = input.ReadInt64();
                break;
              }
              case 24: {
                LastBlockUpdateTime = input.ReadInt64();
                break;
              }
              case 32: {
                SyncFlag = input.ReadBool();
                break;
              }
              case 40: {
                HeadBlockTimeWeBothHave = input.ReadInt64();
                break;
              }
              case 48: {
                NeedSyncFromPeer = input.ReadBool();
                break;
              }
              case 56: {
                NeedSyncFromUs = input.ReadBool();
                break;
              }
              case 66: {
                Host = input.ReadString();
                break;
              }
              case 72: {
                Port = input.ReadInt32();
                break;
              }
              case 82: {
                NodeId = input.ReadString();
                break;
              }
              case 88: {
                ConnectTime = input.ReadInt64();
                break;
              }
              case 97: {
                AvgLatency = input.ReadDouble();
                break;
              }
              case 104: {
                SyncToFetchSize = input.ReadInt32();
                break;
              }
              case 112: {
                SyncToFetchSizePeekNum = input.ReadInt64();
                break;
              }
              case 120: {
                SyncBlockRequestedSize = input.ReadInt32();
                break;
              }
              case 128: {
                UnFetchSynNum = input.ReadInt64();
                break;
              }
              case 136: {
                BlockInPorcSize = input.ReadInt32();
                break;
              }
              case 146: {
                HeadBlockWeBothHave = input.ReadString();
                break;
              }
              case 152: {
                IsActive = input.ReadBool();
                break;
              }
              case 160: {
                Score = input.ReadInt32();
                break;
              }
              case 168: {
                NodeCount = input.ReadInt32();
                break;
              }
              case 176: {
                InFlow = input.ReadInt64();
                break;
              }
              case 184: {
                DisconnectTimes = input.ReadInt32();
                break;
              }
              case 194: {
                LocalDisconnectReason = input.ReadString();
                break;
              }
              case 202: {
                RemoteDisconnectReason = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ConfigNodeInfo : pb::IMessage<ConfigNodeInfo> {
        private static readonly pb::MessageParser<ConfigNodeInfo> _parser = new pb::MessageParser<ConfigNodeInfo>(() => new ConfigNodeInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ConfigNodeInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.NodeInfo.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigNodeInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigNodeInfo(ConfigNodeInfo other) : this() {
          codeVersion_ = other.codeVersion_;
          p2PVersion_ = other.p2PVersion_;
          listenPort_ = other.listenPort_;
          discoverEnable_ = other.discoverEnable_;
          activeNodeSize_ = other.activeNodeSize_;
          passiveNodeSize_ = other.passiveNodeSize_;
          sendNodeSize_ = other.sendNodeSize_;
          maxConnectCount_ = other.maxConnectCount_;
          sameIpMaxConnectCount_ = other.sameIpMaxConnectCount_;
          backupListenPort_ = other.backupListenPort_;
          backupMemberSize_ = other.backupMemberSize_;
          backupPriority_ = other.backupPriority_;
          dbVersion_ = other.dbVersion_;
          minParticipationRate_ = other.minParticipationRate_;
          supportConstant_ = other.supportConstant_;
          minTimeRatio_ = other.minTimeRatio_;
          maxTimeRatio_ = other.maxTimeRatio_;
          allowCreationOfContracts_ = other.allowCreationOfContracts_;
          allowAdaptiveEnergy_ = other.allowAdaptiveEnergy_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ConfigNodeInfo Clone() {
          return new ConfigNodeInfo(this);
        }

        /// <summary>Field number for the "codeVersion" field.</summary>
        public const int CodeVersionFieldNumber = 1;
        private string codeVersion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CodeVersion {
          get { return codeVersion_; }
          set {
            codeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "p2pVersion" field.</summary>
        public const int P2PVersionFieldNumber = 2;
        private string p2PVersion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string P2PVersion {
          get { return p2PVersion_; }
          set {
            p2PVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "listenPort" field.</summary>
        public const int ListenPortFieldNumber = 3;
        private int listenPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ListenPort {
          get { return listenPort_; }
          set {
            listenPort_ = value;
          }
        }

        /// <summary>Field number for the "discoverEnable" field.</summary>
        public const int DiscoverEnableFieldNumber = 4;
        private bool discoverEnable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool DiscoverEnable {
          get { return discoverEnable_; }
          set {
            discoverEnable_ = value;
          }
        }

        /// <summary>Field number for the "activeNodeSize" field.</summary>
        public const int ActiveNodeSizeFieldNumber = 5;
        private int activeNodeSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ActiveNodeSize {
          get { return activeNodeSize_; }
          set {
            activeNodeSize_ = value;
          }
        }

        /// <summary>Field number for the "passiveNodeSize" field.</summary>
        public const int PassiveNodeSizeFieldNumber = 6;
        private int passiveNodeSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PassiveNodeSize {
          get { return passiveNodeSize_; }
          set {
            passiveNodeSize_ = value;
          }
        }

        /// <summary>Field number for the "sendNodeSize" field.</summary>
        public const int SendNodeSizeFieldNumber = 7;
        private int sendNodeSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SendNodeSize {
          get { return sendNodeSize_; }
          set {
            sendNodeSize_ = value;
          }
        }

        /// <summary>Field number for the "maxConnectCount" field.</summary>
        public const int MaxConnectCountFieldNumber = 8;
        private int maxConnectCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxConnectCount {
          get { return maxConnectCount_; }
          set {
            maxConnectCount_ = value;
          }
        }

        /// <summary>Field number for the "sameIpMaxConnectCount" field.</summary>
        public const int SameIpMaxConnectCountFieldNumber = 9;
        private int sameIpMaxConnectCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SameIpMaxConnectCount {
          get { return sameIpMaxConnectCount_; }
          set {
            sameIpMaxConnectCount_ = value;
          }
        }

        /// <summary>Field number for the "backupListenPort" field.</summary>
        public const int BackupListenPortFieldNumber = 10;
        private int backupListenPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BackupListenPort {
          get { return backupListenPort_; }
          set {
            backupListenPort_ = value;
          }
        }

        /// <summary>Field number for the "backupMemberSize" field.</summary>
        public const int BackupMemberSizeFieldNumber = 11;
        private int backupMemberSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BackupMemberSize {
          get { return backupMemberSize_; }
          set {
            backupMemberSize_ = value;
          }
        }

        /// <summary>Field number for the "backupPriority" field.</summary>
        public const int BackupPriorityFieldNumber = 12;
        private int backupPriority_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BackupPriority {
          get { return backupPriority_; }
          set {
            backupPriority_ = value;
          }
        }

        /// <summary>Field number for the "dbVersion" field.</summary>
        public const int DbVersionFieldNumber = 13;
        private int dbVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DbVersion {
          get { return dbVersion_; }
          set {
            dbVersion_ = value;
          }
        }

        /// <summary>Field number for the "minParticipationRate" field.</summary>
        public const int MinParticipationRateFieldNumber = 14;
        private int minParticipationRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MinParticipationRate {
          get { return minParticipationRate_; }
          set {
            minParticipationRate_ = value;
          }
        }

        /// <summary>Field number for the "supportConstant" field.</summary>
        public const int SupportConstantFieldNumber = 15;
        private bool supportConstant_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SupportConstant {
          get { return supportConstant_; }
          set {
            supportConstant_ = value;
          }
        }

        /// <summary>Field number for the "minTimeRatio" field.</summary>
        public const int MinTimeRatioFieldNumber = 16;
        private double minTimeRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MinTimeRatio {
          get { return minTimeRatio_; }
          set {
            minTimeRatio_ = value;
          }
        }

        /// <summary>Field number for the "maxTimeRatio" field.</summary>
        public const int MaxTimeRatioFieldNumber = 17;
        private double maxTimeRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MaxTimeRatio {
          get { return maxTimeRatio_; }
          set {
            maxTimeRatio_ = value;
          }
        }

        /// <summary>Field number for the "allowCreationOfContracts" field.</summary>
        public const int AllowCreationOfContractsFieldNumber = 18;
        private long allowCreationOfContracts_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AllowCreationOfContracts {
          get { return allowCreationOfContracts_; }
          set {
            allowCreationOfContracts_ = value;
          }
        }

        /// <summary>Field number for the "allowAdaptiveEnergy" field.</summary>
        public const int AllowAdaptiveEnergyFieldNumber = 19;
        private long allowAdaptiveEnergy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AllowAdaptiveEnergy {
          get { return allowAdaptiveEnergy_; }
          set {
            allowAdaptiveEnergy_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ConfigNodeInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ConfigNodeInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CodeVersion != other.CodeVersion) return false;
          if (P2PVersion != other.P2PVersion) return false;
          if (ListenPort != other.ListenPort) return false;
          if (DiscoverEnable != other.DiscoverEnable) return false;
          if (ActiveNodeSize != other.ActiveNodeSize) return false;
          if (PassiveNodeSize != other.PassiveNodeSize) return false;
          if (SendNodeSize != other.SendNodeSize) return false;
          if (MaxConnectCount != other.MaxConnectCount) return false;
          if (SameIpMaxConnectCount != other.SameIpMaxConnectCount) return false;
          if (BackupListenPort != other.BackupListenPort) return false;
          if (BackupMemberSize != other.BackupMemberSize) return false;
          if (BackupPriority != other.BackupPriority) return false;
          if (DbVersion != other.DbVersion) return false;
          if (MinParticipationRate != other.MinParticipationRate) return false;
          if (SupportConstant != other.SupportConstant) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinTimeRatio, other.MinTimeRatio)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxTimeRatio, other.MaxTimeRatio)) return false;
          if (AllowCreationOfContracts != other.AllowCreationOfContracts) return false;
          if (AllowAdaptiveEnergy != other.AllowAdaptiveEnergy) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CodeVersion.Length != 0) hash ^= CodeVersion.GetHashCode();
          if (P2PVersion.Length != 0) hash ^= P2PVersion.GetHashCode();
          if (ListenPort != 0) hash ^= ListenPort.GetHashCode();
          if (DiscoverEnable != false) hash ^= DiscoverEnable.GetHashCode();
          if (ActiveNodeSize != 0) hash ^= ActiveNodeSize.GetHashCode();
          if (PassiveNodeSize != 0) hash ^= PassiveNodeSize.GetHashCode();
          if (SendNodeSize != 0) hash ^= SendNodeSize.GetHashCode();
          if (MaxConnectCount != 0) hash ^= MaxConnectCount.GetHashCode();
          if (SameIpMaxConnectCount != 0) hash ^= SameIpMaxConnectCount.GetHashCode();
          if (BackupListenPort != 0) hash ^= BackupListenPort.GetHashCode();
          if (BackupMemberSize != 0) hash ^= BackupMemberSize.GetHashCode();
          if (BackupPriority != 0) hash ^= BackupPriority.GetHashCode();
          if (DbVersion != 0) hash ^= DbVersion.GetHashCode();
          if (MinParticipationRate != 0) hash ^= MinParticipationRate.GetHashCode();
          if (SupportConstant != false) hash ^= SupportConstant.GetHashCode();
          if (MinTimeRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinTimeRatio);
          if (MaxTimeRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxTimeRatio);
          if (AllowCreationOfContracts != 0L) hash ^= AllowCreationOfContracts.GetHashCode();
          if (AllowAdaptiveEnergy != 0L) hash ^= AllowAdaptiveEnergy.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CodeVersion.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CodeVersion);
          }
          if (P2PVersion.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(P2PVersion);
          }
          if (ListenPort != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ListenPort);
          }
          if (DiscoverEnable != false) {
            output.WriteRawTag(32);
            output.WriteBool(DiscoverEnable);
          }
          if (ActiveNodeSize != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(ActiveNodeSize);
          }
          if (PassiveNodeSize != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(PassiveNodeSize);
          }
          if (SendNodeSize != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(SendNodeSize);
          }
          if (MaxConnectCount != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(MaxConnectCount);
          }
          if (SameIpMaxConnectCount != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(SameIpMaxConnectCount);
          }
          if (BackupListenPort != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(BackupListenPort);
          }
          if (BackupMemberSize != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(BackupMemberSize);
          }
          if (BackupPriority != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(BackupPriority);
          }
          if (DbVersion != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(DbVersion);
          }
          if (MinParticipationRate != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(MinParticipationRate);
          }
          if (SupportConstant != false) {
            output.WriteRawTag(120);
            output.WriteBool(SupportConstant);
          }
          if (MinTimeRatio != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(MinTimeRatio);
          }
          if (MaxTimeRatio != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(MaxTimeRatio);
          }
          if (AllowCreationOfContracts != 0L) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(AllowCreationOfContracts);
          }
          if (AllowAdaptiveEnergy != 0L) {
            output.WriteRawTag(152, 1);
            output.WriteInt64(AllowAdaptiveEnergy);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CodeVersion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CodeVersion);
          }
          if (P2PVersion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(P2PVersion);
          }
          if (ListenPort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ListenPort);
          }
          if (DiscoverEnable != false) {
            size += 1 + 1;
          }
          if (ActiveNodeSize != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveNodeSize);
          }
          if (PassiveNodeSize != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveNodeSize);
          }
          if (SendNodeSize != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SendNodeSize);
          }
          if (MaxConnectCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxConnectCount);
          }
          if (SameIpMaxConnectCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(SameIpMaxConnectCount);
          }
          if (BackupListenPort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackupListenPort);
          }
          if (BackupMemberSize != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackupMemberSize);
          }
          if (BackupPriority != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BackupPriority);
          }
          if (DbVersion != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DbVersion);
          }
          if (MinParticipationRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinParticipationRate);
          }
          if (SupportConstant != false) {
            size += 1 + 1;
          }
          if (MinTimeRatio != 0D) {
            size += 2 + 8;
          }
          if (MaxTimeRatio != 0D) {
            size += 2 + 8;
          }
          if (AllowCreationOfContracts != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(AllowCreationOfContracts);
          }
          if (AllowAdaptiveEnergy != 0L) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(AllowAdaptiveEnergy);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ConfigNodeInfo other) {
          if (other == null) {
            return;
          }
          if (other.CodeVersion.Length != 0) {
            CodeVersion = other.CodeVersion;
          }
          if (other.P2PVersion.Length != 0) {
            P2PVersion = other.P2PVersion;
          }
          if (other.ListenPort != 0) {
            ListenPort = other.ListenPort;
          }
          if (other.DiscoverEnable != false) {
            DiscoverEnable = other.DiscoverEnable;
          }
          if (other.ActiveNodeSize != 0) {
            ActiveNodeSize = other.ActiveNodeSize;
          }
          if (other.PassiveNodeSize != 0) {
            PassiveNodeSize = other.PassiveNodeSize;
          }
          if (other.SendNodeSize != 0) {
            SendNodeSize = other.SendNodeSize;
          }
          if (other.MaxConnectCount != 0) {
            MaxConnectCount = other.MaxConnectCount;
          }
          if (other.SameIpMaxConnectCount != 0) {
            SameIpMaxConnectCount = other.SameIpMaxConnectCount;
          }
          if (other.BackupListenPort != 0) {
            BackupListenPort = other.BackupListenPort;
          }
          if (other.BackupMemberSize != 0) {
            BackupMemberSize = other.BackupMemberSize;
          }
          if (other.BackupPriority != 0) {
            BackupPriority = other.BackupPriority;
          }
          if (other.DbVersion != 0) {
            DbVersion = other.DbVersion;
          }
          if (other.MinParticipationRate != 0) {
            MinParticipationRate = other.MinParticipationRate;
          }
          if (other.SupportConstant != false) {
            SupportConstant = other.SupportConstant;
          }
          if (other.MinTimeRatio != 0D) {
            MinTimeRatio = other.MinTimeRatio;
          }
          if (other.MaxTimeRatio != 0D) {
            MaxTimeRatio = other.MaxTimeRatio;
          }
          if (other.AllowCreationOfContracts != 0L) {
            AllowCreationOfContracts = other.AllowCreationOfContracts;
          }
          if (other.AllowAdaptiveEnergy != 0L) {
            AllowAdaptiveEnergy = other.AllowAdaptiveEnergy;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CodeVersion = input.ReadString();
                break;
              }
              case 18: {
                P2PVersion = input.ReadString();
                break;
              }
              case 24: {
                ListenPort = input.ReadInt32();
                break;
              }
              case 32: {
                DiscoverEnable = input.ReadBool();
                break;
              }
              case 40: {
                ActiveNodeSize = input.ReadInt32();
                break;
              }
              case 48: {
                PassiveNodeSize = input.ReadInt32();
                break;
              }
              case 56: {
                SendNodeSize = input.ReadInt32();
                break;
              }
              case 64: {
                MaxConnectCount = input.ReadInt32();
                break;
              }
              case 72: {
                SameIpMaxConnectCount = input.ReadInt32();
                break;
              }
              case 80: {
                BackupListenPort = input.ReadInt32();
                break;
              }
              case 88: {
                BackupMemberSize = input.ReadInt32();
                break;
              }
              case 96: {
                BackupPriority = input.ReadInt32();
                break;
              }
              case 104: {
                DbVersion = input.ReadInt32();
                break;
              }
              case 112: {
                MinParticipationRate = input.ReadInt32();
                break;
              }
              case 120: {
                SupportConstant = input.ReadBool();
                break;
              }
              case 129: {
                MinTimeRatio = input.ReadDouble();
                break;
              }
              case 137: {
                MaxTimeRatio = input.ReadDouble();
                break;
              }
              case 144: {
                AllowCreationOfContracts = input.ReadInt64();
                break;
              }
              case 152: {
                AllowAdaptiveEnergy = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MachineInfo : pb::IMessage<MachineInfo> {
        private static readonly pb::MessageParser<MachineInfo> _parser = new pb::MessageParser<MachineInfo>(() => new MachineInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MachineInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.NodeInfo.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MachineInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MachineInfo(MachineInfo other) : this() {
          threadCount_ = other.threadCount_;
          deadLockThreadCount_ = other.deadLockThreadCount_;
          cpuCount_ = other.cpuCount_;
          totalMemory_ = other.totalMemory_;
          freeMemory_ = other.freeMemory_;
          cpuRate_ = other.cpuRate_;
          javaVersion_ = other.javaVersion_;
          osName_ = other.osName_;
          jvmTotalMemoery_ = other.jvmTotalMemoery_;
          jvmFreeMemory_ = other.jvmFreeMemory_;
          processCpuRate_ = other.processCpuRate_;
          memoryDescInfoList_ = other.memoryDescInfoList_.Clone();
          deadLockThreadInfoList_ = other.deadLockThreadInfoList_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MachineInfo Clone() {
          return new MachineInfo(this);
        }

        /// <summary>Field number for the "threadCount" field.</summary>
        public const int ThreadCountFieldNumber = 1;
        private int threadCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ThreadCount {
          get { return threadCount_; }
          set {
            threadCount_ = value;
          }
        }

        /// <summary>Field number for the "deadLockThreadCount" field.</summary>
        public const int DeadLockThreadCountFieldNumber = 2;
        private int deadLockThreadCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DeadLockThreadCount {
          get { return deadLockThreadCount_; }
          set {
            deadLockThreadCount_ = value;
          }
        }

        /// <summary>Field number for the "cpuCount" field.</summary>
        public const int CpuCountFieldNumber = 3;
        private int cpuCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CpuCount {
          get { return cpuCount_; }
          set {
            cpuCount_ = value;
          }
        }

        /// <summary>Field number for the "totalMemory" field.</summary>
        public const int TotalMemoryFieldNumber = 4;
        private long totalMemory_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TotalMemory {
          get { return totalMemory_; }
          set {
            totalMemory_ = value;
          }
        }

        /// <summary>Field number for the "freeMemory" field.</summary>
        public const int FreeMemoryFieldNumber = 5;
        private long freeMemory_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FreeMemory {
          get { return freeMemory_; }
          set {
            freeMemory_ = value;
          }
        }

        /// <summary>Field number for the "cpuRate" field.</summary>
        public const int CpuRateFieldNumber = 6;
        private double cpuRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double CpuRate {
          get { return cpuRate_; }
          set {
            cpuRate_ = value;
          }
        }

        /// <summary>Field number for the "javaVersion" field.</summary>
        public const int JavaVersionFieldNumber = 7;
        private string javaVersion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string JavaVersion {
          get { return javaVersion_; }
          set {
            javaVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "osName" field.</summary>
        public const int OsNameFieldNumber = 8;
        private string osName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string OsName {
          get { return osName_; }
          set {
            osName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "jvmTotalMemoery" field.</summary>
        public const int JvmTotalMemoeryFieldNumber = 9;
        private long jvmTotalMemoery_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long JvmTotalMemoery {
          get { return jvmTotalMemoery_; }
          set {
            jvmTotalMemoery_ = value;
          }
        }

        /// <summary>Field number for the "jvmFreeMemory" field.</summary>
        public const int JvmFreeMemoryFieldNumber = 10;
        private long jvmFreeMemory_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long JvmFreeMemory {
          get { return jvmFreeMemory_; }
          set {
            jvmFreeMemory_ = value;
          }
        }

        /// <summary>Field number for the "processCpuRate" field.</summary>
        public const int ProcessCpuRateFieldNumber = 11;
        private double processCpuRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double ProcessCpuRate {
          get { return processCpuRate_; }
          set {
            processCpuRate_ = value;
          }
        }

        /// <summary>Field number for the "memoryDescInfoList" field.</summary>
        public const int MemoryDescInfoListFieldNumber = 12;
        private static readonly pb::FieldCodec<global::Protocol.NodeInfo.Types.MachineInfo.Types.MemoryDescInfo> _repeated_memoryDescInfoList_codec
            = pb::FieldCodec.ForMessage(98, global::Protocol.NodeInfo.Types.MachineInfo.Types.MemoryDescInfo.Parser);
        private readonly pbc::RepeatedField<global::Protocol.NodeInfo.Types.MachineInfo.Types.MemoryDescInfo> memoryDescInfoList_ = new pbc::RepeatedField<global::Protocol.NodeInfo.Types.MachineInfo.Types.MemoryDescInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.NodeInfo.Types.MachineInfo.Types.MemoryDescInfo> MemoryDescInfoList {
          get { return memoryDescInfoList_; }
        }

        /// <summary>Field number for the "deadLockThreadInfoList" field.</summary>
        public const int DeadLockThreadInfoListFieldNumber = 13;
        private static readonly pb::FieldCodec<global::Protocol.NodeInfo.Types.MachineInfo.Types.DeadLockThreadInfo> _repeated_deadLockThreadInfoList_codec
            = pb::FieldCodec.ForMessage(106, global::Protocol.NodeInfo.Types.MachineInfo.Types.DeadLockThreadInfo.Parser);
        private readonly pbc::RepeatedField<global::Protocol.NodeInfo.Types.MachineInfo.Types.DeadLockThreadInfo> deadLockThreadInfoList_ = new pbc::RepeatedField<global::Protocol.NodeInfo.Types.MachineInfo.Types.DeadLockThreadInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.NodeInfo.Types.MachineInfo.Types.DeadLockThreadInfo> DeadLockThreadInfoList {
          get { return deadLockThreadInfoList_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MachineInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MachineInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ThreadCount != other.ThreadCount) return false;
          if (DeadLockThreadCount != other.DeadLockThreadCount) return false;
          if (CpuCount != other.CpuCount) return false;
          if (TotalMemory != other.TotalMemory) return false;
          if (FreeMemory != other.FreeMemory) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CpuRate, other.CpuRate)) return false;
          if (JavaVersion != other.JavaVersion) return false;
          if (OsName != other.OsName) return false;
          if (JvmTotalMemoery != other.JvmTotalMemoery) return false;
          if (JvmFreeMemory != other.JvmFreeMemory) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProcessCpuRate, other.ProcessCpuRate)) return false;
          if(!memoryDescInfoList_.Equals(other.memoryDescInfoList_)) return false;
          if(!deadLockThreadInfoList_.Equals(other.deadLockThreadInfoList_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ThreadCount != 0) hash ^= ThreadCount.GetHashCode();
          if (DeadLockThreadCount != 0) hash ^= DeadLockThreadCount.GetHashCode();
          if (CpuCount != 0) hash ^= CpuCount.GetHashCode();
          if (TotalMemory != 0L) hash ^= TotalMemory.GetHashCode();
          if (FreeMemory != 0L) hash ^= FreeMemory.GetHashCode();
          if (CpuRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CpuRate);
          if (JavaVersion.Length != 0) hash ^= JavaVersion.GetHashCode();
          if (OsName.Length != 0) hash ^= OsName.GetHashCode();
          if (JvmTotalMemoery != 0L) hash ^= JvmTotalMemoery.GetHashCode();
          if (JvmFreeMemory != 0L) hash ^= JvmFreeMemory.GetHashCode();
          if (ProcessCpuRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProcessCpuRate);
          hash ^= memoryDescInfoList_.GetHashCode();
          hash ^= deadLockThreadInfoList_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ThreadCount != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(ThreadCount);
          }
          if (DeadLockThreadCount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(DeadLockThreadCount);
          }
          if (CpuCount != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(CpuCount);
          }
          if (TotalMemory != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(TotalMemory);
          }
          if (FreeMemory != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(FreeMemory);
          }
          if (CpuRate != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(CpuRate);
          }
          if (JavaVersion.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(JavaVersion);
          }
          if (OsName.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(OsName);
          }
          if (JvmTotalMemoery != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(JvmTotalMemoery);
          }
          if (JvmFreeMemory != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(JvmFreeMemory);
          }
          if (ProcessCpuRate != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(ProcessCpuRate);
          }
          memoryDescInfoList_.WriteTo(output, _repeated_memoryDescInfoList_codec);
          deadLockThreadInfoList_.WriteTo(output, _repeated_deadLockThreadInfoList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ThreadCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadCount);
          }
          if (DeadLockThreadCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeadLockThreadCount);
          }
          if (CpuCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuCount);
          }
          if (TotalMemory != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalMemory);
          }
          if (FreeMemory != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FreeMemory);
          }
          if (CpuRate != 0D) {
            size += 1 + 8;
          }
          if (JavaVersion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(JavaVersion);
          }
          if (OsName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(OsName);
          }
          if (JvmTotalMemoery != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(JvmTotalMemoery);
          }
          if (JvmFreeMemory != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(JvmFreeMemory);
          }
          if (ProcessCpuRate != 0D) {
            size += 1 + 8;
          }
          size += memoryDescInfoList_.CalculateSize(_repeated_memoryDescInfoList_codec);
          size += deadLockThreadInfoList_.CalculateSize(_repeated_deadLockThreadInfoList_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MachineInfo other) {
          if (other == null) {
            return;
          }
          if (other.ThreadCount != 0) {
            ThreadCount = other.ThreadCount;
          }
          if (other.DeadLockThreadCount != 0) {
            DeadLockThreadCount = other.DeadLockThreadCount;
          }
          if (other.CpuCount != 0) {
            CpuCount = other.CpuCount;
          }
          if (other.TotalMemory != 0L) {
            TotalMemory = other.TotalMemory;
          }
          if (other.FreeMemory != 0L) {
            FreeMemory = other.FreeMemory;
          }
          if (other.CpuRate != 0D) {
            CpuRate = other.CpuRate;
          }
          if (other.JavaVersion.Length != 0) {
            JavaVersion = other.JavaVersion;
          }
          if (other.OsName.Length != 0) {
            OsName = other.OsName;
          }
          if (other.JvmTotalMemoery != 0L) {
            JvmTotalMemoery = other.JvmTotalMemoery;
          }
          if (other.JvmFreeMemory != 0L) {
            JvmFreeMemory = other.JvmFreeMemory;
          }
          if (other.ProcessCpuRate != 0D) {
            ProcessCpuRate = other.ProcessCpuRate;
          }
          memoryDescInfoList_.Add(other.memoryDescInfoList_);
          deadLockThreadInfoList_.Add(other.deadLockThreadInfoList_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ThreadCount = input.ReadInt32();
                break;
              }
              case 16: {
                DeadLockThreadCount = input.ReadInt32();
                break;
              }
              case 24: {
                CpuCount = input.ReadInt32();
                break;
              }
              case 32: {
                TotalMemory = input.ReadInt64();
                break;
              }
              case 40: {
                FreeMemory = input.ReadInt64();
                break;
              }
              case 49: {
                CpuRate = input.ReadDouble();
                break;
              }
              case 58: {
                JavaVersion = input.ReadString();
                break;
              }
              case 66: {
                OsName = input.ReadString();
                break;
              }
              case 72: {
                JvmTotalMemoery = input.ReadInt64();
                break;
              }
              case 80: {
                JvmFreeMemory = input.ReadInt64();
                break;
              }
              case 89: {
                ProcessCpuRate = input.ReadDouble();
                break;
              }
              case 98: {
                memoryDescInfoList_.AddEntriesFrom(input, _repeated_memoryDescInfoList_codec);
                break;
              }
              case 106: {
                deadLockThreadInfoList_.AddEntriesFrom(input, _repeated_deadLockThreadInfoList_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the MachineInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class MemoryDescInfo : pb::IMessage<MemoryDescInfo> {
            private static readonly pb::MessageParser<MemoryDescInfo> _parser = new pb::MessageParser<MemoryDescInfo>(() => new MemoryDescInfo());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MemoryDescInfo> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protocol.NodeInfo.Types.MachineInfo.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MemoryDescInfo() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MemoryDescInfo(MemoryDescInfo other) : this() {
              name_ = other.name_;
              initSize_ = other.initSize_;
              useSize_ = other.useSize_;
              maxSize_ = other.maxSize_;
              useRate_ = other.useRate_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MemoryDescInfo Clone() {
              return new MemoryDescInfo(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "initSize" field.</summary>
            public const int InitSizeFieldNumber = 2;
            private long initSize_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long InitSize {
              get { return initSize_; }
              set {
                initSize_ = value;
              }
            }

            /// <summary>Field number for the "useSize" field.</summary>
            public const int UseSizeFieldNumber = 3;
            private long useSize_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long UseSize {
              get { return useSize_; }
              set {
                useSize_ = value;
              }
            }

            /// <summary>Field number for the "maxSize" field.</summary>
            public const int MaxSizeFieldNumber = 4;
            private long maxSize_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long MaxSize {
              get { return maxSize_; }
              set {
                maxSize_ = value;
              }
            }

            /// <summary>Field number for the "useRate" field.</summary>
            public const int UseRateFieldNumber = 5;
            private double useRate_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public double UseRate {
              get { return useRate_; }
              set {
                useRate_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MemoryDescInfo);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MemoryDescInfo other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (InitSize != other.InitSize) return false;
              if (UseSize != other.UseSize) return false;
              if (MaxSize != other.MaxSize) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UseRate, other.UseRate)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (InitSize != 0L) hash ^= InitSize.GetHashCode();
              if (UseSize != 0L) hash ^= UseSize.GetHashCode();
              if (MaxSize != 0L) hash ^= MaxSize.GetHashCode();
              if (UseRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UseRate);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (InitSize != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(InitSize);
              }
              if (UseSize != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(UseSize);
              }
              if (MaxSize != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(MaxSize);
              }
              if (UseRate != 0D) {
                output.WriteRawTag(41);
                output.WriteDouble(UseRate);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (InitSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(InitSize);
              }
              if (UseSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(UseSize);
              }
              if (MaxSize != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxSize);
              }
              if (UseRate != 0D) {
                size += 1 + 8;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MemoryDescInfo other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.InitSize != 0L) {
                InitSize = other.InitSize;
              }
              if (other.UseSize != 0L) {
                UseSize = other.UseSize;
              }
              if (other.MaxSize != 0L) {
                MaxSize = other.MaxSize;
              }
              if (other.UseRate != 0D) {
                UseRate = other.UseRate;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 16: {
                    InitSize = input.ReadInt64();
                    break;
                  }
                  case 24: {
                    UseSize = input.ReadInt64();
                    break;
                  }
                  case 32: {
                    MaxSize = input.ReadInt64();
                    break;
                  }
                  case 41: {
                    UseRate = input.ReadDouble();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class DeadLockThreadInfo : pb::IMessage<DeadLockThreadInfo> {
            private static readonly pb::MessageParser<DeadLockThreadInfo> _parser = new pb::MessageParser<DeadLockThreadInfo>(() => new DeadLockThreadInfo());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DeadLockThreadInfo> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protocol.NodeInfo.Types.MachineInfo.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeadLockThreadInfo() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeadLockThreadInfo(DeadLockThreadInfo other) : this() {
              name_ = other.name_;
              lockName_ = other.lockName_;
              lockOwner_ = other.lockOwner_;
              state_ = other.state_;
              blockTime_ = other.blockTime_;
              waitTime_ = other.waitTime_;
              stackTrace_ = other.stackTrace_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DeadLockThreadInfo Clone() {
              return new DeadLockThreadInfo(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "lockName" field.</summary>
            public const int LockNameFieldNumber = 2;
            private string lockName_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string LockName {
              get { return lockName_; }
              set {
                lockName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "lockOwner" field.</summary>
            public const int LockOwnerFieldNumber = 3;
            private string lockOwner_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string LockOwner {
              get { return lockOwner_; }
              set {
                lockOwner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "state" field.</summary>
            public const int StateFieldNumber = 4;
            private string state_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string State {
              get { return state_; }
              set {
                state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "blockTime" field.</summary>
            public const int BlockTimeFieldNumber = 5;
            private long blockTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long BlockTime {
              get { return blockTime_; }
              set {
                blockTime_ = value;
              }
            }

            /// <summary>Field number for the "waitTime" field.</summary>
            public const int WaitTimeFieldNumber = 6;
            private long waitTime_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long WaitTime {
              get { return waitTime_; }
              set {
                waitTime_ = value;
              }
            }

            /// <summary>Field number for the "stackTrace" field.</summary>
            public const int StackTraceFieldNumber = 7;
            private string stackTrace_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string StackTrace {
              get { return stackTrace_; }
              set {
                stackTrace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DeadLockThreadInfo);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DeadLockThreadInfo other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (LockName != other.LockName) return false;
              if (LockOwner != other.LockOwner) return false;
              if (State != other.State) return false;
              if (BlockTime != other.BlockTime) return false;
              if (WaitTime != other.WaitTime) return false;
              if (StackTrace != other.StackTrace) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              if (LockName.Length != 0) hash ^= LockName.GetHashCode();
              if (LockOwner.Length != 0) hash ^= LockOwner.GetHashCode();
              if (State.Length != 0) hash ^= State.GetHashCode();
              if (BlockTime != 0L) hash ^= BlockTime.GetHashCode();
              if (WaitTime != 0L) hash ^= WaitTime.GetHashCode();
              if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (LockName.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(LockName);
              }
              if (LockOwner.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(LockOwner);
              }
              if (State.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(State);
              }
              if (BlockTime != 0L) {
                output.WriteRawTag(40);
                output.WriteInt64(BlockTime);
              }
              if (WaitTime != 0L) {
                output.WriteRawTag(48);
                output.WriteInt64(WaitTime);
              }
              if (StackTrace.Length != 0) {
                output.WriteRawTag(58);
                output.WriteString(StackTrace);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (LockName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LockName);
              }
              if (LockOwner.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(LockOwner);
              }
              if (State.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
              }
              if (BlockTime != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockTime);
              }
              if (WaitTime != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(WaitTime);
              }
              if (StackTrace.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DeadLockThreadInfo other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              if (other.LockName.Length != 0) {
                LockName = other.LockName;
              }
              if (other.LockOwner.Length != 0) {
                LockOwner = other.LockOwner;
              }
              if (other.State.Length != 0) {
                State = other.State;
              }
              if (other.BlockTime != 0L) {
                BlockTime = other.BlockTime;
              }
              if (other.WaitTime != 0L) {
                WaitTime = other.WaitTime;
              }
              if (other.StackTrace.Length != 0) {
                StackTrace = other.StackTrace;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    LockName = input.ReadString();
                    break;
                  }
                  case 26: {
                    LockOwner = input.ReadString();
                    break;
                  }
                  case 34: {
                    State = input.ReadString();
                    break;
                  }
                  case 40: {
                    BlockTime = input.ReadInt64();
                    break;
                  }
                  case 48: {
                    WaitTime = input.ReadInt64();
                    break;
                  }
                  case 58: {
                    StackTrace = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
